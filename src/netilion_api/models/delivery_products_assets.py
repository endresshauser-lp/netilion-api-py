# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeliveryProductsAssets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_id': 'int',
        'serial_number': 'str',
        'href': 'str'
    }

    attribute_map = {
        'asset_id': 'asset_id',
        'serial_number': 'serial_number',
        'href': 'href'
    }

    def __init__(self, asset_id=None, serial_number=None, href=None):  # noqa: E501
        """DeliveryProductsAssets - a model defined in Swagger"""  # noqa: E501
        self._asset_id = None
        self._serial_number = None
        self._href = None
        self.discriminator = None
        if asset_id is not None:
            self.asset_id = asset_id
        if serial_number is not None:
            self.serial_number = serial_number
        if href is not None:
            self.href = href

    @property
    def asset_id(self):
        """Gets the asset_id of this DeliveryProductsAssets.  # noqa: E501

        Id of the object  # noqa: E501

        :return: The asset_id of this DeliveryProductsAssets.  # noqa: E501
        :rtype: int
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this DeliveryProductsAssets.

        Id of the object  # noqa: E501

        :param asset_id: The asset_id of this DeliveryProductsAssets.  # noqa: E501
        :type: int
        """

        self._asset_id = asset_id

    @property
    def serial_number(self):
        """Gets the serial_number of this DeliveryProductsAssets.  # noqa: E501

        serial number of the object  # noqa: E501

        :return: The serial_number of this DeliveryProductsAssets.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeliveryProductsAssets.

        serial number of the object  # noqa: E501

        :param serial_number: The serial_number of this DeliveryProductsAssets.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def href(self):
        """Gets the href of this DeliveryProductsAssets.  # noqa: E501

        Link to get collection of related objects  # noqa: E501

        :return: The href of this DeliveryProductsAssets.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this DeliveryProductsAssets.

        Link to get collection of related objects  # noqa: E501

        :param href: The href of this DeliveryProductsAssets.  # noqa: E501
        :type: str
        """

        self._href = href

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeliveryProductsAssets, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeliveryProductsAssets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
