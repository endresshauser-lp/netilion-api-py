# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SoftwareResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'version_number': 'str',
        'name': 'str',
        'description': 'str',
        'tenant': 'NestedIDHref',
        'software_type': 'SoftwareResponseSoftwareType',
        'links': 'Links20'
    }

    attribute_map = {
        'id': 'id',
        'version_number': 'version_number',
        'name': 'name',
        'description': 'description',
        'tenant': 'tenant',
        'software_type': 'software_type',
        'links': 'links'
    }

    def __init__(self, id=None, version_number=None, name=None, description=None, tenant=None, software_type=None, links=None):  # noqa: E501
        """SoftwareResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._version_number = None
        self._name = None
        self._description = None
        self._tenant = None
        self._software_type = None
        self._links = None
        self.discriminator = None
        self.id = id
        self.version_number = version_number
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        self.tenant = tenant
        self.software_type = software_type
        self.links = links

    @property
    def id(self):
        """Gets the id of this SoftwareResponse.  # noqa: E501

        Id of object  # noqa: E501

        :return: The id of this SoftwareResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SoftwareResponse.

        Id of object  # noqa: E501

        :param id: The id of this SoftwareResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def version_number(self):
        """Gets the version_number of this SoftwareResponse.  # noqa: E501


        :return: The version_number of this SoftwareResponse.  # noqa: E501
        :rtype: str
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this SoftwareResponse.


        :param version_number: The version_number of this SoftwareResponse.  # noqa: E501
        :type: str
        """
        if version_number is None:
            raise ValueError("Invalid value for `version_number`, must not be `None`")  # noqa: E501

        self._version_number = version_number

    @property
    def name(self):
        """Gets the name of this SoftwareResponse.  # noqa: E501


        :return: The name of this SoftwareResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SoftwareResponse.


        :param name: The name of this SoftwareResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this SoftwareResponse.  # noqa: E501


        :return: The description of this SoftwareResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SoftwareResponse.


        :param description: The description of this SoftwareResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tenant(self):
        """Gets the tenant of this SoftwareResponse.  # noqa: E501


        :return: The tenant of this SoftwareResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this SoftwareResponse.


        :param tenant: The tenant of this SoftwareResponse.  # noqa: E501
        :type: NestedIDHref
        """
        if tenant is None:
            raise ValueError("Invalid value for `tenant`, must not be `None`")  # noqa: E501

        self._tenant = tenant

    @property
    def software_type(self):
        """Gets the software_type of this SoftwareResponse.  # noqa: E501


        :return: The software_type of this SoftwareResponse.  # noqa: E501
        :rtype: SoftwareResponseSoftwareType
        """
        return self._software_type

    @software_type.setter
    def software_type(self, software_type):
        """Sets the software_type of this SoftwareResponse.


        :param software_type: The software_type of this SoftwareResponse.  # noqa: E501
        :type: SoftwareResponseSoftwareType
        """
        if software_type is None:
            raise ValueError("Invalid value for `software_type`, must not be `None`")  # noqa: E501

        self._software_type = software_type

    @property
    def links(self):
        """Gets the links of this SoftwareResponse.  # noqa: E501


        :return: The links of this SoftwareResponse.  # noqa: E501
        :rtype: Links20
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SoftwareResponse.


        :param links: The links of this SoftwareResponse.  # noqa: E501
        :type: Links20
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SoftwareResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftwareResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
