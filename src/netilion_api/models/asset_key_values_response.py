# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetKeyValuesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'unit': 'NestedID',
        'group': 'str',
        'latest': 'str',
        'max': 'str',
        'min': 'str',
        'mean': 'str',
        'data': 'list[AssetKeyValuesData]',
        'pagination': 'AssetValuesPagination'
    }

    attribute_map = {
        'key': 'key',
        'unit': 'unit',
        'group': 'group',
        'latest': 'latest',
        'max': 'max',
        'min': 'min',
        'mean': 'mean',
        'data': 'data',
        'pagination': 'pagination'
    }

    def __init__(self, key=None, unit=None, group=None, latest=None, max=None, min=None, mean=None, data=None, pagination=None):  # noqa: E501
        """AssetKeyValuesResponse - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._unit = None
        self._group = None
        self._latest = None
        self._max = None
        self._min = None
        self._mean = None
        self._data = None
        self._pagination = None
        self.discriminator = None
        self.key = key
        if unit is not None:
            self.unit = unit
        if group is not None:
            self.group = group
        if latest is not None:
            self.latest = latest
        if max is not None:
            self.max = max
        if min is not None:
            self.min = min
        if mean is not None:
            self.mean = mean
        if data is not None:
            self.data = data
        self.pagination = pagination

    @property
    def key(self):
        """Gets the key of this AssetKeyValuesResponse.  # noqa: E501

        key of the asset values  # noqa: E501

        :return: The key of this AssetKeyValuesResponse.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this AssetKeyValuesResponse.

        key of the asset values  # noqa: E501

        :param key: The key of this AssetKeyValuesResponse.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def unit(self):
        """Gets the unit of this AssetKeyValuesResponse.  # noqa: E501


        :return: The unit of this AssetKeyValuesResponse.  # noqa: E501
        :rtype: NestedID
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this AssetKeyValuesResponse.


        :param unit: The unit of this AssetKeyValuesResponse.  # noqa: E501
        :type: NestedID
        """

        self._unit = unit

    @property
    def group(self):
        """Gets the group of this AssetKeyValuesResponse.  # noqa: E501

        group of the asset value. No wildcard-filter supported.  # noqa: E501

        :return: The group of this AssetKeyValuesResponse.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this AssetKeyValuesResponse.

        group of the asset value. No wildcard-filter supported.  # noqa: E501

        :param group: The group of this AssetKeyValuesResponse.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def latest(self):
        """Gets the latest of this AssetKeyValuesResponse.  # noqa: E501

        the last written asset value  # noqa: E501

        :return: The latest of this AssetKeyValuesResponse.  # noqa: E501
        :rtype: str
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this AssetKeyValuesResponse.

        the last written asset value  # noqa: E501

        :param latest: The latest of this AssetKeyValuesResponse.  # noqa: E501
        :type: str
        """

        self._latest = latest

    @property
    def max(self):
        """Gets the max of this AssetKeyValuesResponse.  # noqa: E501

        the maximum value for the requested time slot  # noqa: E501

        :return: The max of this AssetKeyValuesResponse.  # noqa: E501
        :rtype: str
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this AssetKeyValuesResponse.

        the maximum value for the requested time slot  # noqa: E501

        :param max: The max of this AssetKeyValuesResponse.  # noqa: E501
        :type: str
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this AssetKeyValuesResponse.  # noqa: E501

        the minimum value for the requested time slot  # noqa: E501

        :return: The min of this AssetKeyValuesResponse.  # noqa: E501
        :rtype: str
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this AssetKeyValuesResponse.

        the minimum value for the requested time slot  # noqa: E501

        :param min: The min of this AssetKeyValuesResponse.  # noqa: E501
        :type: str
        """

        self._min = min

    @property
    def mean(self):
        """Gets the mean of this AssetKeyValuesResponse.  # noqa: E501

        the mean (average) value for the requested time slot  # noqa: E501

        :return: The mean of this AssetKeyValuesResponse.  # noqa: E501
        :rtype: str
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this AssetKeyValuesResponse.

        the mean (average) value for the requested time slot  # noqa: E501

        :param mean: The mean of this AssetKeyValuesResponse.  # noqa: E501
        :type: str
        """

        self._mean = mean

    @property
    def data(self):
        """Gets the data of this AssetKeyValuesResponse.  # noqa: E501


        :return: The data of this AssetKeyValuesResponse.  # noqa: E501
        :rtype: list[AssetKeyValuesData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AssetKeyValuesResponse.


        :param data: The data of this AssetKeyValuesResponse.  # noqa: E501
        :type: list[AssetKeyValuesData]
        """

        self._data = data

    @property
    def pagination(self):
        """Gets the pagination of this AssetKeyValuesResponse.  # noqa: E501


        :return: The pagination of this AssetKeyValuesResponse.  # noqa: E501
        :rtype: AssetValuesPagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this AssetKeyValuesResponse.


        :param pagination: The pagination of this AssetKeyValuesResponse.  # noqa: E501
        :type: AssetValuesPagination
        """
        if pagination is None:
            raise ValueError("Invalid value for `pagination`, must not be `None`")  # noqa: E501

        self._pagination = pagination

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetKeyValuesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetKeyValuesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
