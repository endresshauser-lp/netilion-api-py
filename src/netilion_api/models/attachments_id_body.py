# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttachmentsIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file': 'str',
        'document_id': 'int',
        'content_author': 'str',
        'content_date': 'str',
        'remarks': 'str',
        'languages': 'str'
    }

    attribute_map = {
        'file': 'file',
        'document_id': 'document_id',
        'content_author': 'content_author',
        'content_date': 'content_date',
        'remarks': 'remarks',
        'languages': 'languages'
    }

    def __init__(self, file=None, document_id=None, content_author=None, content_date=None, remarks=None, languages=None):  # noqa: E501
        """AttachmentsIdBody - a model defined in Swagger"""  # noqa: E501
        self._file = None
        self._document_id = None
        self._content_author = None
        self._content_date = None
        self._remarks = None
        self._languages = None
        self.discriminator = None
        if file is not None:
            self.file = file
        if document_id is not None:
            self.document_id = document_id
        if content_author is not None:
            self.content_author = content_author
        if content_date is not None:
            self.content_date = content_date
        if remarks is not None:
            self.remarks = remarks
        if languages is not None:
            self.languages = languages

    @property
    def file(self):
        """Gets the file of this AttachmentsIdBody.  # noqa: E501

        the filedata to upload  # noqa: E501

        :return: The file of this AttachmentsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this AttachmentsIdBody.

        the filedata to upload  # noqa: E501

        :param file: The file of this AttachmentsIdBody.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def document_id(self):
        """Gets the document_id of this AttachmentsIdBody.  # noqa: E501

        the document this attachment belongs to  # noqa: E501

        :return: The document_id of this AttachmentsIdBody.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AttachmentsIdBody.

        the document this attachment belongs to  # noqa: E501

        :param document_id: The document_id of this AttachmentsIdBody.  # noqa: E501
        :type: int
        """

        self._document_id = document_id

    @property
    def content_author(self):
        """Gets the content_author of this AttachmentsIdBody.  # noqa: E501

        the file authors name  # noqa: E501

        :return: The content_author of this AttachmentsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._content_author

    @content_author.setter
    def content_author(self, content_author):
        """Sets the content_author of this AttachmentsIdBody.

        the file authors name  # noqa: E501

        :param content_author: The content_author of this AttachmentsIdBody.  # noqa: E501
        :type: str
        """

        self._content_author = content_author

    @property
    def content_date(self):
        """Gets the content_date of this AttachmentsIdBody.  # noqa: E501

        last edit date of the file. Datetime must be in format YYYY-MM-DD or YYYY-MM-DDThh:mm:ss  # noqa: E501

        :return: The content_date of this AttachmentsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._content_date

    @content_date.setter
    def content_date(self, content_date):
        """Sets the content_date of this AttachmentsIdBody.

        last edit date of the file. Datetime must be in format YYYY-MM-DD or YYYY-MM-DDThh:mm:ss  # noqa: E501

        :param content_date: The content_date of this AttachmentsIdBody.  # noqa: E501
        :type: str
        """

        self._content_date = content_date

    @property
    def remarks(self):
        """Gets the remarks of this AttachmentsIdBody.  # noqa: E501

        remarks on the attachment  # noqa: E501

        :return: The remarks of this AttachmentsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this AttachmentsIdBody.

        remarks on the attachment  # noqa: E501

        :param remarks: The remarks of this AttachmentsIdBody.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def languages(self):
        """Gets the languages of this AttachmentsIdBody.  # noqa: E501

        the files content languages. Send as comma separated list with alpha2 language codes (eg. de,en,fr). Supported languages are defined in ISO639-1  # noqa: E501

        :return: The languages of this AttachmentsIdBody.  # noqa: E501
        :rtype: str
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this AttachmentsIdBody.

        the files content languages. Send as comma separated list with alpha2 language codes (eg. de,en,fr). Supported languages are defined in ISO639-1  # noqa: E501

        :param languages: The languages of this AttachmentsIdBody.  # noqa: E501
        :type: str
        """

        self._languages = languages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentsIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentsIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
