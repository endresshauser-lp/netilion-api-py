# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_code': 'str',
        'name': 'str',
        'description': 'str',
        'phase_out_date': 'date',
        'order_stop_date': 'date',
        'spare_parts_until': 'date',
        'spare_sensors_until': 'date',
        'repair_until': 'date',
        'calibration_until': 'date'
    }

    attribute_map = {
        'product_code': 'product_code',
        'name': 'name',
        'description': 'description',
        'phase_out_date': 'phase_out_date',
        'order_stop_date': 'order_stop_date',
        'spare_parts_until': 'spare_parts_until',
        'spare_sensors_until': 'spare_sensors_until',
        'repair_until': 'repair_until',
        'calibration_until': 'calibration_until'
    }

    discriminator_value_class_map = {
          'ProductResponse': 'ProductResponse',
'ProductRequest': 'ProductRequest'    }

    def __init__(self, product_code=None, name=None, description=None, phase_out_date=None, order_stop_date=None, spare_parts_until=None, spare_sensors_until=None, repair_until=None, calibration_until=None):  # noqa: E501
        """ProductBase - a model defined in Swagger"""  # noqa: E501
        self._product_code = None
        self._name = None
        self._description = None
        self._phase_out_date = None
        self._order_stop_date = None
        self._spare_parts_until = None
        self._spare_sensors_until = None
        self._repair_until = None
        self._calibration_until = None
        self.discriminator = 'productBaseType'
        if product_code is not None:
            self.product_code = product_code
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if phase_out_date is not None:
            self.phase_out_date = phase_out_date
        if order_stop_date is not None:
            self.order_stop_date = order_stop_date
        if spare_parts_until is not None:
            self.spare_parts_until = spare_parts_until
        if spare_sensors_until is not None:
            self.spare_sensors_until = spare_sensors_until
        if repair_until is not None:
            self.repair_until = repair_until
        if calibration_until is not None:
            self.calibration_until = calibration_until

    @property
    def product_code(self):
        """Gets the product_code of this ProductBase.  # noqa: E501

        Product code must be unique within the manufacturers scope. Whitespaces are trimmed.  # noqa: E501

        :return: The product_code of this ProductBase.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this ProductBase.

        Product code must be unique within the manufacturers scope. Whitespaces are trimmed.  # noqa: E501

        :param product_code: The product_code of this ProductBase.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def name(self):
        """Gets the name of this ProductBase.  # noqa: E501

        Supports translations. Whitespaces are trimmed.  # noqa: E501

        :return: The name of this ProductBase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductBase.

        Supports translations. Whitespaces are trimmed.  # noqa: E501

        :param name: The name of this ProductBase.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProductBase.  # noqa: E501

        Supports translations.  # noqa: E501

        :return: The description of this ProductBase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductBase.

        Supports translations.  # noqa: E501

        :param description: The description of this ProductBase.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def phase_out_date(self):
        """Gets the phase_out_date of this ProductBase.  # noqa: E501

        Date of product phase out  # noqa: E501

        :return: The phase_out_date of this ProductBase.  # noqa: E501
        :rtype: date
        """
        return self._phase_out_date

    @phase_out_date.setter
    def phase_out_date(self, phase_out_date):
        """Sets the phase_out_date of this ProductBase.

        Date of product phase out  # noqa: E501

        :param phase_out_date: The phase_out_date of this ProductBase.  # noqa: E501
        :type: date
        """

        self._phase_out_date = phase_out_date

    @property
    def order_stop_date(self):
        """Gets the order_stop_date of this ProductBase.  # noqa: E501

        Date of order stop  # noqa: E501

        :return: The order_stop_date of this ProductBase.  # noqa: E501
        :rtype: date
        """
        return self._order_stop_date

    @order_stop_date.setter
    def order_stop_date(self, order_stop_date):
        """Sets the order_stop_date of this ProductBase.

        Date of order stop  # noqa: E501

        :param order_stop_date: The order_stop_date of this ProductBase.  # noqa: E501
        :type: date
        """

        self._order_stop_date = order_stop_date

    @property
    def spare_parts_until(self):
        """Gets the spare_parts_until of this ProductBase.  # noqa: E501

        Date until spare parts are available  # noqa: E501

        :return: The spare_parts_until of this ProductBase.  # noqa: E501
        :rtype: date
        """
        return self._spare_parts_until

    @spare_parts_until.setter
    def spare_parts_until(self, spare_parts_until):
        """Sets the spare_parts_until of this ProductBase.

        Date until spare parts are available  # noqa: E501

        :param spare_parts_until: The spare_parts_until of this ProductBase.  # noqa: E501
        :type: date
        """

        self._spare_parts_until = spare_parts_until

    @property
    def spare_sensors_until(self):
        """Gets the spare_sensors_until of this ProductBase.  # noqa: E501

        Date until spare sensors are available  # noqa: E501

        :return: The spare_sensors_until of this ProductBase.  # noqa: E501
        :rtype: date
        """
        return self._spare_sensors_until

    @spare_sensors_until.setter
    def spare_sensors_until(self, spare_sensors_until):
        """Sets the spare_sensors_until of this ProductBase.

        Date until spare sensors are available  # noqa: E501

        :param spare_sensors_until: The spare_sensors_until of this ProductBase.  # noqa: E501
        :type: date
        """

        self._spare_sensors_until = spare_sensors_until

    @property
    def repair_until(self):
        """Gets the repair_until of this ProductBase.  # noqa: E501

        Date until repair of product is offered  # noqa: E501

        :return: The repair_until of this ProductBase.  # noqa: E501
        :rtype: date
        """
        return self._repair_until

    @repair_until.setter
    def repair_until(self, repair_until):
        """Sets the repair_until of this ProductBase.

        Date until repair of product is offered  # noqa: E501

        :param repair_until: The repair_until of this ProductBase.  # noqa: E501
        :type: date
        """

        self._repair_until = repair_until

    @property
    def calibration_until(self):
        """Gets the calibration_until of this ProductBase.  # noqa: E501

        Date until calibration of product is offered  # noqa: E501

        :return: The calibration_until of this ProductBase.  # noqa: E501
        :rtype: date
        """
        return self._calibration_until

    @calibration_until.setter
    def calibration_until(self, calibration_until):
        """Sets the calibration_until of this ProductBase.

        Date until calibration of product is offered  # noqa: E501

        :param calibration_until: The calibration_until of this ProductBase.  # noqa: E501
        :type: date
        """

        self._calibration_until = calibration_until

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
