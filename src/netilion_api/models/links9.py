# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Links9(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'specifications': 'Link',
        'network_interfaces': 'Link',
        'field_gateways': 'Link',
        'features': 'Link',
        'applications': 'Link'
    }

    attribute_map = {
        'specifications': 'specifications',
        'network_interfaces': 'network_interfaces',
        'field_gateways': 'field_gateways',
        'features': 'features',
        'applications': 'applications'
    }

    def __init__(self, specifications=None, network_interfaces=None, field_gateways=None, features=None, applications=None):  # noqa: E501
        """Links9 - a model defined in Swagger"""  # noqa: E501
        self._specifications = None
        self._network_interfaces = None
        self._field_gateways = None
        self._features = None
        self._applications = None
        self.discriminator = None
        if specifications is not None:
            self.specifications = specifications
        if network_interfaces is not None:
            self.network_interfaces = network_interfaces
        if field_gateways is not None:
            self.field_gateways = field_gateways
        if features is not None:
            self.features = features
        if applications is not None:
            self.applications = applications

    @property
    def specifications(self):
        """Gets the specifications of this Links9.  # noqa: E501


        :return: The specifications of this Links9.  # noqa: E501
        :rtype: Link
        """
        return self._specifications

    @specifications.setter
    def specifications(self, specifications):
        """Sets the specifications of this Links9.


        :param specifications: The specifications of this Links9.  # noqa: E501
        :type: Link
        """

        self._specifications = specifications

    @property
    def network_interfaces(self):
        """Gets the network_interfaces of this Links9.  # noqa: E501


        :return: The network_interfaces of this Links9.  # noqa: E501
        :rtype: Link
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """Sets the network_interfaces of this Links9.


        :param network_interfaces: The network_interfaces of this Links9.  # noqa: E501
        :type: Link
        """

        self._network_interfaces = network_interfaces

    @property
    def field_gateways(self):
        """Gets the field_gateways of this Links9.  # noqa: E501


        :return: The field_gateways of this Links9.  # noqa: E501
        :rtype: Link
        """
        return self._field_gateways

    @field_gateways.setter
    def field_gateways(self, field_gateways):
        """Sets the field_gateways of this Links9.


        :param field_gateways: The field_gateways of this Links9.  # noqa: E501
        :type: Link
        """

        self._field_gateways = field_gateways

    @property
    def features(self):
        """Gets the features of this Links9.  # noqa: E501


        :return: The features of this Links9.  # noqa: E501
        :rtype: Link
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Links9.


        :param features: The features of this Links9.  # noqa: E501
        :type: Link
        """

        self._features = features

    @property
    def applications(self):
        """Gets the applications of this Links9.  # noqa: E501


        :return: The applications of this Links9.  # noqa: E501
        :rtype: Link
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this Links9.


        :param applications: The applications of this Links9.  # noqa: E501
        :type: Link
        """

        self._applications = applications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Links9, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Links9):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
