# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from netilion_api.configuration import Configuration


class DocumentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'classification': 'NestedIDHref',
        'status': 'NestedIDHref',
        'tenant': 'NestedIDHref',
        'download_href': 'str',
        'links': 'Links6'
    }

    attribute_map = {
        'id': 'id',
        'classification': 'classification',
        'status': 'status',
        'tenant': 'tenant',
        'download_href': 'download_href',
        'links': 'links'
    }

    def __init__(self, id=None, classification=None, status=None, tenant=None, download_href=None, links=None, _configuration=None):  # noqa: E501
        """DocumentResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._classification = None
        self._status = None
        self._tenant = None
        self._download_href = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if classification is not None:
            self.classification = classification
        if status is not None:
            self.status = status
        if tenant is not None:
            self.tenant = tenant
        if download_href is not None:
            self.download_href = download_href
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this DocumentResponse.  # noqa: E501

        Id of object  # noqa: E501

        :return: The id of this DocumentResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentResponse.

        Id of object  # noqa: E501

        :param id: The id of this DocumentResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def classification(self):
        """Gets the classification of this DocumentResponse.  # noqa: E501


        :return: The classification of this DocumentResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this DocumentResponse.


        :param classification: The classification of this DocumentResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._classification = classification

    @property
    def status(self):
        """Gets the status of this DocumentResponse.  # noqa: E501


        :return: The status of this DocumentResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DocumentResponse.


        :param status: The status of this DocumentResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._status = status

    @property
    def tenant(self):
        """Gets the tenant of this DocumentResponse.  # noqa: E501


        :return: The tenant of this DocumentResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this DocumentResponse.


        :param tenant: The tenant of this DocumentResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._tenant = tenant

    @property
    def download_href(self):
        """Gets the download_href of this DocumentResponse.  # noqa: E501

        the download link  # noqa: E501

        :return: The download_href of this DocumentResponse.  # noqa: E501
        :rtype: str
        """
        return self._download_href

    @download_href.setter
    def download_href(self, download_href):
        """Sets the download_href of this DocumentResponse.

        the download link  # noqa: E501

        :param download_href: The download_href of this DocumentResponse.  # noqa: E501
        :type: str
        """

        self._download_href = download_href

    @property
    def links(self):
        """Gets the links of this DocumentResponse.  # noqa: E501


        :return: The links of this DocumentResponse.  # noqa: E501
        :rtype: Links6
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DocumentResponse.


        :param links: The links of this DocumentResponse.  # noqa: E501
        :type: Links6
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocumentResponse):
            return True

        return self.to_dict() != other.to_dict()
