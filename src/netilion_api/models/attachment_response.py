# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AttachmentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'str',
        'file_name': 'str',
        'fingerprint': 'str',
        'content_author': 'str',
        'content_version': 'str',
        'content_date': 'str',
        'content_type': 'str',
        'remarks': 'str',
        'document': 'NestedIDHref',
        'languages': 'list[str]',
        'download_href': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'file_name': 'file_name',
        'fingerprint': 'fingerprint',
        'content_author': 'content_author',
        'content_version': 'content_version',
        'content_date': 'content_date',
        'content_type': 'content_type',
        'remarks': 'remarks',
        'document': 'document',
        'languages': 'languages',
        'download_href': 'download_href',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, type=None, file_name=None, fingerprint=None, content_author=None, content_version=None, content_date=None, content_type=None, remarks=None, document=None, languages=None, download_href=None, created_at=None, updated_at=None):  # noqa: E501
        """AttachmentResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._file_name = None
        self._fingerprint = None
        self._content_author = None
        self._content_version = None
        self._content_date = None
        self._content_type = None
        self._remarks = None
        self._document = None
        self._languages = None
        self._download_href = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.id = id
        self.type = type
        if file_name is not None:
            self.file_name = file_name
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if content_author is not None:
            self.content_author = content_author
        if content_version is not None:
            self.content_version = content_version
        if content_date is not None:
            self.content_date = content_date
        if content_type is not None:
            self.content_type = content_type
        if remarks is not None:
            self.remarks = remarks
        self.document = document
        if languages is not None:
            self.languages = languages
        self.download_href = download_href
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this AttachmentResponse.  # noqa: E501

        Id of object  # noqa: E501

        :return: The id of this AttachmentResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttachmentResponse.

        Id of object  # noqa: E501

        :param id: The id of this AttachmentResponse.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this AttachmentResponse.  # noqa: E501

        type of attachment, can be 'file' or 'link'  # noqa: E501

        :return: The type of this AttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AttachmentResponse.

        type of attachment, can be 'file' or 'link'  # noqa: E501

        :param type: The type of this AttachmentResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def file_name(self):
        """Gets the file_name of this AttachmentResponse.  # noqa: E501

        the original filename of the attachment  # noqa: E501

        :return: The file_name of this AttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this AttachmentResponse.

        the original filename of the attachment  # noqa: E501

        :param file_name: The file_name of this AttachmentResponse.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def fingerprint(self):
        """Gets the fingerprint of this AttachmentResponse.  # noqa: E501

        SHA256 checksum of the file  # noqa: E501

        :return: The fingerprint of this AttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this AttachmentResponse.

        SHA256 checksum of the file  # noqa: E501

        :param fingerprint: The fingerprint of this AttachmentResponse.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def content_author(self):
        """Gets the content_author of this AttachmentResponse.  # noqa: E501

        the file authors name  # noqa: E501

        :return: The content_author of this AttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._content_author

    @content_author.setter
    def content_author(self, content_author):
        """Sets the content_author of this AttachmentResponse.

        the file authors name  # noqa: E501

        :param content_author: The content_author of this AttachmentResponse.  # noqa: E501
        :type: str
        """

        self._content_author = content_author

    @property
    def content_version(self):
        """Gets the content_version of this AttachmentResponse.  # noqa: E501

        the version of the attachment  # noqa: E501

        :return: The content_version of this AttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._content_version

    @content_version.setter
    def content_version(self, content_version):
        """Sets the content_version of this AttachmentResponse.

        the version of the attachment  # noqa: E501

        :param content_version: The content_version of this AttachmentResponse.  # noqa: E501
        :type: str
        """

        self._content_version = content_version

    @property
    def content_date(self):
        """Gets the content_date of this AttachmentResponse.  # noqa: E501

        date of the content  # noqa: E501

        :return: The content_date of this AttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._content_date

    @content_date.setter
    def content_date(self, content_date):
        """Sets the content_date of this AttachmentResponse.

        date of the content  # noqa: E501

        :param content_date: The content_date of this AttachmentResponse.  # noqa: E501
        :type: str
        """

        self._content_date = content_date

    @property
    def content_type(self):
        """Gets the content_type of this AttachmentResponse.  # noqa: E501

        content type of the file  # noqa: E501

        :return: The content_type of this AttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AttachmentResponse.

        content type of the file  # noqa: E501

        :param content_type: The content_type of this AttachmentResponse.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def remarks(self):
        """Gets the remarks of this AttachmentResponse.  # noqa: E501

        remarks of the attachment  # noqa: E501

        :return: The remarks of this AttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this AttachmentResponse.

        remarks of the attachment  # noqa: E501

        :param remarks: The remarks of this AttachmentResponse.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def document(self):
        """Gets the document of this AttachmentResponse.  # noqa: E501


        :return: The document of this AttachmentResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this AttachmentResponse.


        :param document: The document of this AttachmentResponse.  # noqa: E501
        :type: NestedIDHref
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")  # noqa: E501

        self._document = document

    @property
    def languages(self):
        """Gets the languages of this AttachmentResponse.  # noqa: E501

        the languages of the files content  # noqa: E501

        :return: The languages of this AttachmentResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this AttachmentResponse.

        the languages of the files content  # noqa: E501

        :param languages: The languages of this AttachmentResponse.  # noqa: E501
        :type: list[str]
        """

        self._languages = languages

    @property
    def download_href(self):
        """Gets the download_href of this AttachmentResponse.  # noqa: E501

        the download link to the file of the attachment  # noqa: E501

        :return: The download_href of this AttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._download_href

    @download_href.setter
    def download_href(self, download_href):
        """Sets the download_href of this AttachmentResponse.

        the download link to the file of the attachment  # noqa: E501

        :param download_href: The download_href of this AttachmentResponse.  # noqa: E501
        :type: str
        """
        if download_href is None:
            raise ValueError("Invalid value for `download_href`, must not be `None`")  # noqa: E501

        self._download_href = download_href

    @property
    def created_at(self):
        """Gets the created_at of this AttachmentResponse.  # noqa: E501

        Timestamp at which the attachment was created  # noqa: E501

        :return: The created_at of this AttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AttachmentResponse.

        Timestamp at which the attachment was created  # noqa: E501

        :param created_at: The created_at of this AttachmentResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AttachmentResponse.  # noqa: E501

        Timestamp at which the attachment was last changed  # noqa: E501

        :return: The updated_at of this AttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AttachmentResponse.

        Timestamp at which the attachment was last changed  # noqa: E501

        :param updated_at: The updated_at of this AttachmentResponse.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
