# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from netilion_api.models.health_condition_base import HealthConditionBase  # noqa: F401,E501

class HealthConditionExtended(HealthConditionBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'str',
        'protocol_version': 'str',
        'device_ident': 'str',
        'product_identifier': 'str',
        'hidden': 'bool',
        'rules': 'list[HealthConditionExtendedRules]'
    }
    if hasattr(HealthConditionBase, "swagger_types"):
        swagger_types.update(HealthConditionBase.swagger_types)

    attribute_map = {
        'protocol': 'protocol',
        'protocol_version': 'protocol_version',
        'device_ident': 'device_ident',
        'product_identifier': 'product_identifier',
        'hidden': 'hidden',
        'rules': 'rules'
    }
    if hasattr(HealthConditionBase, "attribute_map"):
        attribute_map.update(HealthConditionBase.attribute_map)

    def __init__(self, protocol=None, protocol_version=None, device_ident=None, product_identifier=None, hidden=False, rules=None, *args, **kwargs):  # noqa: E501
        """HealthConditionExtended - a model defined in Swagger"""  # noqa: E501
        self._protocol = None
        self._protocol_version = None
        self._device_ident = None
        self._product_identifier = None
        self._hidden = None
        self._rules = None
        self.discriminator = None
        if protocol is not None:
            self.protocol = protocol
        if protocol_version is not None:
            self.protocol_version = protocol_version
        if device_ident is not None:
            self.device_ident = device_ident
        if product_identifier is not None:
            self.product_identifier = product_identifier
        if hidden is not None:
            self.hidden = hidden
        if rules is not None:
            self.rules = rules
        HealthConditionBase.__init__(self, *args, **kwargs)

    @property
    def protocol(self):
        """Gets the protocol of this HealthConditionExtended.  # noqa: E501

        Possible values are: 'PROFIBUS', 'HART' and 'MODBUS'.  # noqa: E501

        :return: The protocol of this HealthConditionExtended.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this HealthConditionExtended.

        Possible values are: 'PROFIBUS', 'HART' and 'MODBUS'.  # noqa: E501

        :param protocol: The protocol of this HealthConditionExtended.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def protocol_version(self):
        """Gets the protocol_version of this HealthConditionExtended.  # noqa: E501

        version number of the protocol  # noqa: E501

        :return: The protocol_version of this HealthConditionExtended.  # noqa: E501
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this HealthConditionExtended.

        version number of the protocol  # noqa: E501

        :param protocol_version: The protocol_version of this HealthConditionExtended.  # noqa: E501
        :type: str
        """

        self._protocol_version = protocol_version

    @property
    def device_ident(self):
        """Gets the device_ident of this HealthConditionExtended.  # noqa: E501

        protocol specific device_ident  # noqa: E501

        :return: The device_ident of this HealthConditionExtended.  # noqa: E501
        :rtype: str
        """
        return self._device_ident

    @device_ident.setter
    def device_ident(self, device_ident):
        """Sets the device_ident of this HealthConditionExtended.

        protocol specific device_ident  # noqa: E501

        :param device_ident: The device_ident of this HealthConditionExtended.  # noqa: E501
        :type: str
        """

        self._device_ident = device_ident

    @property
    def product_identifier(self):
        """Gets the product_identifier of this HealthConditionExtended.  # noqa: E501

        protocol specific product_identifier  # noqa: E501

        :return: The product_identifier of this HealthConditionExtended.  # noqa: E501
        :rtype: str
        """
        return self._product_identifier

    @product_identifier.setter
    def product_identifier(self, product_identifier):
        """Sets the product_identifier of this HealthConditionExtended.

        protocol specific product_identifier  # noqa: E501

        :param product_identifier: The product_identifier of this HealthConditionExtended.  # noqa: E501
        :type: str
        """

        self._product_identifier = product_identifier

    @property
    def hidden(self):
        """Gets the hidden of this HealthConditionExtended.  # noqa: E501

        should be hidden in frontend  # noqa: E501

        :return: The hidden of this HealthConditionExtended.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this HealthConditionExtended.

        should be hidden in frontend  # noqa: E501

        :param hidden: The hidden of this HealthConditionExtended.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def rules(self):
        """Gets the rules of this HealthConditionExtended.  # noqa: E501

        Health condition rules.  # noqa: E501

        :return: The rules of this HealthConditionExtended.  # noqa: E501
        :rtype: list[HealthConditionExtendedRules]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this HealthConditionExtended.

        Health condition rules.  # noqa: E501

        :param rules: The rules of this HealthConditionExtended.  # noqa: E501
        :type: list[HealthConditionExtendedRules]
        """

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthConditionExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthConditionExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
