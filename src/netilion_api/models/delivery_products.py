# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeliveryProducts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'int',
        'product_code': 'str',
        'quantity': 'int',
        'href': 'str',
        'assets': 'list[DeliveryProductsAssets]'
    }

    attribute_map = {
        'product_id': 'product_id',
        'product_code': 'product_code',
        'quantity': 'quantity',
        'href': 'href',
        'assets': 'assets'
    }

    def __init__(self, product_id=None, product_code=None, quantity=None, href=None, assets=None):  # noqa: E501
        """DeliveryProducts - a model defined in Swagger"""  # noqa: E501
        self._product_id = None
        self._product_code = None
        self._quantity = None
        self._href = None
        self._assets = None
        self.discriminator = None
        self.product_id = product_id
        self.product_code = product_code
        self.quantity = quantity
        self.href = href
        if assets is not None:
            self.assets = assets

    @property
    def product_id(self):
        """Gets the product_id of this DeliveryProducts.  # noqa: E501

        Id of the object  # noqa: E501

        :return: The product_id of this DeliveryProducts.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this DeliveryProducts.

        Id of the object  # noqa: E501

        :param product_id: The product_id of this DeliveryProducts.  # noqa: E501
        :type: int
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def product_code(self):
        """Gets the product_code of this DeliveryProducts.  # noqa: E501

        product code  # noqa: E501

        :return: The product_code of this DeliveryProducts.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this DeliveryProducts.

        product code  # noqa: E501

        :param product_code: The product_code of this DeliveryProducts.  # noqa: E501
        :type: str
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")  # noqa: E501

        self._product_code = product_code

    @property
    def quantity(self):
        """Gets the quantity of this DeliveryProducts.  # noqa: E501

        quantity of the product with this delivery  # noqa: E501

        :return: The quantity of this DeliveryProducts.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this DeliveryProducts.

        quantity of the product with this delivery  # noqa: E501

        :param quantity: The quantity of this DeliveryProducts.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def href(self):
        """Gets the href of this DeliveryProducts.  # noqa: E501

        Link to get collection of related objects  # noqa: E501

        :return: The href of this DeliveryProducts.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this DeliveryProducts.

        Link to get collection of related objects  # noqa: E501

        :param href: The href of this DeliveryProducts.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def assets(self):
        """Gets the assets of this DeliveryProducts.  # noqa: E501


        :return: The assets of this DeliveryProducts.  # noqa: E501
        :rtype: list[DeliveryProductsAssets]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this DeliveryProducts.


        :param assets: The assets of this DeliveryProducts.  # noqa: E501
        :type: list[DeliveryProductsAssets]
        """

        self._assets = assets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeliveryProducts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeliveryProducts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
