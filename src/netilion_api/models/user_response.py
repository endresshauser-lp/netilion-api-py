# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from netilion_api.models.user_base import UserBase  # noqa: F401,E501

class UserResponse(UserBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'confirmed_at': 'str',
        'confirmation_sent_at': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'disabled': 'bool',
        'address': 'UserAddressResponse',
        'links': 'UserResponseLinks'
    }
    if hasattr(UserBase, "swagger_types"):
        swagger_types.update(UserBase.swagger_types)

    attribute_map = {
        'id': 'id',
        'confirmed_at': 'confirmed_at',
        'confirmation_sent_at': 'confirmation_sent_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'disabled': 'disabled',
        'address': 'address',
        'links': 'links'
    }
    if hasattr(UserBase, "attribute_map"):
        attribute_map.update(UserBase.attribute_map)

    def __init__(self, id=None, confirmed_at=None, confirmation_sent_at=None, created_at=None, updated_at=None, disabled=None, address=None, links=None, *args, **kwargs):  # noqa: E501
        """UserResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._confirmed_at = None
        self._confirmation_sent_at = None
        self._created_at = None
        self._updated_at = None
        self._disabled = None
        self._address = None
        self._links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if confirmed_at is not None:
            self.confirmed_at = confirmed_at
        if confirmation_sent_at is not None:
            self.confirmation_sent_at = confirmation_sent_at
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if disabled is not None:
            self.disabled = disabled
        if address is not None:
            self.address = address
        if links is not None:
            self.links = links
        UserBase.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this UserResponse.  # noqa: E501

        Id of object  # noqa: E501

        :return: The id of this UserResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserResponse.

        Id of object  # noqa: E501

        :param id: The id of this UserResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def confirmed_at(self):
        """Gets the confirmed_at of this UserResponse.  # noqa: E501

        Timestamp at which the user was confirmed  # noqa: E501

        :return: The confirmed_at of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._confirmed_at

    @confirmed_at.setter
    def confirmed_at(self, confirmed_at):
        """Sets the confirmed_at of this UserResponse.

        Timestamp at which the user was confirmed  # noqa: E501

        :param confirmed_at: The confirmed_at of this UserResponse.  # noqa: E501
        :type: str
        """

        self._confirmed_at = confirmed_at

    @property
    def confirmation_sent_at(self):
        """Gets the confirmation_sent_at of this UserResponse.  # noqa: E501

        Timestamp at which the confirmation mail was sent to the user  # noqa: E501

        :return: The confirmation_sent_at of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._confirmation_sent_at

    @confirmation_sent_at.setter
    def confirmation_sent_at(self, confirmation_sent_at):
        """Sets the confirmation_sent_at of this UserResponse.

        Timestamp at which the confirmation mail was sent to the user  # noqa: E501

        :param confirmation_sent_at: The confirmation_sent_at of this UserResponse.  # noqa: E501
        :type: str
        """

        self._confirmation_sent_at = confirmation_sent_at

    @property
    def created_at(self):
        """Gets the created_at of this UserResponse.  # noqa: E501

        Timestamp at which the user was created  # noqa: E501

        :return: The created_at of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserResponse.

        Timestamp at which the user was created  # noqa: E501

        :param created_at: The created_at of this UserResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this UserResponse.  # noqa: E501

        Timestamp at which the user was last changed  # noqa: E501

        :return: The updated_at of this UserResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserResponse.

        Timestamp at which the user was last changed  # noqa: E501

        :param updated_at: The updated_at of this UserResponse.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def disabled(self):
        """Gets the disabled of this UserResponse.  # noqa: E501


        :return: The disabled of this UserResponse.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this UserResponse.


        :param disabled: The disabled of this UserResponse.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def address(self):
        """Gets the address of this UserResponse.  # noqa: E501


        :return: The address of this UserResponse.  # noqa: E501
        :rtype: UserAddressResponse
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UserResponse.


        :param address: The address of this UserResponse.  # noqa: E501
        :type: UserAddressResponse
        """

        self._address = address

    @property
    def links(self):
        """Gets the links of this UserResponse.  # noqa: E501


        :return: The links of this UserResponse.  # noqa: E501
        :rtype: UserResponseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this UserResponse.


        :param links: The links of this UserResponse.  # noqa: E501
        :type: UserResponseLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
