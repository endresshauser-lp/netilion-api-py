# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccessRightsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_read': 'bool',
        'can_update': 'bool',
        'can_delete': 'bool',
        'can_permit': 'bool'
    }

    attribute_map = {
        'can_read': 'can_read',
        'can_update': 'can_update',
        'can_delete': 'can_delete',
        'can_permit': 'can_permit'
    }

    def __init__(self, can_read=None, can_update=None, can_delete=None, can_permit=None):  # noqa: E501
        """AccessRightsResponse - a model defined in Swagger"""  # noqa: E501
        self._can_read = None
        self._can_update = None
        self._can_delete = None
        self._can_permit = None
        self.discriminator = None
        if can_read is not None:
            self.can_read = can_read
        if can_update is not None:
            self.can_update = can_update
        if can_delete is not None:
            self.can_delete = can_delete
        if can_permit is not None:
            self.can_permit = can_permit

    @property
    def can_read(self):
        """Gets the can_read of this AccessRightsResponse.  # noqa: E501


        :return: The can_read of this AccessRightsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._can_read

    @can_read.setter
    def can_read(self, can_read):
        """Sets the can_read of this AccessRightsResponse.


        :param can_read: The can_read of this AccessRightsResponse.  # noqa: E501
        :type: bool
        """

        self._can_read = can_read

    @property
    def can_update(self):
        """Gets the can_update of this AccessRightsResponse.  # noqa: E501


        :return: The can_update of this AccessRightsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._can_update

    @can_update.setter
    def can_update(self, can_update):
        """Sets the can_update of this AccessRightsResponse.


        :param can_update: The can_update of this AccessRightsResponse.  # noqa: E501
        :type: bool
        """

        self._can_update = can_update

    @property
    def can_delete(self):
        """Gets the can_delete of this AccessRightsResponse.  # noqa: E501


        :return: The can_delete of this AccessRightsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this AccessRightsResponse.


        :param can_delete: The can_delete of this AccessRightsResponse.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def can_permit(self):
        """Gets the can_permit of this AccessRightsResponse.  # noqa: E501


        :return: The can_permit of this AccessRightsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._can_permit

    @can_permit.setter
    def can_permit(self, can_permit):
        """Sets the can_permit of this AccessRightsResponse.


        :param can_permit: The can_permit of this AccessRightsResponse.  # noqa: E501
        :type: bool
        """

        self._can_permit = can_permit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessRightsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessRightsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
