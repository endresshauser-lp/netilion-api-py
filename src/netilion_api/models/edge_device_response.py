# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from netilion_api.models.edge_device_base import EdgeDeviceBase  # noqa: F401,E501

class EdgeDeviceResponse(EdgeDeviceBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'type': 'NestedIDHref',
        'status': 'NestedIDHref',
        'software_version': 'NestedIDHref',
        'technical_user': 'NestedIDHref',
        'order_user': 'NestedIDHref',
        'api_subscription': 'EdgeDeviceResponseApiSubscription',
        'api_key': 'NestedIDHref',
        'tenant': 'NestedIDHref',
        'usergroup': 'NestedIDHref',
        'add_on': 'NestedIDHref',
        'last_seen_at': 'str',
        'links': 'Links9'
    }
    if hasattr(EdgeDeviceBase, "swagger_types"):
        swagger_types.update(EdgeDeviceBase.swagger_types)

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'status': 'status',
        'software_version': 'software_version',
        'technical_user': 'technical_user',
        'order_user': 'order_user',
        'api_subscription': 'api_subscription',
        'api_key': 'api_key',
        'tenant': 'tenant',
        'usergroup': 'usergroup',
        'add_on': 'add_on',
        'last_seen_at': 'last_seen_at',
        'links': 'links'
    }
    if hasattr(EdgeDeviceBase, "attribute_map"):
        attribute_map.update(EdgeDeviceBase.attribute_map)

    def __init__(self, id=None, type=None, status=None, software_version=None, technical_user=None, order_user=None, api_subscription=None, api_key=None, tenant=None, usergroup=None, add_on=None, last_seen_at=None, links=None, *args, **kwargs):  # noqa: E501
        """EdgeDeviceResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._status = None
        self._software_version = None
        self._technical_user = None
        self._order_user = None
        self._api_subscription = None
        self._api_key = None
        self._tenant = None
        self._usergroup = None
        self._add_on = None
        self._last_seen_at = None
        self._links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if status is not None:
            self.status = status
        if software_version is not None:
            self.software_version = software_version
        if technical_user is not None:
            self.technical_user = technical_user
        if order_user is not None:
            self.order_user = order_user
        if api_subscription is not None:
            self.api_subscription = api_subscription
        if api_key is not None:
            self.api_key = api_key
        if tenant is not None:
            self.tenant = tenant
        if usergroup is not None:
            self.usergroup = usergroup
        if add_on is not None:
            self.add_on = add_on
        if last_seen_at is not None:
            self.last_seen_at = last_seen_at
        if links is not None:
            self.links = links
        EdgeDeviceBase.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this EdgeDeviceResponse.  # noqa: E501

        Id of object  # noqa: E501

        :return: The id of this EdgeDeviceResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdgeDeviceResponse.

        Id of object  # noqa: E501

        :param id: The id of this EdgeDeviceResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this EdgeDeviceResponse.  # noqa: E501


        :return: The type of this EdgeDeviceResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EdgeDeviceResponse.


        :param type: The type of this EdgeDeviceResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this EdgeDeviceResponse.  # noqa: E501


        :return: The status of this EdgeDeviceResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EdgeDeviceResponse.


        :param status: The status of this EdgeDeviceResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._status = status

    @property
    def software_version(self):
        """Gets the software_version of this EdgeDeviceResponse.  # noqa: E501


        :return: The software_version of this EdgeDeviceResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this EdgeDeviceResponse.


        :param software_version: The software_version of this EdgeDeviceResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._software_version = software_version

    @property
    def technical_user(self):
        """Gets the technical_user of this EdgeDeviceResponse.  # noqa: E501


        :return: The technical_user of this EdgeDeviceResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._technical_user

    @technical_user.setter
    def technical_user(self, technical_user):
        """Sets the technical_user of this EdgeDeviceResponse.


        :param technical_user: The technical_user of this EdgeDeviceResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._technical_user = technical_user

    @property
    def order_user(self):
        """Gets the order_user of this EdgeDeviceResponse.  # noqa: E501


        :return: The order_user of this EdgeDeviceResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._order_user

    @order_user.setter
    def order_user(self, order_user):
        """Sets the order_user of this EdgeDeviceResponse.


        :param order_user: The order_user of this EdgeDeviceResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._order_user = order_user

    @property
    def api_subscription(self):
        """Gets the api_subscription of this EdgeDeviceResponse.  # noqa: E501


        :return: The api_subscription of this EdgeDeviceResponse.  # noqa: E501
        :rtype: EdgeDeviceResponseApiSubscription
        """
        return self._api_subscription

    @api_subscription.setter
    def api_subscription(self, api_subscription):
        """Sets the api_subscription of this EdgeDeviceResponse.


        :param api_subscription: The api_subscription of this EdgeDeviceResponse.  # noqa: E501
        :type: EdgeDeviceResponseApiSubscription
        """

        self._api_subscription = api_subscription

    @property
    def api_key(self):
        """Gets the api_key of this EdgeDeviceResponse.  # noqa: E501


        :return: The api_key of this EdgeDeviceResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this EdgeDeviceResponse.


        :param api_key: The api_key of this EdgeDeviceResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._api_key = api_key

    @property
    def tenant(self):
        """Gets the tenant of this EdgeDeviceResponse.  # noqa: E501


        :return: The tenant of this EdgeDeviceResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this EdgeDeviceResponse.


        :param tenant: The tenant of this EdgeDeviceResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._tenant = tenant

    @property
    def usergroup(self):
        """Gets the usergroup of this EdgeDeviceResponse.  # noqa: E501


        :return: The usergroup of this EdgeDeviceResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._usergroup

    @usergroup.setter
    def usergroup(self, usergroup):
        """Sets the usergroup of this EdgeDeviceResponse.


        :param usergroup: The usergroup of this EdgeDeviceResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._usergroup = usergroup

    @property
    def add_on(self):
        """Gets the add_on of this EdgeDeviceResponse.  # noqa: E501


        :return: The add_on of this EdgeDeviceResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._add_on

    @add_on.setter
    def add_on(self, add_on):
        """Sets the add_on of this EdgeDeviceResponse.


        :param add_on: The add_on of this EdgeDeviceResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._add_on = add_on

    @property
    def last_seen_at(self):
        """Gets the last_seen_at of this EdgeDeviceResponse.  # noqa: E501

        timestamp when the edge_device itself has polled the hub the last time. Date format is YYYY-MM-DDThh:mm:ss  # noqa: E501

        :return: The last_seen_at of this EdgeDeviceResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_seen_at

    @last_seen_at.setter
    def last_seen_at(self, last_seen_at):
        """Sets the last_seen_at of this EdgeDeviceResponse.

        timestamp when the edge_device itself has polled the hub the last time. Date format is YYYY-MM-DDThh:mm:ss  # noqa: E501

        :param last_seen_at: The last_seen_at of this EdgeDeviceResponse.  # noqa: E501
        :type: str
        """

        self._last_seen_at = last_seen_at

    @property
    def links(self):
        """Gets the links of this EdgeDeviceResponse.  # noqa: E501


        :return: The links of this EdgeDeviceResponse.  # noqa: E501
        :rtype: Links9
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this EdgeDeviceResponse.


        :param links: The links of this EdgeDeviceResponse.  # noqa: E501
        :type: Links9
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeDeviceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeDeviceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
