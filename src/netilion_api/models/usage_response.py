# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsageResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_count': 'int',
        'file_storage': 'int',
        'data_storage': 'int'
    }

    attribute_map = {
        'asset_count': 'asset_count',
        'file_storage': 'file_storage',
        'data_storage': 'data_storage'
    }

    def __init__(self, asset_count=None, file_storage=None, data_storage=None):  # noqa: E501
        """UsageResponse - a model defined in Swagger"""  # noqa: E501
        self._asset_count = None
        self._file_storage = None
        self._data_storage = None
        self.discriminator = None
        if asset_count is not None:
            self.asset_count = asset_count
        if file_storage is not None:
            self.file_storage = file_storage
        if data_storage is not None:
            self.data_storage = data_storage

    @property
    def asset_count(self):
        """Gets the asset_count of this UsageResponse.  # noqa: E501

        Number of assets assigned to this user's active subscription  # noqa: E501

        :return: The asset_count of this UsageResponse.  # noqa: E501
        :rtype: int
        """
        return self._asset_count

    @asset_count.setter
    def asset_count(self, asset_count):
        """Sets the asset_count of this UsageResponse.

        Number of assets assigned to this user's active subscription  # noqa: E501

        :param asset_count: The asset_count of this UsageResponse.  # noqa: E501
        :type: int
        """

        self._asset_count = asset_count

    @property
    def file_storage(self):
        """Gets the file_storage of this UsageResponse.  # noqa: E501

        Use of file storage for this user (in bytes)  # noqa: E501

        :return: The file_storage of this UsageResponse.  # noqa: E501
        :rtype: int
        """
        return self._file_storage

    @file_storage.setter
    def file_storage(self, file_storage):
        """Sets the file_storage of this UsageResponse.

        Use of file storage for this user (in bytes)  # noqa: E501

        :param file_storage: The file_storage of this UsageResponse.  # noqa: E501
        :type: int
        """

        self._file_storage = file_storage

    @property
    def data_storage(self):
        """Gets the data_storage of this UsageResponse.  # noqa: E501

        Use of data storage for this user (in bytes)  # noqa: E501

        :return: The data_storage of this UsageResponse.  # noqa: E501
        :rtype: int
        """
        return self._data_storage

    @data_storage.setter
    def data_storage(self, data_storage):
        """Sets the data_storage of this UsageResponse.

        Use of data storage for this user (in bytes)  # noqa: E501

        :param data_storage: The data_storage of this UsageResponse.  # noqa: E501
        :type: int
        """

        self._data_storage = data_storage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsageResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
