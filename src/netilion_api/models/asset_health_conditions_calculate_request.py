# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetHealthConditionsCalculateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'str',
        'protocol_version': 'str',
        'diagnosis_message': 'str',
        'device_ident': 'str',
        'product_identifier': 'str'
    }

    attribute_map = {
        'protocol': 'protocol',
        'protocol_version': 'protocol_version',
        'diagnosis_message': 'diagnosis_message',
        'device_ident': 'device_ident',
        'product_identifier': 'product_identifier'
    }

    def __init__(self, protocol=None, protocol_version=None, diagnosis_message=None, device_ident=None, product_identifier=None):  # noqa: E501
        """AssetHealthConditionsCalculateRequest - a model defined in Swagger"""  # noqa: E501
        self._protocol = None
        self._protocol_version = None
        self._diagnosis_message = None
        self._device_ident = None
        self._product_identifier = None
        self.discriminator = None
        self.protocol = protocol
        if protocol_version is not None:
            self.protocol_version = protocol_version
        self.diagnosis_message = diagnosis_message
        if device_ident is not None:
            self.device_ident = device_ident
        if product_identifier is not None:
            self.product_identifier = product_identifier

    @property
    def protocol(self):
        """Gets the protocol of this AssetHealthConditionsCalculateRequest.  # noqa: E501

        possible values: HART, PROFIBUS, ETHERNETIP, MODBUS, OTHERS  # noqa: E501

        :return: The protocol of this AssetHealthConditionsCalculateRequest.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this AssetHealthConditionsCalculateRequest.

        possible values: HART, PROFIBUS, ETHERNETIP, MODBUS, OTHERS  # noqa: E501

        :param protocol: The protocol of this AssetHealthConditionsCalculateRequest.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def protocol_version(self):
        """Gets the protocol_version of this AssetHealthConditionsCalculateRequest.  # noqa: E501

        definition of the protocol version. For example 5, 6 or 7 for HART  # noqa: E501

        :return: The protocol_version of this AssetHealthConditionsCalculateRequest.  # noqa: E501
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this AssetHealthConditionsCalculateRequest.

        definition of the protocol version. For example 5, 6 or 7 for HART  # noqa: E501

        :param protocol_version: The protocol_version of this AssetHealthConditionsCalculateRequest.  # noqa: E501
        :type: str
        """

        self._protocol_version = protocol_version

    @property
    def diagnosis_message(self):
        """Gets the diagnosis_message of this AssetHealthConditionsCalculateRequest.  # noqa: E501

        diagnosis message to use for the calculation  # noqa: E501

        :return: The diagnosis_message of this AssetHealthConditionsCalculateRequest.  # noqa: E501
        :rtype: str
        """
        return self._diagnosis_message

    @diagnosis_message.setter
    def diagnosis_message(self, diagnosis_message):
        """Sets the diagnosis_message of this AssetHealthConditionsCalculateRequest.

        diagnosis message to use for the calculation  # noqa: E501

        :param diagnosis_message: The diagnosis_message of this AssetHealthConditionsCalculateRequest.  # noqa: E501
        :type: str
        """
        if diagnosis_message is None:
            raise ValueError("Invalid value for `diagnosis_message`, must not be `None`")  # noqa: E501

        self._diagnosis_message = diagnosis_message

    @property
    def device_ident(self):
        """Gets the device_ident of this AssetHealthConditionsCalculateRequest.  # noqa: E501

        the protocol dependent device identifier, mandatory for HART and PROFIBUS protocol  # noqa: E501

        :return: The device_ident of this AssetHealthConditionsCalculateRequest.  # noqa: E501
        :rtype: str
        """
        return self._device_ident

    @device_ident.setter
    def device_ident(self, device_ident):
        """Sets the device_ident of this AssetHealthConditionsCalculateRequest.

        the protocol dependent device identifier, mandatory for HART and PROFIBUS protocol  # noqa: E501

        :param device_ident: The device_ident of this AssetHealthConditionsCalculateRequest.  # noqa: E501
        :type: str
        """

        self._device_ident = device_ident

    @property
    def product_identifier(self):
        """Gets the product_identifier of this AssetHealthConditionsCalculateRequest.  # noqa: E501

        the protocol dependent product identifier, mandatory for HART and PROFIBUS protocol  # noqa: E501

        :return: The product_identifier of this AssetHealthConditionsCalculateRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_identifier

    @product_identifier.setter
    def product_identifier(self, product_identifier):
        """Sets the product_identifier of this AssetHealthConditionsCalculateRequest.

        the protocol dependent product identifier, mandatory for HART and PROFIBUS protocol  # noqa: E501

        :param product_identifier: The product_identifier of this AssetHealthConditionsCalculateRequest.  # noqa: E501
        :type: str
        """

        self._product_identifier = product_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetHealthConditionsCalculateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetHealthConditionsCalculateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
