# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Links2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'documents': 'Link',
        'events': 'Link',
        'nodes': 'Link',
        'instrumentations': 'Link',
        'systems': 'Link',
        'pictures': 'Link',
        'specifications': 'Link',
        'subscriptions': 'Link',
        'api_subscriptions': 'Link',
        'health_conditions': 'Link'
    }

    attribute_map = {
        'documents': 'documents',
        'events': 'events',
        'nodes': 'nodes',
        'instrumentations': 'instrumentations',
        'systems': 'systems',
        'pictures': 'pictures',
        'specifications': 'specifications',
        'subscriptions': 'subscriptions',
        'api_subscriptions': 'api_subscriptions',
        'health_conditions': 'health_conditions'
    }

    def __init__(self, documents=None, events=None, nodes=None, instrumentations=None, systems=None, pictures=None, specifications=None, subscriptions=None, api_subscriptions=None, health_conditions=None):  # noqa: E501
        """Links2 - a model defined in Swagger"""  # noqa: E501
        self._documents = None
        self._events = None
        self._nodes = None
        self._instrumentations = None
        self._systems = None
        self._pictures = None
        self._specifications = None
        self._subscriptions = None
        self._api_subscriptions = None
        self._health_conditions = None
        self.discriminator = None
        if documents is not None:
            self.documents = documents
        if events is not None:
            self.events = events
        if nodes is not None:
            self.nodes = nodes
        if instrumentations is not None:
            self.instrumentations = instrumentations
        if systems is not None:
            self.systems = systems
        if pictures is not None:
            self.pictures = pictures
        if specifications is not None:
            self.specifications = specifications
        if subscriptions is not None:
            self.subscriptions = subscriptions
        if api_subscriptions is not None:
            self.api_subscriptions = api_subscriptions
        if health_conditions is not None:
            self.health_conditions = health_conditions

    @property
    def documents(self):
        """Gets the documents of this Links2.  # noqa: E501


        :return: The documents of this Links2.  # noqa: E501
        :rtype: Link
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this Links2.


        :param documents: The documents of this Links2.  # noqa: E501
        :type: Link
        """

        self._documents = documents

    @property
    def events(self):
        """Gets the events of this Links2.  # noqa: E501


        :return: The events of this Links2.  # noqa: E501
        :rtype: Link
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Links2.


        :param events: The events of this Links2.  # noqa: E501
        :type: Link
        """

        self._events = events

    @property
    def nodes(self):
        """Gets the nodes of this Links2.  # noqa: E501


        :return: The nodes of this Links2.  # noqa: E501
        :rtype: Link
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this Links2.


        :param nodes: The nodes of this Links2.  # noqa: E501
        :type: Link
        """

        self._nodes = nodes

    @property
    def instrumentations(self):
        """Gets the instrumentations of this Links2.  # noqa: E501


        :return: The instrumentations of this Links2.  # noqa: E501
        :rtype: Link
        """
        return self._instrumentations

    @instrumentations.setter
    def instrumentations(self, instrumentations):
        """Sets the instrumentations of this Links2.


        :param instrumentations: The instrumentations of this Links2.  # noqa: E501
        :type: Link
        """

        self._instrumentations = instrumentations

    @property
    def systems(self):
        """Gets the systems of this Links2.  # noqa: E501


        :return: The systems of this Links2.  # noqa: E501
        :rtype: Link
        """
        return self._systems

    @systems.setter
    def systems(self, systems):
        """Sets the systems of this Links2.


        :param systems: The systems of this Links2.  # noqa: E501
        :type: Link
        """

        self._systems = systems

    @property
    def pictures(self):
        """Gets the pictures of this Links2.  # noqa: E501


        :return: The pictures of this Links2.  # noqa: E501
        :rtype: Link
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this Links2.


        :param pictures: The pictures of this Links2.  # noqa: E501
        :type: Link
        """

        self._pictures = pictures

    @property
    def specifications(self):
        """Gets the specifications of this Links2.  # noqa: E501


        :return: The specifications of this Links2.  # noqa: E501
        :rtype: Link
        """
        return self._specifications

    @specifications.setter
    def specifications(self, specifications):
        """Sets the specifications of this Links2.


        :param specifications: The specifications of this Links2.  # noqa: E501
        :type: Link
        """

        self._specifications = specifications

    @property
    def subscriptions(self):
        """Gets the subscriptions of this Links2.  # noqa: E501


        :return: The subscriptions of this Links2.  # noqa: E501
        :rtype: Link
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this Links2.


        :param subscriptions: The subscriptions of this Links2.  # noqa: E501
        :type: Link
        """

        self._subscriptions = subscriptions

    @property
    def api_subscriptions(self):
        """Gets the api_subscriptions of this Links2.  # noqa: E501


        :return: The api_subscriptions of this Links2.  # noqa: E501
        :rtype: Link
        """
        return self._api_subscriptions

    @api_subscriptions.setter
    def api_subscriptions(self, api_subscriptions):
        """Sets the api_subscriptions of this Links2.


        :param api_subscriptions: The api_subscriptions of this Links2.  # noqa: E501
        :type: Link
        """

        self._api_subscriptions = api_subscriptions

    @property
    def health_conditions(self):
        """Gets the health_conditions of this Links2.  # noqa: E501


        :return: The health_conditions of this Links2.  # noqa: E501
        :rtype: Link
        """
        return self._health_conditions

    @health_conditions.setter
    def health_conditions(self, health_conditions):
        """Sets the health_conditions of this Links2.


        :param health_conditions: The health_conditions of this Links2.  # noqa: E501
        :type: Link
        """

        self._health_conditions = health_conditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Links2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Links2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
