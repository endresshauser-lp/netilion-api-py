# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from netilion_api.models.asset_base import AssetBase  # noqa: F401,E501

class AssetResponse(AssetBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'ownership_claimed': 'bool',
        'created_at': 'str',
        'updated_at': 'str',
        'product': 'NestedIDHref',
        'product_variant': 'NestedIDHref',
        'parent': 'NestedIDHref',
        'status': 'NestedIDHref',
        'tenant': 'NestedIDHref',
        'links': 'Links2'
    }
    if hasattr(AssetBase, "swagger_types"):
        swagger_types.update(AssetBase.swagger_types)

    attribute_map = {
        'id': 'id',
        'ownership_claimed': 'ownership_claimed',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'product': 'product',
        'product_variant': 'product_variant',
        'parent': 'parent',
        'status': 'status',
        'tenant': 'tenant',
        'links': 'links'
    }
    if hasattr(AssetBase, "attribute_map"):
        attribute_map.update(AssetBase.attribute_map)

    def __init__(self, id=None, ownership_claimed=False, created_at=None, updated_at=None, product=None, product_variant=None, parent=None, status=None, tenant=None, links=None, *args, **kwargs):  # noqa: E501
        """AssetResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._ownership_claimed = None
        self._created_at = None
        self._updated_at = None
        self._product = None
        self._product_variant = None
        self._parent = None
        self._status = None
        self._tenant = None
        self._links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if ownership_claimed is not None:
            self.ownership_claimed = ownership_claimed
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if product is not None:
            self.product = product
        if product_variant is not None:
            self.product_variant = product_variant
        if parent is not None:
            self.parent = parent
        if status is not None:
            self.status = status
        if tenant is not None:
            self.tenant = tenant
        if links is not None:
            self.links = links
        AssetBase.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this AssetResponse.  # noqa: E501

        Id of object  # noqa: E501

        :return: The id of this AssetResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetResponse.

        Id of object  # noqa: E501

        :param id: The id of this AssetResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ownership_claimed(self):
        """Gets the ownership_claimed of this AssetResponse.  # noqa: E501

        flag if asset ownership was claimed by a user  # noqa: E501

        :return: The ownership_claimed of this AssetResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ownership_claimed

    @ownership_claimed.setter
    def ownership_claimed(self, ownership_claimed):
        """Sets the ownership_claimed of this AssetResponse.

        flag if asset ownership was claimed by a user  # noqa: E501

        :param ownership_claimed: The ownership_claimed of this AssetResponse.  # noqa: E501
        :type: bool
        """

        self._ownership_claimed = ownership_claimed

    @property
    def created_at(self):
        """Gets the created_at of this AssetResponse.  # noqa: E501

        Timestamp at which the asset was created  # noqa: E501

        :return: The created_at of this AssetResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AssetResponse.

        Timestamp at which the asset was created  # noqa: E501

        :param created_at: The created_at of this AssetResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AssetResponse.  # noqa: E501

        Timestamp at which the asset was last changed  # noqa: E501

        :return: The updated_at of this AssetResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AssetResponse.

        Timestamp at which the asset was last changed  # noqa: E501

        :param updated_at: The updated_at of this AssetResponse.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def product(self):
        """Gets the product of this AssetResponse.  # noqa: E501


        :return: The product of this AssetResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this AssetResponse.


        :param product: The product of this AssetResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._product = product

    @property
    def product_variant(self):
        """Gets the product_variant of this AssetResponse.  # noqa: E501


        :return: The product_variant of this AssetResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._product_variant

    @product_variant.setter
    def product_variant(self, product_variant):
        """Sets the product_variant of this AssetResponse.


        :param product_variant: The product_variant of this AssetResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._product_variant = product_variant

    @property
    def parent(self):
        """Gets the parent of this AssetResponse.  # noqa: E501


        :return: The parent of this AssetResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this AssetResponse.


        :param parent: The parent of this AssetResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._parent = parent

    @property
    def status(self):
        """Gets the status of this AssetResponse.  # noqa: E501


        :return: The status of this AssetResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssetResponse.


        :param status: The status of this AssetResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._status = status

    @property
    def tenant(self):
        """Gets the tenant of this AssetResponse.  # noqa: E501


        :return: The tenant of this AssetResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this AssetResponse.


        :param tenant: The tenant of this AssetResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._tenant = tenant

    @property
    def links(self):
        """Gets the links of this AssetResponse.  # noqa: E501


        :return: The links of this AssetResponse.  # noqa: E501
        :rtype: Links2
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AssetResponse.


        :param links: The links of this AssetResponse.  # noqa: E501
        :type: Links2
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
