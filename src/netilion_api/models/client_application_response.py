# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from netilion_api.models.client_application_base import ClientApplicationBase  # noqa: F401,E501

class ClientApplicationResponse(ClientApplicationBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'allow_edge_device_application': 'bool',
        'contact_person': 'NestedIDHref',
        'technical_user': 'NestedIDHref',
        'billing_contact': 'BillingContactResponse',
        'links': 'Links4'
    }
    if hasattr(ClientApplicationBase, "swagger_types"):
        swagger_types.update(ClientApplicationBase.swagger_types)

    attribute_map = {
        'id': 'id',
        'allow_edge_device_application': 'allow_edge_device_application',
        'contact_person': 'contact_person',
        'technical_user': 'technical_user',
        'billing_contact': 'billing_contact',
        'links': 'links'
    }
    if hasattr(ClientApplicationBase, "attribute_map"):
        attribute_map.update(ClientApplicationBase.attribute_map)

    def __init__(self, id=None, allow_edge_device_application=None, contact_person=None, technical_user=None, billing_contact=None, links=None, *args, **kwargs):  # noqa: E501
        """ClientApplicationResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._allow_edge_device_application = None
        self._contact_person = None
        self._technical_user = None
        self._billing_contact = None
        self._links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if allow_edge_device_application is not None:
            self.allow_edge_device_application = allow_edge_device_application
        if contact_person is not None:
            self.contact_person = contact_person
        if technical_user is not None:
            self.technical_user = technical_user
        if billing_contact is not None:
            self.billing_contact = billing_contact
        if links is not None:
            self.links = links
        ClientApplicationBase.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this ClientApplicationResponse.  # noqa: E501

        Id of object  # noqa: E501

        :return: The id of this ClientApplicationResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClientApplicationResponse.

        Id of object  # noqa: E501

        :param id: The id of this ClientApplicationResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def allow_edge_device_application(self):
        """Gets the allow_edge_device_application of this ClientApplicationResponse.  # noqa: E501

        Is the client application allowed to get assigned to an edge device application?  # noqa: E501

        :return: The allow_edge_device_application of this ClientApplicationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._allow_edge_device_application

    @allow_edge_device_application.setter
    def allow_edge_device_application(self, allow_edge_device_application):
        """Sets the allow_edge_device_application of this ClientApplicationResponse.

        Is the client application allowed to get assigned to an edge device application?  # noqa: E501

        :param allow_edge_device_application: The allow_edge_device_application of this ClientApplicationResponse.  # noqa: E501
        :type: bool
        """

        self._allow_edge_device_application = allow_edge_device_application

    @property
    def contact_person(self):
        """Gets the contact_person of this ClientApplicationResponse.  # noqa: E501


        :return: The contact_person of this ClientApplicationResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._contact_person

    @contact_person.setter
    def contact_person(self, contact_person):
        """Sets the contact_person of this ClientApplicationResponse.


        :param contact_person: The contact_person of this ClientApplicationResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._contact_person = contact_person

    @property
    def technical_user(self):
        """Gets the technical_user of this ClientApplicationResponse.  # noqa: E501


        :return: The technical_user of this ClientApplicationResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._technical_user

    @technical_user.setter
    def technical_user(self, technical_user):
        """Sets the technical_user of this ClientApplicationResponse.


        :param technical_user: The technical_user of this ClientApplicationResponse.  # noqa: E501
        :type: NestedIDHref
        """

        self._technical_user = technical_user

    @property
    def billing_contact(self):
        """Gets the billing_contact of this ClientApplicationResponse.  # noqa: E501


        :return: The billing_contact of this ClientApplicationResponse.  # noqa: E501
        :rtype: BillingContactResponse
        """
        return self._billing_contact

    @billing_contact.setter
    def billing_contact(self, billing_contact):
        """Sets the billing_contact of this ClientApplicationResponse.


        :param billing_contact: The billing_contact of this ClientApplicationResponse.  # noqa: E501
        :type: BillingContactResponse
        """

        self._billing_contact = billing_contact

    @property
    def links(self):
        """Gets the links of this ClientApplicationResponse.  # noqa: E501


        :return: The links of this ClientApplicationResponse.  # noqa: E501
        :rtype: Links4
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ClientApplicationResponse.


        :param links: The links of this ClientApplicationResponse.  # noqa: E501
        :type: Links4
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientApplicationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientApplicationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
