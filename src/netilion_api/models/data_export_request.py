# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataExportRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'language': 'str',
        'asset': 'NestedID',
        'instrumentation': 'NestedID',
        'system': 'NestedID',
        'batch': 'NestedID',
        'keys': 'list[str]'
    }

    attribute_map = {
        'type': 'type',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'language': 'language',
        'asset': 'asset',
        'instrumentation': 'instrumentation',
        'system': 'system',
        'batch': 'batch',
        'keys': 'keys'
    }

    def __init__(self, type=None, start_date=None, end_date=None, language=None, asset=None, instrumentation=None, system=None, batch=None, keys=None):  # noqa: E501
        """DataExportRequest - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._start_date = None
        self._end_date = None
        self._language = None
        self._asset = None
        self._instrumentation = None
        self._system = None
        self._batch = None
        self._keys = None
        self.discriminator = None
        self.type = type
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if language is not None:
            self.language = language
        if asset is not None:
            self.asset = asset
        if instrumentation is not None:
            self.instrumentation = instrumentation
        if system is not None:
            self.system = system
        if batch is not None:
            self.batch = batch
        if keys is not None:
            self.keys = keys

    @property
    def type(self):
        """Gets the type of this DataExportRequest.  # noqa: E501

        can be complete, measurements, batch_values, instrumentation_values, asset_vdi_2770_documentation_container or system_vdi_2770_documentation_container  # noqa: E501

        :return: The type of this DataExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataExportRequest.

        can be complete, measurements, batch_values, instrumentation_values, asset_vdi_2770_documentation_container or system_vdi_2770_documentation_container  # noqa: E501

        :param type: The type of this DataExportRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def start_date(self):
        """Gets the start_date of this DataExportRequest.  # noqa: E501

        start of export date range  # noqa: E501

        :return: The start_date of this DataExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DataExportRequest.

        start of export date range  # noqa: E501

        :param start_date: The start_date of this DataExportRequest.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this DataExportRequest.  # noqa: E501

        end of export date range, if not provided, current date will be used  # noqa: E501

        :return: The end_date of this DataExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DataExportRequest.

        end of export date range, if not provided, current date will be used  # noqa: E501

        :param end_date: The end_date of this DataExportRequest.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def language(self):
        """Gets the language of this DataExportRequest.  # noqa: E501

        language in which the export should be made (currently only applicable to vdi 2770 containers)  # noqa: E501

        :return: The language of this DataExportRequest.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DataExportRequest.

        language in which the export should be made (currently only applicable to vdi 2770 containers)  # noqa: E501

        :param language: The language of this DataExportRequest.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def asset(self):
        """Gets the asset of this DataExportRequest.  # noqa: E501


        :return: The asset of this DataExportRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this DataExportRequest.


        :param asset: The asset of this DataExportRequest.  # noqa: E501
        :type: NestedID
        """

        self._asset = asset

    @property
    def instrumentation(self):
        """Gets the instrumentation of this DataExportRequest.  # noqa: E501


        :return: The instrumentation of this DataExportRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._instrumentation

    @instrumentation.setter
    def instrumentation(self, instrumentation):
        """Sets the instrumentation of this DataExportRequest.


        :param instrumentation: The instrumentation of this DataExportRequest.  # noqa: E501
        :type: NestedID
        """

        self._instrumentation = instrumentation

    @property
    def system(self):
        """Gets the system of this DataExportRequest.  # noqa: E501


        :return: The system of this DataExportRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this DataExportRequest.


        :param system: The system of this DataExportRequest.  # noqa: E501
        :type: NestedID
        """

        self._system = system

    @property
    def batch(self):
        """Gets the batch of this DataExportRequest.  # noqa: E501


        :return: The batch of this DataExportRequest.  # noqa: E501
        :rtype: NestedID
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this DataExportRequest.


        :param batch: The batch of this DataExportRequest.  # noqa: E501
        :type: NestedID
        """

        self._batch = batch

    @property
    def keys(self):
        """Gets the keys of this DataExportRequest.  # noqa: E501

        value keys to export (in case of type instrumentation_values)  # noqa: E501

        :return: The keys of this DataExportRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this DataExportRequest.

        value keys to export (in case of type instrumentation_values)  # noqa: E501

        :param keys: The keys of this DataExportRequest.  # noqa: E501
        :type: list[str]
        """

        self._keys = keys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataExportRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataExportRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
