# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class APIKeyBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'valid_from': 'str',
        'valid_until': 'str',
        'disabled': 'bool',
        'authentication_type': 'str',
        'description': 'str'
    }

    attribute_map = {
        'valid_from': 'valid_from',
        'valid_until': 'valid_until',
        'disabled': 'disabled',
        'authentication_type': 'authentication_type',
        'description': 'description'
    }

    discriminator_value_class_map = {
          'APIKeyResponse': 'APIKeyResponse',
'APIKeyRequest': 'APIKeyRequest'    }

    def __init__(self, valid_from=None, valid_until=None, disabled=False, authentication_type=None, description=None):  # noqa: E501
        """APIKeyBase - a model defined in Swagger"""  # noqa: E501
        self._valid_from = None
        self._valid_until = None
        self._disabled = None
        self._authentication_type = None
        self._description = None
        self.discriminator = 'apiKeyBaseType'
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_until is not None:
            self.valid_until = valid_until
        if disabled is not None:
            self.disabled = disabled
        if authentication_type is not None:
            self.authentication_type = authentication_type
        if description is not None:
            self.description = description

    @property
    def valid_from(self):
        """Gets the valid_from of this APIKeyBase.  # noqa: E501

        Date must be in format '2016-01-01', cannot be set by non-admin users  # noqa: E501

        :return: The valid_from of this APIKeyBase.  # noqa: E501
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this APIKeyBase.

        Date must be in format '2016-01-01', cannot be set by non-admin users  # noqa: E501

        :param valid_from: The valid_from of this APIKeyBase.  # noqa: E501
        :type: str
        """

        self._valid_from = valid_from

    @property
    def valid_until(self):
        """Gets the valid_until of this APIKeyBase.  # noqa: E501

        Date must be in format '2016-01-01', cannot be set by non-admin users  # noqa: E501

        :return: The valid_until of this APIKeyBase.  # noqa: E501
        :rtype: str
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this APIKeyBase.

        Date must be in format '2016-01-01', cannot be set by non-admin users  # noqa: E501

        :param valid_until: The valid_until of this APIKeyBase.  # noqa: E501
        :type: str
        """

        self._valid_until = valid_until

    @property
    def disabled(self):
        """Gets the disabled of this APIKeyBase.  # noqa: E501

        disabled api keys cannot be used for requests  # noqa: E501

        :return: The disabled of this APIKeyBase.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this APIKeyBase.

        disabled api keys cannot be used for requests  # noqa: E501

        :param disabled: The disabled of this APIKeyBase.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def authentication_type(self):
        """Gets the authentication_type of this APIKeyBase.  # noqa: E501

        possible values are: any, oauth, basic_auth. Oauth is assigned per default  # noqa: E501

        :return: The authentication_type of this APIKeyBase.  # noqa: E501
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this APIKeyBase.

        possible values are: any, oauth, basic_auth. Oauth is assigned per default  # noqa: E501

        :param authentication_type: The authentication_type of this APIKeyBase.  # noqa: E501
        :type: str
        """

        self._authentication_type = authentication_type

    @property
    def description(self):
        """Gets the description of this APIKeyBase.  # noqa: E501

        Description of the APIKey  # noqa: E501

        :return: The description of this APIKeyBase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this APIKeyBase.

        Description of the APIKey  # noqa: E501

        :param description: The description of this APIKeyBase.  # noqa: E501
        :type: str
        """

        self._description = description

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(APIKeyBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIKeyBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
