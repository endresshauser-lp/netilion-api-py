---
swagger: '2.0'
info:
  title: Netilion API Documentation
  description: |
    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API.
    Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/
  version: 01.00.00
basePath: "/v1"
consumes:
- application/json
produces:
- application/json
securityDefinitions:
  Authentication:
    type: basic
    description: Basic authentication with a valid user and password.
  API-Key:
    type: apiKey
    in: header
    name: API-Key
    description: The API-Key serves as identifier for the application that connects
      to the API.
security:
- API-Key: []
  Authentication: []
paths:
  "/api_keys":
    get:
      summary: Get a range of APIKeys
      operationId: getAPIKeys
      description: Returns a list of APIKeys in your accessible scope. If the query
        has no matches, the response is an empty list.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/ApiKeyFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidFromFromFilter"
      - "$ref": "#/parameters/ValidFromToFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidUntilFromFilter"
      - "$ref": "#/parameters/ValidUntilToFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/APIKeysResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APIKey
    post:
      summary: Create a new APIKey
      operationId: createAPIKey
      description: Create a new APIKey. The values of the api_key and the api_secret
        can't be set and will be generated. To create an APIKey, the client_application
        must have an API Subscription assigned. valid_from and valid_until will be
        adopted from the API Subscription
      parameters:
      - name: Body
        in: body
        description: APIKey object that needs to be created. client_application
        required: true
        schema:
          "$ref": "#/definitions/APIKeyRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/APIKeyResponse"
          headers:
            Location:
              description: url of the created api_key
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APIKey
  "/api_keys/{id}":
    get:
      summary: Get a single APIKey
      operationId: getAPIKeyById
      description: Get a specific APIKey in your accessible scope, identified by the
        id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the APIKey to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/APIKeyResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APIKey
    patch:
      summary: Update an APIKey
      operationId: updateAPIKey
      description: Update accessible parameters of the requested resource in your
        accessible scope. The value of the api_key and api_secret can't be changed.
      parameters:
      - name: id
        in: path
        description: Id of the APIKey to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/APIKeyRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APIKey
    delete:
      summary: Delete an APIKey
      operationId: deleteAPIKey
      description: Delete a specific resource in your accessible scope, identified
        by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the APIKey to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APIKey
  "/api_subscriptions":
    get:
      summary: Get a range of api subscriptions
      operationId: getAPISubscriptions
      description: "Returns a list of api subscriptions.\n\nPossible include values:
        ```user, specifications, specifications[key1,key2]``` "
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/UserIDFilter"
      - "$ref": "#/parameters/ClientApplicationIDFilter"
      - "$ref": "#/parameters/ExternalReferenceFilter"
      - "$ref": "#/parameters/SubscriptionStatusFilter"
      - "$ref": "#/parameters/SubscriptionTypeFilter"
      - "$ref": "#/parameters/NotificationStatusFilter"
      - "$ref": "#/parameters/StartDateFilter"
      - "$ref": "#/parameters/EndDateFilter"
      - "$ref": "#/parameters/CreatedAtFilter"
      - "$ref": "#/parameters/CreatedAtFromFilter"
      - "$ref": "#/parameters/CreatedAtToFilter"
      - "$ref": "#/parameters/UpdatedAtFilter"
      - "$ref": "#/parameters/UpdatedAtFromFilter"
      - "$ref": "#/parameters/UpdatedAtToFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/APISubscriptionsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
    post:
      summary: Create a new api subscription
      operationId: createAPISubscription
      description: Creates a new api subscription. Only available for technical_users
        of the ID application and admins. Setting a successor or predecessor is not
        possible.
      parameters:
      - in: body
        name: Body
        description: api subscription body
        required: true
        schema:
          "$ref": "#/definitions/APISubscriptionRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/APISubscriptionResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
  "/api_subscriptions/{id}":
    get:
      summary: Get a single api subscription
      operationId: getAPISubscriptionById
      description: "Get a specific api subscription identified by the id in the URL.\n\nPossible
        include values: ```user, specifications, specifications[key1,key2]``` "
      parameters:
      - name: id
        in: path
        description: Id of the api subscription to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/APISubscriptionResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
    patch:
      summary: Update an api subscription
      operationId: updateAPISubscription
      description: Update accessible parameters of the requested resource. Setting
        a successor or predecessor is not possible.
      parameters:
      - name: id
        in: path
        description: Id of the api subscription to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/APISubscriptionRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
    delete:
      summary: Delete an api subscription
      operationId: deleteAPISubscription
      description: Delete a specific api subscription identified by the id in the
        URL.
      parameters:
      - name: id
        in: path
        description: Id of the api subscription
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
  "/api_subscriptions/{id}/assets":
    get:
      summary: Get all assets of an api subscription
      operationId: getAssetsOfAPISubscription
      description: |-
        Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant,
                                    product.specifications, product.specifications[key1,key2], product.manufacturer.tenant, status.tenant, instrumentations ```
      parameters:
      - name: id
        in: path
        description: Id of the api subscription to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/SerialNumberFilter"
      - "$ref": "#/parameters/ProductIDFilter"
      - "$ref": "#/parameters/ProductCategoryIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StatusCodeFilter"
      - "$ref": "#/parameters/ProductionDateFilter"
      - "$ref": "#/parameters/ProductionDateFromFilter"
      - "$ref": "#/parameters/ProductionDateToFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/NodeIDinAssetFilter"
      - "$ref": "#/parameters/CreatedAtFilter"
      - "$ref": "#/parameters/CreatedAtFromFilter"
      - "$ref": "#/parameters/CreatedAtToFilter"
      - "$ref": "#/parameters/UpdatedAtFilter"
      - "$ref": "#/parameters/UpdatedAtFromFilter"
      - "$ref": "#/parameters/UpdatedAtToFilter"
      - "$ref": "#/parameters/OwnershipClaimedFilter"
      - "$ref": "#/parameters/AssetsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
    post:
      summary: Add assets to an api subscription
      operationId: addAssetsToAPISubscription
      description: Add one or more assets to an API subscription.
      parameters:
      - name: id
        in: path
        description: Id of the api subscription to fetch
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
    patch:
      summary: Replace the assets of an api subscription
      operationId: replaceAssetsOfAPISubscription
      description: Replaces all assets belonging to an API subscription in your accessible
        scope. You can send a list of resources that will replace all previous values.
      parameters:
      - name: id
        in: path
        description: Id of the api subscription to fetch
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
    delete:
      summary: Remove assets from an api subscription
      operationId: removeAssetsFromAPISubscription
      description: Remove one or more assets from an API subscription in your accessible
        scope.
      parameters:
      - name: id
        in: path
        description: Id of the api subscription to fetch
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
  "/api_subscriptions/{id}/edge_devices":
    get:
      summary: Get all edge devices of an api subscription
      operationId: getEdgeDevicesOfAPISubscription
      description: |-
        Returns a list of all edge devices that are assigned to an api subscription. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```status type tenant technical_user order_user software_version usergroup specifications api_subscription api_subscription.user```
      parameters:
      - name: id
        in: path
        description: Get a list of edge devices assigned to the api subscription identified
          by this id.
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/SerialNumberFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/SoftwareVersionIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/TechnicalUserIDFilter"
      - "$ref": "#/parameters/OrderUserIDFilter"
      - "$ref": "#/parameters/LogLevelFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/EdgeDeviceOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EdgeDeviceResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
    post:
      summary: Add edge devices to an api subscription
      operationId: addEdgeDevicesToApiSubscription
      description: Add one or more edge devices to an api subscription.
      parameters:
      - name: id
        in: path
        description: Id of the api subscription to which the edge devices will be
          added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/EdgeDevicesIds"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
    patch:
      summary: Replace the edge devices of an api subscription
      operationId: replaceEdgeDevicesOfApiSubscription
      description: Replaces all edge devices belonging to an api subscription in your
        accessible scope. You can send a list of resources that will replace all previous
        values.
      parameters:
      - name: id
        in: path
        description: Id of the api subscription of which the edge devices will be
          replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/EdgeDevicesIds"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
    delete:
      summary: Remove edge devices from an api subscription
      operationId: removeEdgeDevicesFromApiSubscription
      description: Remove one or more edge devices from an api subscription in your
        accessible scope.
      parameters:
      - name: id
        in: path
        description: Id of the api subscription from which the edge devices will be
          removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/EdgeDevicesIds"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
  "/api_subscriptions/{id}/specifications":
    get:
      summary: Get specifications of an api subscription
      operationId: getSpecificationsOfAPISubscription
      description: Returns the specification of an object in your accessible scope.
        If no specifications are defined, this is just an empty object. Specification
        must have the form below.
      parameters:
      - name: id
        in: path
        description: Id of the specified api subscription
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationsResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
      - Specification
    patch:
      summary: Update specifications of an api subscription
      operationId: updateSpecificationsOfAPISubscriptions
      description: Update the specification object of an api subscription in your
        accessible scope. To add specifications, just add the key and set the value
        object with value, unit and source_timestamp. To mark an existing specification
        to be unknown, the value could be set to null. To delete keys, use the delete
        method. Multiple specification objects can be sent in the same request. Keys
        inside a specification are unique and can only be added once. Keys can only
        consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case
        a-z. For a key that is send multiple times in the request body, only the last
        key-value is saved.
      parameters:
      - name: id
        in: path
        description: Id of the specified api subscription
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications objects to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
      - Specification
    delete:
      summary: Delete specifications of an api subscription
      operationId: removeSpecificationsFromAPISubscriptions
      description: The specification keys in the body will be removed of the object
        in your accessible scope. If a key does not exist it will be ignored.
      parameters:
      - name: id
        in: path
        description: Id of the specified api subscription
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Array of keys to delete from specifications
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsDelete"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
      - Specification
  "/api_subscriptions/{id}/specifications/rename":
    patch:
      summary: Rename a specification key
      operationId: renameSpecificationsOfAPISubscriptions
      description: Rename one specification key of a subscription in your accessible
        scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will
        be converted to lower-case.
      parameters:
      - name: id
        in: path
        description: Id of the specified subscription
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications object to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRename"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - APISubscription
      - Specification
  "/assets":
    get:
      summary: Get a range of assets
      operationId: getAssets
      description: "Returns a list of assets in your accessible scope. You can apply
        the query parameters listed below to get a filtered list.\nPossible include
        values: ```status,\ntenant, parent, pictures, values, values.unit, values_in_preferred_units,
        values_in_preferred_units.unit,\nproduct, product.manufacturer, product.pictures,
        product.status, product.categories, product.categories.parent,\nproduct.tenant,
        product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,
        \nsystems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2],\nproduct.specifications,
        product.specifications[key1,key2],\ninstrumentations.status, instrumentations.type,
        instrumentations.worst_asset_status, \ninstrumentations.specifications, instrumentations.specifications[key1,key2]
        add_ons in_subscription```"
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/SerialNumberFilter"
      - "$ref": "#/parameters/ProductIDFilter"
      - "$ref": "#/parameters/ProductStatusIDFilter"
      - "$ref": "#/parameters/ProductCategoryIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StatusCodeFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/LastSeenAtFromFilter"
      - "$ref": "#/parameters/LastSeenAtToFilter"
      - "$ref": "#/parameters/ProductionDateFilter"
      - "$ref": "#/parameters/ProductionDateFromFilter"
      - "$ref": "#/parameters/ProductionDateToFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/NodeIDinAssetFilter"
      - "$ref": "#/parameters/InstrumentationIDNullFilter"
      - "$ref": "#/parameters/SystemIDNullFilter"
      - "$ref": "#/parameters/CreatedAtFilter"
      - "$ref": "#/parameters/CreatedAtFromFilter"
      - "$ref": "#/parameters/CreatedAtToFilter"
      - "$ref": "#/parameters/UpdatedAtFilter"
      - "$ref": "#/parameters/UpdatedAtFromFilter"
      - "$ref": "#/parameters/UpdatedAtToFilter"
      - "$ref": "#/parameters/OwnershipClaimedFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/AssetsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    post:
      summary: Create a new asset
      operationId: createAsset
      description: Create a new asset. An asset is an instance of a product and therefore
        needs to refer to one when creating it. The serial number of the given asset
        needs to be unique within the products manufacturer scope. The asset will
        not be created when this constraint is violated. The user gains `can_read`,
        `can_update`, `can_delete`, `can_permit` per default on the newly created
        asset. To assign a parent asset the user needs `can_permit` permission on
        the parent.
      parameters:
      - name: Body
        in: body
        description: Asset object that needs to be created. serial_number, product
          are required
        required: true
        schema:
          "$ref": "#/definitions/AssetRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/AssetResponse"
          headers:
            Location:
              description: url of the created asset
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{id}":
    get:
      summary: Get a single asset
      operationId: getAssetById
      description: "Get a specific asset identified by the id in the URL.\nPossible
        include values: ```status,\ntenant, parent, pictures, values, values.unit,
        values_in_preferred_units, values_in_preferred_units.unit,\nproduct, product.manufacturer,
        product.pictures, product.status, product.categories, product.categories.parent,\nproduct.tenant,
        product.manufacturer.tenant, status.tenant, instrumentations, systems, systems.recipe,
        \nsystems.specifications, systems.batches_in_execution, specifications, specifications[key1,key2],\nproduct.specifications,
        product.specifications[key1,key2],\ninstrumentations.specifications, instrumentations.specifications[key1,key2]
        add_ons```"
      parameters:
      - name: id
        in: path
        description: Id of the asset to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    patch:
      summary: Update an asset
      operationId: updateAsset
      description: Update accessible parameters of the requested resource in your
        accessible scope.  To assign a parent asset the user needs `can_permit` permission
        on the parent and on the current asset.
      parameters:
      - name: id
        in: path
        description: Id of the asset to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: 'Parameters that shall be updated. To remove an associative object
          use "object_name": null'
        required: true
        schema:
          "$ref": "#/definitions/AssetRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    delete:
      summary: Delete an asset
      operationId: deleteAsset
      description: |-
        Delete a specific resource identified by the id in the URL.
        Required Permissions: ```can_delete```.
      parameters:
      - name: id
        in: path
        description: Id of the asset to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/add_ons":
    get:
      summary: Get all add_ons of one asset
      operationId: getAddOnsOfAsset
      description: Returns a list of all add_ons that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ProductCodeFilter"
      - "$ref": "#/parameters/MaterialNumberFilter"
      - "$ref": "#/parameters/AddOnTypeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AddOnsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    post:
      summary: Add add_ons to an asset
      operationId: addAddOnsToAsset
      description: Add one or more add_ons to an asset. This action requires `can_permit`
        permission on the asset and on the add_on.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset to which the add_ons will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/AddOnIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    patch:
      summary: Replace the add_ons of an asset
      operationId: replaceAddOnsOfAsset
      description: Replaces all add_ons belonging to an asset in your accessible scope.
        You can send a list of resources that will replace all previous values. This
        action requires `can_permit` permission on the asset and on the add_on.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset of which the add_ons will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/AddOnIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    delete:
      summary: Remove add_ons from an asset
      operationId: removeAddOnsFromAsset
      description: Remove one or more add_ons from an asset in your accessible scope.
        `This action` requires `can_permit` permission on the asset and on the add_on.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset from which the add_ons will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/AddOnIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/api_subscriptions":
    get:
      summary: Get all API subscriptions of the asset
      operationId: getApiSubscriptionsOfAsset
      description: "Returns a list of all API subscriptions that are available in
        your scope. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array.\n\nPossible
        include values: ```user, user.usage, specifications, specifications[key1,key2]``` "
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/UserIDFilter"
      - "$ref": "#/parameters/ClientApplicationIDFilter"
      - "$ref": "#/parameters/ExternalReferenceFilter"
      - "$ref": "#/parameters/StatusFilter"
      - "$ref": "#/parameters/NotificationStatusFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/StartDateFilter"
      - "$ref": "#/parameters/EndDateFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/APISubscriptionResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/company-options":
    get:
      summary: Get all possible companies of the specified assets
      operationId: getAssetCompanyOptions
      description: |-
        Returns a list of all possible companies for the specified asset. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```tenant, parent```
      parameters:
      - name: asset_id
        in: path
        description: Id of the specified asset
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: companies
            type: object
            properties:
              companies:
                type: array
                items:
                  "$ref": "#/definitions/CompanyResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
      - Company
  "/assets/{id}/containers":
    post:
      summary: Create an export for a standard container
      operationId: createAssetContainer
      description: Creates a data export for asset container, currently only the VDI
        2770 standard is supported
      parameters:
      - name: id
        in: path
        description: Id of the asset
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Container that should be created.
        required: true
        schema:
          "$ref": "#/definitions/ContainerExportRequest"
      responses:
        '201':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DataExportsResponse"
          headers:
            Location:
              description: Url of the created data export
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/deliveries":
    get:
      summary: Get all deliveries of one asset
      operationId: getDeliveriesOfAsset
      description: Returns a list of all deliveries that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateOfShipmentFilter"
      - "$ref": "#/parameters/DateOfShipmentFromFilter"
      - "$ref": "#/parameters/DateOfShipmentToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/CustomerNumberFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DeliveriesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    post:
      summary: Add deliveries to an asset
      operationId: addDeliveriesToAsset
      description: Add one or more deliveries to an asset.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset to which the deliveries will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DeliveryIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    patch:
      summary: Replace the deliveries of an asset
      operationId: replaceDeliveriesOfAsset
      description: Replaces all deliveries belonging to an asset in your accessible
        scope. You can send a list of resources that will replace all previous values.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset of which the deliveries will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DeliveryIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    delete:
      summary: Remove deliveries from an asset
      operationId: removeDeliveriesFromAsset
      description: Remove one or more deliveries from an asset in your accessible
        scope.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset from which the deliveries will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DeliveryIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/documents":
    get:
      summary: Get all documents of an asset
      operationId: getDocumentsOfAsset
      description: |-
        Returns a list of all documents that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, classification,
        categories, categories.parent, attachments, categories.standards, eventdocuments```
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    post:
      summary: Add documents to an asset
      operationId: addDocumentsToAsset
      description: Add one or more documents to an asset.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset to which the documents will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    patch:
      summary: Replace the documents of an asset
      operationId: replaceDocumentsOfAsset
      description: Replaces all documents belonging to an asset. You can send a list
        of resources that will replace all previous values.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset of which the documents will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    delete:
      summary: Remove documents from an asset
      operationId: removeDocumentsFromAsset
      description: Remove one or more documents from an asset.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset from which the documents will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/history/status":
    get:
      summary: Get the status history of an asset
      operationId: getAssetStatusHistory
      description: "Returns the collection of historical asset status values. \n\nWith
        the filter parameters from and to, it is possible to receive the history of
        a defined time period \n\nDefine the from with a ```+``` in front of the date
        the previous values is part of the collection (+2018-06-21T14:45:23). \n\nDefine
        the to with a ```+``` at the end of the date the next values is part of the
        collection (2018-06-21T14:45:23+)."
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/FromFilter"
      - "$ref": "#/parameters/ToFilter"
      - "$ref": "#/parameters/AttributeHistoryOrderByParameter"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetStatusHistoryResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    post:
      summary: Update the status history of an asset
      operationId: updateAssetStatusHistory
      description: |-
        Update the status history of an asset . An array with several asset status and timestamp combinations.
        * The data passed to this endpoint is processed asynchronously. * This endpoint always returns an empty response with status 204 No Content. * The data will be validated during processing. Invalid data will be dropped silently. * The request size is limited to 500kb, requests larger then 500kb will get an "413 Payload Too Large" error. * Timestamp must be after the creation date of the asset
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - name: Body
        in: body
        description: Asset status history to update.
        required: true
        schema:
          "$ref": "#/definitions/AssetStatusHistoryRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '413':
          "$ref": "#/responses/413"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/instrumentations":
    get:
      summary: Get all instrumentations of one asset
      operationId: getInstrumentationsOfAsset
      description: |-
        Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type```
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/TagFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/CriticalityFilter"
      - "$ref": "#/parameters/AccessibilityFilter"
      - "$ref": "#/parameters/NodeIDNullFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/InstrumentationsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    post:
      summary: Add instrumentations to an asset
      operationId: addInstrumentationsToAsset
      description: Add one or more instrumentations to an asset. This action requires
        `can_permit` permission on the asset and on the instrumentation.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset to which the instrumentations will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    patch:
      summary: Replace the instrumentations of an asset
      operationId: replaceInstrumentationsOfAsset
      description: Replaces all instrumentations belonging to an asset in your accessible
        scope. You can send a list of resources that will replace all previous values.
        This action requires `can_permit` permission on the asset and on the instrumentation.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset of which the instrumentations will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    delete:
      summary: Remove instrumentations from an asset
      operationId: removeInstrumentationsOfAsset
      description: Remove one or more instrumentations from an asset in your accessible
        scope. This action requires `can_permit` permission on the asset and on the
        instrumentation.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset from which the instrumentations will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/instrumentations/history":
    get:
      summary: Get all instrumentations an asset was assigned to
      operationId: getInstrumentationsOfAssetHistory
      description: Returns a list of all instrumentations history available in your
        scope which have been assigned to the specified asset. You can apply query
        parameters in the request to get a filtered list. If the query has no matches,
        the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/InstrumentationIDFilter"
      - "$ref": "#/parameters/HistoryEventFilter"
      - "$ref": "#/parameters/EventDateTimeFromFilter"
      - "$ref": "#/parameters/EventDateTimeToFilter"
      - "$ref": "#/parameters/InstrumentationsHistoryOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetInstrumentationsHistoryResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/nodes":
    get:
      summary: Get all nodes of one asset
      operationId: getNodesOfAsset
      description: Returns a list of all nodes that are available in your scope. You
        can apply query parameters in the request to get a filtered list. If the query
        has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/HiddenNodeFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/NodesOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/NodesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    post:
      summary: Add nodes to an asset
      operationId: addNodesToAsset
      description: Add one or more nodes to an asset. This action requires `can_permit`
        permission on the asset and on the node.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset to which the nodes will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/NodeIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    patch:
      summary: Replace the nodes of an asset
      operationId: replaceNodesOfAsset
      description: Replaces all nodes belonging to an asset in your accessible scope.
        You can send a list of resources that will replace all previous values. This
        action requires `can_permit` permission on the asset and on the node.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset of which the nodes will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/NodeIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    delete:
      summary: Remove nodes from an asset
      operationId: removeNodesFromAsset
      description: Remove one or more nodes from an asset in your accessible scope.
        `This action` requires `can_permit` permission on the asset and on the node.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset from which the nodes will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/NodeIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{id}/pictures":
    get:
      summary: Get asset pictures
      operationId: getAssetPictures
      description: Get all pictures of an asset.
      parameters:
      - name: id
        in: path
        description: Id of the asset
        type: integer
        format: int64
        required: true
      - name: width
        in: query
        description: filter by width
        type: integer
      - name: width_from
        in: query
        description: filter by width_from
        type: integer
      - name: width_to
        in: query
        description: filter by width_to
        type: integer
      - name: height
        in: query
        description: filter by height
        type: integer
      - name: height_from
        in: query
        description: filter by height_from
        type: integer
      - name: height_to
        in: query
        description: filter by height_to
        type: integer
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PicturesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    post:
      summary: Upload an asset picture
      operationId: UploadAssetPicture
      description: |-
        Upload a new asset picture. Checks the file-storage quota. Allowed content-types are
        - image/gif
        - image/jpg
        - image/jpeg
        - image/png
      consumes:
      - multipart/form-data
      parameters:
      - name: id
        in: path
        description: Id of the asset
        type: integer
        format: int64
        required: true
      - name: image
        in: formData
        description: the image to upload (up to 1 MB)
        required: true
        type: file
      responses:
        '201':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PictureResponse"
          headers:
            Location:
              description: Url of the created asset picture
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/pictures/{id}":
    get:
      summary: Get an asset picture
      operationId: getAssetPicture
      description: Get a single picture of an asset.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the asset picture
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PictureResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    patch:
      summary: Update an asset picture
      operationId: updateAssetPicture
      description: |-
        Upload a new asset picture. Check the file-storage quota. Allowed content-types are
        - image/gif
        - image/jpg
        - image/jpeg
        - image/png
      consumes:
      - multipart/form-data
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the asset picture
        type: integer
        format: int64
        required: true
      - name: image
        in: formData
        description: the image to upload (up to 1 MB)
        required: true
        type: file
      responses:
        '204':
          description: The picture was updated successfully.
          schema:
            "$ref": "#/definitions/PictureResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    delete:
      summary: Delete an asset picture
      operationId: deleteAssetPicture
      description: Delete an asset picture.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the asset picture
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/pictures/{id}/download":
    get:
      summary: Download an asset picture
      operationId: downloadAssetPicture
      description: Download an asset picture.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the asset picture
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: A file download stream
          headers:
            Content-Type:
              type: string
              description: the original files mime-type is used here (eg. image/jpeg)
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{id}/pictures/links":
    post:
      summary: Add a link as asset picture
      operationId: addAssetPictureLink
      description: Add an external resource as asset picture.
      parameters:
      - name: id
        in: path
        description: Id of the asset
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Picture link object to be created
        required: true
        schema:
          "$ref": "#/definitions/PictureLinkRequest"
      responses:
        '201':
          description: The picture link was successfully created. The response body
            contains its representation
          schema:
            "$ref": "#/definitions/PictureResponse"
          headers:
            Location:
              description: Url of the created asset picture
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/pictures/links/{id}":
    patch:
      summary: Update an asset picture link
      operationId: updateAssetPictureLink
      description: Update an asset picture link.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the asset picture
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Picture link object to be updated
        required: true
        schema:
          "$ref": "#/definitions/PictureLinkRequest"
      responses:
        '204':
          description: The picture link was updated successfully.
          schema:
            "$ref": "#/definitions/PictureResponse"
          headers:
            Location:
              description: Url of the created asset picture link
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/product-options":
    get:
      summary: Get all possible products of the specified assets
      operationId: getAssetProductOptions
      description: |-
        Returns a list of all possible products for the specified asset.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, parent, manufacturer, pictures, categories, categories.parent```
      parameters:
      - name: asset_id
        in: path
        description: Id of the specified asset
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/ProductCodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: products
            type: object
            properties:
              products:
                type: array
                items:
                  "$ref": "#/definitions/ProductResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
      - Product
  "/assets/{asset_id}/schedules":
    post:
      summary: Create a schedule for an asset
      operationId: createAssetSchedule
      description: Create a new schedule for an asset.
      parameters:
      - name: asset_id
        in: path
        description: Id of the specified asset
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Schedule of the asset
        required: true
        schema:
          "$ref": "#/definitions/AssetScheduleRequest"
      responses:
        '201':
          description: The schedule was successfully created. The response body contains
            its representation.
          schema:
            "$ref": "#/definitions/AssetScheduleResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    get:
      summary: Get all schedules of an asset
      operationId: getAssetschedules
      description: Returns the list of all asset schedules.
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/ScheduleTypeFilter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetSchedulesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/schedules/{id}":
    delete:
      summary: Delete an asset schedule
      operationId: deleteAssetSchedule
      description: Delete an asset schedule.
      parameters:
      - name: asset_id
        in: path
        description: Id of the specified asset
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the schedule
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    get:
      summary: Get an asset schedule
      operationId: getAssetSchedule
      description: Get an asset schedule.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the schedule
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetScheduleResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    patch:
      summary: Update an asset schedule
      operationId: updateAssetSchedule
      description: Update an asset schedule.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the schedule
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be updated
        required: true
        schema:
          "$ref": "#/definitions/AssetScheduleRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/softwares":
    get:
      summary: Get a range of software of one asset
      operationId: getSoftwaresOfSoftware
      description: |-
        Returns a list of software.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```software_attachments```
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/SoftwareTypeIDFilter"
      - "$ref": "#/parameters/SoftwareOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SoftwaresResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    post:
      summary: Add software to an asset
      operationId: addSoftwaresToAsset
      description: Add one or more software to an asset.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset to which the software will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/SoftwareIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    patch:
      summary: Replace the software of an asset
      operationId: replaceSoftwaresOfAsset
      description: Replaces all software belonging to an asset. You can send a list
        of resources that will replace all previous values.
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset of which the software will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/SoftwareIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
    delete:
      summary: Remove software from an asset
      operationId: removeSoftwaresOfAsset
      description: Remove one or more software from an asset.
      parameters:
      - name: asset_id
        in: path
        description: Id of the product from which the software will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/SoftwareIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/specifications":
    get:
      summary: Get specifications of an asset
      operationId: getSpecificationsOfAsset
      description: Returns the specification of an object in your accessible scope.
        If no specifications are defined, this is just an empty object. Specification
        must have the form below.
      parameters:
      - name: asset_id
        in: path
        description: Id of the specified asset
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      - name: ui_visible
        in: query
        type: boolean
        required: false
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationsUIVisibleResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
      - Specification
    patch:
      summary: Update specifications of an asset
      operationId: updateSpecificationsOfAsset
      description: |-
        Update the specification object of an asset in your accessible scope. To add specifications, just add the key and set the value object with value, unit and source_timestamp. To mark an existing specification to be unknown, the value could be set to null. To delete keys, use the delete method. Multiple specification objects can be sent in the same request. Keys inside a specification are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that is send multiple times in the request body, only the last key-value is saved.

        It is possible to save complex objects in the value as vector. In this case the unit must be 'vector' and the value a valid object in the following format:
        ```
              [
                  {
                    "key": {
                     "value": "string",
                     "unit": "string"
                   }
                  },
                  {
                    "second_key": {
                      "value": "string"
                    }
                  }
               ]
          ```

        - key can only consist of [a-z A-Z 0-9 . - _ ].
        - value is mandatory, max length 6000 chars
        - unit is optional, max length 50 chars
        - its impossible to filter for vector values
      parameters:
      - name: asset_id
        in: path
        description: Id of the specified asset
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications objects to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsUIVisibleRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
      - Specification
    delete:
      summary: Delete specifications of an asset
      operationId: deleteSpecificationsOfAsset
      description: The specification keys in the body will be removed of the object
        in your accessible scope. Multiple specification keys can be sent in the same
        request. If a key does not exist it will be ignored.
      parameters:
      - name: asset_id
        in: path
        description: Id of the specified asset
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Array of keys to delete from specifications
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsDelete"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
      - Specification
  "/assets/{asset_id}/specifications/{key}/history":
    get:
      summary: Get the history of one specification attribute of an asset.
      operationId: getSpecificationHistoryOfAsset
      description: This might be useful for history data. The response contains a
        collection of historic values and when they`ve been updated. Since this can
        be a lot of data the service uses pagination. The history can be filtered
        by using a date range of source_timestamp and/or updated_at. Please consider
        that source_timestamp is not required and update on the attribute without
        giving a source_timestamp wont be included in the resulting response
      parameters:
      - name: asset_id
        in: path
        description: Id of the specified asset
        type: integer
        format: int64
        required: true
      - name: key
        in: path
        type: string
        required: true
        description: the exact key
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - name: source_timestamp_from
        in: query
        description: source_timestamp filter from. Starting with + will include the
          previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: source_timestamp_to
        in: query
        description: source_timestamp filter to. Ending with + will include the next
          value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: updated_at_from
        in: query
        description: updated_at filter from. Starting with + will include the previous
          value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: updated_at_to
        in: query
        description: updated_at filter to. Ending with + will include the next value
          as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - "$ref": "#/parameters/SpecificationHistoryOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationHistoryResponse"
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
      - Specification
  "/assets/{asset_id}/specifications/rename":
    patch:
      summary: Rename a specification key
      operationId: renameSpecificationsOfAsset
      description: Rename one specification key of an asset in your accessible scope.
        The key name allows [a-z A-Z 0-9 . - _ ]. All uppercase letters will be converted
        to lower-case.
      parameters:
      - name: asset_id
        in: path
        description: Id of the specified asset
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications object to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRename"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
      - Specification
  "/assets/{asset_id}/status":
    get:
      summary: Get the status of the specific asset
      operationId: getAssetIdStatus
      description: |-
        Returns the status of the asset. Needed if only permission on asset but not on tenant.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include value: ```tenant```
      parameters:
      - name: asset_id
        in: path
        description: Id of the specified asset
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          headers:
            Content-Language:
              description: language of the status name, can be a list of languages
              type: string
          schema:
            "$ref": "#/definitions/AssetStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
      - AssetStatus
  "/assets/{asset_id}/status-options":
    get:
      summary: Get all possible statuses of the specified assets
      operationId: getAssetStatusesOptions
      description: |-
        Returns a list of all possible asset statuses for the specified asset. You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include value: ```tenant```
      parameters:
      - name: asset_id
        in: path
        description: Id of the specified asset
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          headers:
            Content-Language:
              description: language of the status name, can be a list of languages
              type: string
          schema:
            title: asset_statuses
            type: object
            properties:
              asset_statuses:
                type: array
                items:
                  "$ref": "#/definitions/AssetStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
      - AssetStatus
  "/assets/{asset_id}/subscriptions":
    get:
      summary: Get all subscriptions of asset
      operationId: getSubscriptionsOfAsset
      description: "Returns a list of all subscriptions that are available in your
        scope. You can apply query parameters in the request to get a filtered list.
        If the query has no matches, the response will show an empty array.\n\nPossible
        include values: ```user, user.usage, specifications, specifications[key1,key2]``` "
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/UserIDFilter"
      - "$ref": "#/parameters/ClientApplicationIDFilter"
      - "$ref": "#/parameters/ExternalReferenceFilter"
      - "$ref": "#/parameters/StatusFilter"
      - "$ref": "#/parameters/NotificationStatusFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/StartDateFilter"
      - "$ref": "#/parameters/EndDateFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SubscriptionsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/systems":
    get:
      summary: Get all systems of one Asset
      operationId: getSystemsOfAsset
      description: |-
        Returns a list of all systems that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```pictures, specifications, specifications[key1,key2], tenant, parent, status, type, type.tenant, type.parent ```
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/SystemsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SystemsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/tenant-options":
    get:
      summary: Get all possible tenants of the specified assets
      operationId: getAssetTenantOptions
      description: Returns a list of all possible tenants for the specified asset.
        That is all public tenants and the assets tenant. You can apply query parameters
        in the request to get a filtered list. If the query has no matches, the response
        will show an empty array.
      parameters:
      - name: asset_id
        in: path
        description: Id of the specified asset
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: tenants
            type: object
            properties:
              tenants:
                type: array
                items:
                  "$ref": "#/definitions/TenantResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
      - Tenant
  "/assets/{asset_id}/value_objects":
    post:
      summary: Create asset value objects
      operationId: createAssetValueObjects
      description: |-
        Store value objects measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:

        * The data passed to this endpoint is processed asynchronously.
        * This endpoint always returns an empty response with status 204 No Content.
        * The data will be validated during processing. Invalid data will be dropped silently.
        * The request size is limited to 500kb, requests larger then 500kb will get an "413 Payload Too Large" error.

        Data validations and manipulation:

          * Keys can only consist of the characters [a-z A-Z 0-9 . - _ ].
          * Keys will be converted to lower case strings.
          * Keys must be between 1 and 128 characters long.
          * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the value objects get transferred one at a time, if you send multiple value objects without timestamp at once, all value objects will get the same timestamp and there for only the last one will be stored)

        Difference to path /assets/{asset_id}/values is that the values given here are json objects and not numeric values, the json objects can have any structure.
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - name: Body
        in: body
        description: Values to store to an asset.
        required: true
        schema:
          "$ref": "#/definitions/AssetValueObjectsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '413':
          "$ref": "#/responses/413"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/assets/{asset_id}/value_objects/{key}":
    get:
      summary: Get asset value objects for a specific key.
      operationId: getAssetValueObjectsForKey
      description: |-
        Returns a collection of the history value objects of the value objects for the specified key.
        For a selected result of the value objects the filter parameters selector and interval are mandatory.
        With the filter parameters from, to or datetime, it is possible to receive the history of a defined time period.
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/AssetValuesKeyPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AssetValueFromFilter"
      - "$ref": "#/parameters/AssetValueToFilter"
      - "$ref": "#/parameters/AssetValueDateTimeFilter"
      - "$ref": "#/parameters/SelectorFilter"
      - "$ref": "#/parameters/SelectorIntervalFilter"
      - "$ref": "#/parameters/AssetValuesOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetKeyValueObjectsResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
  "/attachments":
    get:
      summary: Get a range of attachments
      operationId: getAttachments
      description: Returns a list of all attachments that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.'
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/ContentAuthorFilter"
      - "$ref": "#/parameters/ContentVersionFilter"
      - "$ref": "#/parameters/RemarksFilter"
      - "$ref": "#/parameters/ContentDateFilter"
      - "$ref": "#/parameters/ContentDateFromFilter"
      - "$ref": "#/parameters/ContentDateToFilter"
      - "$ref": "#/parameters/FileNameFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AttachmentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Attachment
    post:
      summary: Create and upload a new attachment
      operationId: uploadAttachment
      description: |-
        the creation of an attachment works through a multipart/form-data upload of the file, its filename, content-author, content-date and languages of the file.
        Special characters (&$+,/:;=?@<>[]{}|^~%#) and white spaces in the file name will be replaced with underscores. Checks for the file-storage quota.

        Forbidden content-types are

        - application/xhtml+xml
        - text/html
        - application/javascript
        - text/javascript
        - application/x-shockwave-flash
        - application/vnd.adobe.flash.movie
        - video/x-flv
        - text/php
        - application/php
        - application/x-php
        - application/x-httpd-php
      consumes:
      - multipart/form-data
      parameters:
      - name: file
        in: formData
        description: the filedata to upload
        required: true
        type: file
      - name: document_id
        in: formData
        description: the document this attachment belongs to
        type: integer
        format: int64
        required: true
      - name: content_author
        in: formData
        description: the file authors name
        type: string
      - name: content_version
        in: formData
        description: The version can be set as float
        type: string
      - name: content_date
        in: formData
        description: last edit date of the file. Datetime must be in format YYYY-MM-DD
          or YYYY-MM-DDThh:mm:ss
        type: string
        format: dateTime
      - name: remarks
        in: formData
        description: remarks on the attachment
        type: string
      - name: languages
        in: formData
        description: the files content languages. Send as comma separated list with
          alpha2 language codes (eg. de,en,fr). Supported languages are defined in
          ISO639-1
        type: string
      responses:
        '201':
          description: The attachment was created successful and the file is saved.
            The response body contains the attachment representation
          schema:
            "$ref": "#/definitions/AttachmentResponse"
          headers:
            Location:
              description: url of the created attachment
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Attachment
  "/attachments/{id}":
    get:
      summary: Get a single attachment
      operationId: getAttachmentById
      description: specific attachment in your accessible scope, identified by the
        id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the attachment to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AttachmentResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Attachment
    patch:
      summary: Update an attachment and especially its file
      operationId: updateAttachment
      description: The attachment object and also the file can be changed with a patch
        call. Checks the file-storage quota
      consumes:
      - multipart/form-data
      parameters:
      - name: id
        in: path
        description: Id of the attachment to update
        type: integer
        format: int64
        required: true
      - name: file
        in: formData
        description: the filedata to upload
        required: false
        type: file
      - name: document_id
        in: formData
        description: the document this attachment belongs to
        type: integer
        format: int64
        required: false
      - name: content_author
        in: formData
        description: the file authors name
        type: string
      - name: content_date
        in: formData
        description: last edit date of the file. Datetime must be in format YYYY-MM-DD
          or YYYY-MM-DDThh:mm:ss
        type: string
        format: dateTime
      - name: remarks
        in: formData
        description: remarks on the attachment
        type: string
      - name: languages
        in: formData
        description: the files content languages. Send as comma separated list with
          alpha2 language codes (eg. de,en,fr). Supported languages are defined in
          ISO639-1
        type: string
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Attachment
    delete:
      summary: Delete an attachment and the file
      operationId: deleteAttachment
      description: Delete a specific attachment resource and file identified by the
        id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the attachment to fetch
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Attachment
  "/attachments/{id}/download":
    get:
      summary: Download the attachments file
      operationId: downloadAttachment
      description: Download the file of the attachment with the original filename.
        Content-Transfer-Encoding header is set to binary
      parameters:
      - name: id
        in: path
        description: Id of the attachment to fetch
        type: integer
        format: int64
        required: true
      - name: disposition
        in: query
        description: Disposition type the download should be returned with. Allowed
          values are "inline" and "attachment". Default is "attachment".
        type: string
      responses:
        '200':
          description: A file download stream
          headers:
            Content-Type:
              type: string
              description: the original files mime-type is used here (eg. application/pdf)
            Content-Disposition:
              type: string
              description: contains the original files filename (eg. attachment; filename="test.pdf")
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Attachment
  "/attachments/links":
    post:
      summary: Create a new link as attachment
      operationId: createLinkAttachment
      description: Create an attachments that links to an external resource
      parameters:
      - name: Body
        in: body
        description: Attachment object that needs to be created
        required: true
        schema:
          "$ref": "#/definitions/AttachmentLinkRequest"
      responses:
        '201':
          description: The attachment was created successful. The response body contains
            the attachment representation
          schema:
            "$ref": "#/definitions/AttachmentResponse"
          headers:
            Location:
              description: url of the created attachment
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Attachment
  "/attachments/links/{id}":
    patch:
      summary: Update an attachment with a link
      operationId: updateLinkAttachment
      description: update an attachment that has a link
      parameters:
      - name: id
        in: path
        description: Id of the attachment to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Attachment object that needs to be created
        required: true
        schema:
          "$ref": "#/definitions/AttachmentLinkRequest"
      responses:
        '201':
          description: The attachment was created successful. The response body contains
            the attachment representation
          schema:
            "$ref": "#/definitions/AttachmentResponse"
          headers:
            Location:
              description: url of the created attachment
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Attachment
  "/bill_of_materials":
    get:
      summary: Get a range of bill of materials
      operationId: getBillOfMaterials
      description: Returns a list of bill of materials. If the query has no matches,
        the response is an empty list.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/AuthorFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/BillOfMaterialsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
    post:
      summary: Create a new bill of material
      operationId: createBillOfMaterial
      description: Create a new bill of material
      parameters:
      - name: Body
        in: body
        description: Object body that will be created.
        required: true
        schema:
          "$ref": "#/definitions/BillOfMaterialRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/BillOfMaterialResponse"
          headers:
            Location:
              description: url of the created bill of material
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
  "/bill_of_materials/{id}":
    get:
      summary: Get a single bill of material
      operationId: getBillOfMaterialById
      description: Get a specific bill of material identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the bill of material to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/BillOfMaterialResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
    patch:
      summary: Update a bill of material
      operationId: updateBillOfMaterial
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the bill of material to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/BillOfMaterialRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
    delete:
      summary: Delete a bill of material
      operationId: deleteBillOfMaterial
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the bill of material to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
  "/bill_of_materials/{bill_of_material_id}/documents":
    get:
      summary: Get all documents of a bill of material
      operationId: getDocumentsOfBillOfMaterial
      description: |-
        Returns a list of documents. If the query has no matches, the response is an empty list.

        Possible include values: ```status, tenant, classification, categories, categories.parent, attachments```
      parameters:
      - "$ref": "#/parameters/BillOfMaterialPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
    post:
      summary: Add documents to a bill of material
      operationId: addDocumentsToBillOfMaterial
      description: Add one or more documents to a bill of material.
      parameters:
      - name: bill_of_material_id
        in: path
        description: Id of the bill of material to which the documents will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
    patch:
      summary: Replace the documents of a bill of material
      operationId: replaceDocumentsOfBillOfMaterial
      description: Replaces all documents belonging to a bill of material. You can
        send a list of resources that will replace all previous values.
      parameters:
      - name: bill_of_material_id
        in: path
        description: Id of the bill of material of which the documents will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
    delete:
      summary: Remove documents from a bill of material
      operationId: removeDocumentsFromBillOfMaterial
      description: Remove one or more documents from a bill of material.
      parameters:
      - name: bill_of_material_id
        in: path
        description: Id of the bill of material from which the documents will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
  "/bill_of_materials/{bill_of_material_id}/instrumentations":
    get:
      summary: Get all instrumentations of a bill of material
      operationId: getInstrumentationsOfBillOfMaterial
      description: |-
        Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```specifications, specifications[key1,key2], pictures, tenant, parent, status, type```
      parameters:
      - "$ref": "#/parameters/BillOfMaterialPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/TagFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/CriticalityFilter"
      - "$ref": "#/parameters/AccessibilityFilter"
      - "$ref": "#/parameters/InstrumentationAssetStatusIDFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/InstrumentationsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
    post:
      summary: Add instrumentations to a bill of material
      operationId: addInstrumentationsToBillOfMaterial
      description: Add one or more instrumentations to a bill of material.
      parameters:
      - name: bill_of_material_id
        in: path
        description: Id of the bill of material to which the instrumentations will
          be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
    patch:
      summary: Replace the instrumentations of a bill of material
      operationId: replaceInstrumentationsOfBillOfMaterial
      description: Replaces all instrumentations belonging to a bill of material.
        You can send a list of resources that will replace all previous values.
      parameters:
      - name: bill_of_material_id
        in: path
        description: Id of the bill of material of which the instrumentations will
          be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
    delete:
      summary: Remove instrumentations from a bill of material
      operationId: removeInstrumentationsFromBillOfMaterial
      description: Remove one or more instrumentations from a bill of material.
      parameters:
      - name: bill_of_material_id
        in: path
        description: Id of the bill of material from which the instrumentations will
          be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
  "/bill_of_materials/{bill_of_material_id}/request_for_quotations":
    get:
      summary: Get all request for quotations of a bill of material
      operationId: getRequestForQuotationsOfBillOfMaterial
      description: Returns a list of all request for quotations that are available
        in your scope. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/BillOfMaterialPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/AuthorFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/RequestForQuotationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
    post:
      summary: Add request for quotations to a bill of material
      operationId: addRequestForQuotationsToBillOfMaterial
      description: Add one or more request for quotations to a bill of material.
      parameters:
      - name: bill_of_material_id
        in: path
        description: Id of the bill of material to which the request for quotations
          will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/RequestForQuotationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
    patch:
      summary: Replace the request for quotations of a bill of material
      operationId: replaceRequestForQuotationsOfBillOfMaterial
      description: Replaces all request for quotations belonging to a bill of material.
        You can send a list of resources that will replace all previous values.
      parameters:
      - name: bill_of_material_id
        in: path
        description: Id of the bill of material of which the request for quotations
          will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/RequestForQuotationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
    delete:
      summary: Remove request for quotations from a bill of material
      operationId: removeRequestForQuotationsOfBillOfMaterial
      description: Remove one or more request for quotations from a bill of material.
      parameters:
      - name: bill_of_material_id
        in: path
        description: Id of the bill of material from which the request for quotations
          will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/RequestForQuotationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - BillOfMaterial
  "/client_applications":
    get:
      summary: Get a range of client_applications
      operationId: getClientApplications
      description: |-
        Returns a list of client_applications in your accessible scope. If the query has no matches, the response is an empty list.
        Only client_applications on which the user has the can_read permission are loaded.
        Possible include values: ```technical_users```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ContactPersonIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ClientApplicationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    post:
      summary: Create a new client_application
      operationId: createClientApplication
      description: Create a new client_application.
      parameters:
      - name: Body
        in: body
        description: ClientApplication object that needs to be created. name and contact_person
          are required.
        required: true
        schema:
          "$ref": "#/definitions/ClientApplicationRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/ClientApplicationResponse"
          headers:
            Location:
              description: url of the created client_application
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
  "/client_applications/{id}":
    get:
      summary: Get a single client_application
      operationId: getClientApplicationById
      description: |-
        Get a specific client_application in your accessible scope, identified
        by the id in the URL. Possible include values: ```technical_users```
      parameters:
      - name: id
        in: path
        description: Id of the client_application to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ClientApplicationResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    patch:
      summary: Update an client_application
      operationId: updateClientApplication
      description: Update accessible parameters of the requested resource in your
        accessible scope.
      parameters:
      - name: id
        in: path
        description: Id of the client_application to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/ClientApplicationRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    delete:
      summary: Delete an client_application
      operationId: deleteClientApplication
      description: Delete a specific resource in your accessible scope, identified
        by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the client_application to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
  "/client_applications/{client_application_id}/api_keys":
    get:
      summary: GetAPI Keys of Client Application
      operationId: getAPIKeysOfClientApplication
      description: Returns a list of api_keys of an client application. If the query
        has no matches, the response is an empty list. Only api_keys on which the
        user has the can_read permission are loaded.
      parameters:
      - "$ref": "#/parameters/ClientApplicationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/ApiKeyFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidFromFromFilter"
      - "$ref": "#/parameters/ValidFromToFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidUntilFromFilter"
      - "$ref": "#/parameters/ValidUntilToFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ClientApplicationResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
  "/client_applications/{client_application_id}/edge_device/applications":
    get:
      summary: Get all edge devices applications for an client application
      operationId: getEdgeDeviceApplicationsOfClientApplication
      description: Returns a list of all edge devices applications of an client application.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - name: client_application_id
        in: path
        description: id of the client application to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/EdgeDeviceTypeIDFilter"
      - "$ref": "#/parameters/SoftwareVersionIDFilter"
      - "$ref": "#/parameters/EdgeDeviceApplicationOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EdgeDeviceApplicationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
  "/client_applications/{client_application_id}/roles/{userrole_id}/users":
    get:
      summary: Get all users of a user role assigned to a client application
      operationId: getUsersOfClientApplicationUserRole
      description: Returns a list of all users that are available in your scope. You
        can apply query parameters in the request to get a filtered list. If the query
        has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/ClientApplicationPathID"
      - "$ref": "#/parameters/UserrolePathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/FirstNameFilter"
      - "$ref": "#/parameters/LastNameFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UsersPublicResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    post:
      summary: Add users to a client application user role
      operationId: addUsersToClientApplicationUserRole
      description: Add one or more users to a user role.
      parameters:
      - "$ref": "#/parameters/ClientApplicationPathID"
      - "$ref": "#/parameters/UserrolePathID"
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/UserIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    delete:
      summary: Remove users from a client application user role
      operationId: deleteUsersFromClientApplicationUserRole
      description: Remove one or more users from an user role. To work with roles,
        admin role is required.
      parameters:
      - "$ref": "#/parameters/ClientApplicationPathID"
      - "$ref": "#/parameters/UserrolePathID"
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/UserIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
  "/client_applications/{client_application_id}/technical_users":
    get:
      summary: Get Technical Users of Client Application
      operationId: getTechnicalUsersOfClientApplication
      description: Returns a list of technical of an client application. If the query
        has no matches, the response is an empty list
      parameters:
      - "$ref": "#/parameters/ClientApplicationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/EMailFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/TechnicalUsersResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    post:
      summary: Add Technical Users of Client Application
      operationId: addTechnicalUsersToClientApplication
      description: 'Creates a new technical user for a client application. Email (username)
        and password is automatically generated and can not be defined. The generated
        username and password are part of the response (password can not be later
        received again but can be changed via password_reset endpoint of technical
        user). '
      parameters:
      - "$ref": "#/parameters/ClientApplicationPathID"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/TechnicalUserCreateResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
  "/client_applications/{client_application_id}/webhooks":
    get:
      summary: Get webhooks of Client Application
      operationId: getWebhooksOfClientApplication
      description: Returns a list of webhooks of an client application. If the query
        has no matches, the response is an empty list. Only webhooks on which the
        user has the can_read permission are loaded.
      parameters:
      - name: client_application_id
        in: path
        description: Id of the client_application to update
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/WebhookResponses"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    post:
      summary: Create a new webhook for the Client Application
      operationId: createWebhookToClientApplication
      description: Create a new web hook to the client application.
      parameters:
      - name: client_application_id
        in: path
        description: Id of the client_application to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Webhook object that needs to be created. url and event_types
          are required.
        required: true
        schema:
          "$ref": "#/definitions/WebhookRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/WebhookCreateResponse"
          headers:
            Location:
              description: url of the created client_application
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
  "/client_applications/{client_application_id}/webhooks/{id}":
    get:
      summary: Get a single webhook
      operationId: getWebhookById
      description: Get a specific webhook identified by the id in the URL.
      parameters:
      - name: client_application_id
        in: path
        description: Id of the client_application where webhook to fetch
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the webhook to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/WebhookResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    patch:
      summary: Update a webhook
      operationId: updateWebhook
      description: Update accessible parameters of the requested resource in your
        accessible scope.
      parameters:
      - name: client_application_id
        in: path
        description: Id of the client_application to update
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the webhook to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/WebhookRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    delete:
      summary: Delete a webhook
      operationId: deleteWebhook
      description: |-
        Delete a specific resource identified by the id in the URL.
        Required Permissions: ```can_delete```.
      parameters:
      - name: client_application_id
        in: path
        description: Id of the client_application where webhook to update
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the webhook to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
  "/client_applications/{client_application_id}/webhooks/{id}/events":
    get:
      summary: Get events of a webhook
      operationId: getWebhookEvents
      description: Get webhook events. Events are the messages that are send to the
        webhook URL.
      parameters:
      - name: client_application_id
        in: path
        description: Id of the client_application where webhook is registered
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the webhook
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/StatusFilter"
      - name: event_type
        in: query
        description: Filter by event type - no wildcard support
        required: false
        type: string
      - name: occurred_at
        in: query
        description: Expected date format is YYYY-MM-DD
        type: string
        format: date
        required: false
      - name: occurred_at_from
        in: query
        description: Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: dateTime
        required: false
      - name: occurred_at_to
        in: query
        description: Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: dateTime
        required: false
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '201':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/WebhookEventResponses"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    post:
      summary: resend Webhook Events
      operationId: resendWebhookEvents
      description: Trigger the resend of webhook events
      parameters:
      - name: client_application_id
        in: path
        description: Id of the client_application where webhook is registered
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the webhook
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: ids of the events that should be resend. Events that are currently
          in state pending are ignored are required.
        required: true
        schema:
          "$ref": "#/definitions/WebhookEventIDs"
      responses:
        '204':
          description: The request was successful.
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
  "/client_applications/{client_application_id}/webhooks/{id}/reset_secret":
    post:
      summary: Reset the secret property of the webhook
      operationId: resetSecretWebhook
      description: Reset the secret property of the webhook
      parameters:
      - name: client_application_id
        in: path
        description: Id of the client_application to update
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the webhook to update
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/WebhookSecretResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
  "/client_applications/current":
    get:
      summary: Get current client_application
      operationId: getCurrentClientApplication
      description: Returns current client application used to access the api.
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ClientApplicationPublicResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
  "/companies":
    get:
      summary: Get a range of companies
      operationId: getCompanies
      description: |-
        Returns a list of all companies that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```tenant, parent```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            type: object
            title: companies
            required:
            - companies
            - pagination
            properties:
              companies:
                type: array
                items:
                  "$ref": "#/definitions/CompanyResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Company
    post:
      summary: Create a new company
      operationId: createCompany
      description: A company can be manufacturer of products, or can have other roles.
        Every company has by default an 'unknown product' which is returned in the
        response together with the new company that was created. It serves to connect
        assets to the manufacturer in case no further product information is available.
      parameters:
      - name: Body
        in: body
        description: Company to create
        required: true
        schema:
          "$ref": "#/definitions/CompanyRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/CompanyResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Company
  "/companies/{id}":
    get:
      summary: Get a single company
      operationId: getCompanyById
      description: |-
        Get a specific company identified by the id in the URL.

        Possible include values: ```tenant, parent```
      parameters:
      - name: id
        in: path
        description: Id of the company to fetch
        required: true
        type: integer
        format: int64
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/CompanyResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Company
    patch:
      summary: Update a company
      operationId: updateCompany
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the company to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/CompanyRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Company
    delete:
      summary: Delete a company
      operationId: deleteCompany
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the company to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Company
  "/companies/{company_id}/deliveries_received":
    get:
      summary: Get all deliveries received of one company
      operationId: getDeliveriesReceivedOfCompany
      description: Returns a list of all deliveries received that are available in
        your scope. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/CompanyPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateOfShipmentFilter"
      - "$ref": "#/parameters/DateOfShipmentFromFilter"
      - "$ref": "#/parameters/DateOfShipmentToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DeliveriesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Company
  "/companies/{company_id}/deliveries_sent":
    get:
      summary: Get all deliveries sent of one company
      operationId: getDeliveriesSentOfCompany
      description: Returns a list of all sent deliveries sent that are available in
        your scope. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/CompanyPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateOfShipmentFilter"
      - "$ref": "#/parameters/DateOfShipmentFromFilter"
      - "$ref": "#/parameters/DateOfShipmentToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DeliveriesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Company
  "/companies/{company_id}/products":
    get:
      summary: Get all products of a company
      operationId: getProductsOfCompany
      description: |-
        Receive a list of products of a specific company, identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, parent, manufacturer, pictures, categories, categories.parent```
      parameters:
      - "$ref": "#/parameters/CompanyPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/ProductCodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductsResponse"
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Company
      - Product
  "/customers":
    get:
      summary: Get a range of customers
      operationId: getCustomers
      description: Returns a list of all customers that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/CustomerOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/CustomersResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Customer
    post:
      summary: Create a new customer
      operationId: createCustomer
      description: Customer must have a number
      parameters:
      - name: Body
        in: body
        description: Customer to create
        required: true
        schema:
          "$ref": "#/definitions/CustomerRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/CustomerResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Customer
  "/customers/{id}":
    get:
      summary: Get a single customer
      operationId: getCustomerById
      description: Get a specific customer identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the customer to fetch
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/CustomerResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Customer
    patch:
      summary: Update a customer
      operationId: updateCustomer
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the customer to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/CustomerRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Customer
    delete:
      summary: Delete a customer
      operationId: deleteCustomer
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the customer to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Customer
  "/deliveries":
    get:
      summary: Get a range of deliveries
      operationId: getDeliveries
      description: Returns a list of deliveries in your accessible scope. If the query
        has no matches, the response is an empty list. Only deliveries on which the
        user has the can_read permission are loaded
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateOfShipmentFilter"
      - "$ref": "#/parameters/DateOfShipmentFromFilter"
      - "$ref": "#/parameters/DateOfShipmentToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/CustomerNumberFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DeliveriesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
    post:
      summary: Create a new delivery
      operationId: createDelivery
      description: Delivery must have a name, number, sender, receiver and a status.
      parameters:
      - name: Body
        in: body
        description: Delivery to create
        required: true
        schema:
          "$ref": "#/definitions/DeliveryRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/DeliveryResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
  "/deliveries/{id}":
    get:
      summary: Get a single delivery
      operationId: getDeliveryById
      description: Get a specific delivery in your accessible scope, identified by
        the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the delivery to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DeliveryResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
    patch:
      summary: Update a delivery
      operationId: updateDelivery
      description: Update accessible parameters of the requested resource in your
        accessible scope.
      parameters:
      - name: id
        in: path
        description: Id of the delivery to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/DeliveryRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
    delete:
      summary: Delete a delivery
      operationId: deleteDelivery
      description: Delete a specific resource in your accessible scope, identified
        by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the delivery to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
  "/deliveries/{delivery_id}/assets":
    get:
      summary: Get all assets of one delivery
      operationId: getAssetsOfDelivery
      description: |-
        Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```status, tenant, parent, pictures, product, product.manufacturer,
        product.pictures, product.status, product.categories, product.categories.parent,
        specifications, specifications[key1,key2], product.tenant, product.manufacturer.tenant,
        status.tenant, instrumentations ```
      parameters:
      - "$ref": "#/parameters/DeliveryPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/SerialNumberFilter"
      - "$ref": "#/parameters/ProductIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StatusCodeFilter"
      - "$ref": "#/parameters/ProductionDateFilter"
      - "$ref": "#/parameters/ProductionDateFromFilter"
      - "$ref": "#/parameters/ProductionDateToFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/CreatedAtFilter"
      - "$ref": "#/parameters/CreatedAtFromFilter"
      - "$ref": "#/parameters/CreatedAtToFilter"
      - "$ref": "#/parameters/UpdatedAtFilter"
      - "$ref": "#/parameters/UpdatedAtFromFilter"
      - "$ref": "#/parameters/UpdatedAtToFilter"
      - "$ref": "#/parameters/OwnershipClaimedFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/AssetsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
    post:
      summary: Add assets to a delivery
      operationId: addAssetsToDelivery
      description: Add one or more assets to a delivery.
      parameters:
      - name: delivery_id
        in: path
        description: Id of the delivery to which the assets will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
    patch:
      summary: Replace the assets of a delivery
      operationId: replaceAssetsOfDelivery
      description: Replaces all assets belonging to a delivery. You can send a list
        of resources that will replace all previous values.
      parameters:
      - name: delivery_id
        in: path
        description: Id of the delivery of which the assets will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
    delete:
      summary: Remove assets from a delivery
      operationId: removeAssetsFromDelivery
      description: Remove one or more assets from a delivery in your accessible scope.
      parameters:
      - name: delivery_id
        in: path
        description: Id of the delivery from which the assets will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
  "/deliveries/{delivery_id}/documents":
    get:
      summary: Get all documents of one delivery
      operationId: getDocumentsOfDelivery
      description: |-
        Returns a list of documents. If the query has no matches, the response is an empty list.

        Possible include values: ```status, tenant, classification, categories, categories.parent, categories.standards, attachments```
      parameters:
      - "$ref": "#/parameters/DeliveryPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
    post:
      summary: Add documents to a delivery
      operationId: addDocumentsToDelivery
      description: Add one or more documents to a delivery.
      parameters:
      - name: delivery_id
        in: path
        description: Id of the delivery to which the documents will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
    patch:
      summary: Replace the documents of a delivery
      operationId: replaceDocumentsOfDelivery
      description: Replaces all documents belonging to a delivery. You can send a
        list of resources that will replace all previous values.
      parameters:
      - name: delivery_id
        in: path
        description: Id of the delivery of which the documents will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
    delete:
      summary: Remove documents from a delivery
      operationId: removeDocumentsFromDelivery
      description: Remove one or more documents from a delivery in your accessible
        scope.
      parameters:
      - name: delivery_id
        in: path
        description: Id of the delivery from which the documents will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
  "/deliveries/{delivery_id}/purchase_orders":
    get:
      summary: Get all purchase orders of one delivery
      operationId: getPurchaseOrdersOfDelivery
      description: Returns a list of all all purchase oder that are available in your
        scope. You can apply query parameters in the request to get a filtered list.
        If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/DeliveryPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/QuotationIDFilter"
      - "$ref": "#/parameters/CustomerNumberFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PurchaseOrdersResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
    post:
      summary: Add all purchase orders to a delivery
      operationId: addPurchaseOrdersToDelivery
      description: Add one or more all purchase orders to a delivery.
      parameters:
      - name: delivery_id
        in: path
        description: Id of the delivery to which the all purchase orders will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
    patch:
      summary: Replace the purchase orders of a delivery
      operationId: replacePurchaseOrdersOfDelivery
      description: Replaces all purchase orders belonging to a delivery. You can send
        a list of resources that will replace all previous values.
      parameters:
      - name: delivery_id
        in: path
        description: Id of the delivery of which the purchase orders will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
    delete:
      summary: Remove purchase orders from a delivery
      operationId: removePurchaseOrdersFromDelivery
      description: Remove one or more purchase orders from a delivery in your accessible
        scope.
      parameters:
      - name: delivery_id
        in: path
        description: Id of the delivery from which the purchase orders will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
  "/deliveries/{delivery_id}/status":
    get:
      summary: Get the status of the specific delivery
      operationId: getDeliveryIdStatus
      description: |-
        Returns the status of the delivery.
        You can apply the query parameters listed below to get a filtered list.
        Required Permissions: ```can_read```
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
        Possible include value: ```tenant```
      parameters:
      - name: delivery_id
        in: path
        description: Id of the specified delivery
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DeliveryStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Delivery
      - DeliveryStatus
  "/documents":
    get:
      summary: Get a range of documents
      operationId: getDocuments
      description: |-
        Returns a list of documents. You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, classification,
        categories, categories.parent, attachments, categories.standards```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
    post:
      summary: Create a new document
      operationId: createDocument
      description: |-
        Create a new document.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - name: Body
        in: body
        description: Object body that will be created.
        required: true
        schema:
          "$ref": "#/definitions/DocumentRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/DocumentResponse"
          headers:
            Location:
              description: url of the created document
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{id}":
    get:
      summary: Get a single document
      operationId: getDocumentById
      description: |-
        Get a specific document identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, classification, categories, categories.parent, categories.standards, attachments```
      parameters:
      - name: id
        in: path
        description: Id of the document to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
    patch:
      summary: Update a document
      operationId: updateDocument
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the document to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/DocumentRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
    delete:
      summary: Delete a document
      operationId: deleteDocument
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the document to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/assets":
    get:
      summary: Get all assets of one document
      operationId: getAssetsOfDocument
      description: |-
        Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant,
                                    product.manufacturer.tenant, status.tenant, instrumentations ```
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/SerialNumberFilter"
      - "$ref": "#/parameters/ProductIDFilter"
      - "$ref": "#/parameters/ProductCategoryIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StatusCodeFilter"
      - "$ref": "#/parameters/ProductionDateFilter"
      - "$ref": "#/parameters/ProductionDateFromFilter"
      - "$ref": "#/parameters/ProductionDateToFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/CreatedAtFilter"
      - "$ref": "#/parameters/CreatedAtFromFilter"
      - "$ref": "#/parameters/CreatedAtToFilter"
      - "$ref": "#/parameters/UpdatedAtFilter"
      - "$ref": "#/parameters/UpdatedAtFromFilter"
      - "$ref": "#/parameters/UpdatedAtToFilter"
      - "$ref": "#/parameters/OwnershipClaimedFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/AssetsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/attachments":
    get:
      summary: Get all attachments of one document
      operationId: getAttachmentsOfDocument
      description: Returns a list of all attachments that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/ContentAuthorFilter"
      - "$ref": "#/parameters/ContentVersionFilter"
      - "$ref": "#/parameters/RemarksFilter"
      - "$ref": "#/parameters/ContentDateFilter"
      - "$ref": "#/parameters/ContentDateFromFilter"
      - "$ref": "#/parameters/ContentDateToFilter"
      - "$ref": "#/parameters/FileNameFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AttachmentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/bill_of_materials":
    get:
      summary: Get all bill of materials of one document
      operationId: getBillOfMaterialsOfDocument
      description: Returns a list of all bill of materials that are available in your
        scope. You can apply query parameters in the request to get a filtered list.
        If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/AuthorFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/BillOfMaterialsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/categories":
    get:
      summary: Get all categories of one document
      operationId: getCategoriesOfDocument
      description: |-
        Returns a list of all categories that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, classification, categories, categories.parent, categories.tenant, categories.standards, attachments```
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/StandardIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentCategoriesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
      - DocumentCategory
    post:
      summary: Add categories to a document
      operationId: addCategoriesToDocument
      description: Add one or more categories to a document.
      parameters:
      - name: document_id
        in: path
        description: Id of the document to which the categories will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/CategoryIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
    patch:
      summary: Replace the categories of a document
      operationId: replaceCategoriesOfDocument
      description: Replaces all categories belonging to a document. You can send a
        list of resources that will replace all previous values.
      parameters:
      - name: document_id
        in: path
        description: Id of the document of which the categories will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/CategoryIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
    delete:
      summary: Remove categories from a document
      operationId: removeCategoriesFromDocument
      description: Remove one or more categories from a document.
      parameters:
      - name: document_id
        in: path
        description: Id of the document from which the categories will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/CategoryIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/categories-options":
    get:
      summary: Get all possible categories for the specified document
      operationId: getCategoriesOptionsOfDocument
      description: |-
        Returns a list of all possible categories for the specific document.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentCategoriesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
      - DocumentCategory
  "/documents/{document_id}/classification":
    get:
      summary: Get the classification of a specific document
      operationId: getDocumentIdClassification
      description: |-
        Returns the classification of the document.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: document_id
        in: path
        description: Id of the specified document
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentClassificationResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
      - DocumentClassification
  "/documents/{document_id}/classification-options":
    get:
      summary: Get all possible classifications for the specified document
      operationId: getDocumentClassificationsOptions
      description: |-
        Returns a list of all possible document classifications for the specified
        document.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: document_id
        in: path
        description: Id of the specified document
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: document_classifications
            type: object
            properties:
              document_classifications:
                type: array
                items:
                  "$ref": "#/definitions/DocumentClassificationResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
      - DocumentClassification
  "/documents/{document_id}/deliveries":
    get:
      summary: Get all deliveries of one document
      operationId: getDeliveriesOfDocument
      description: Returns a list of all deliveries that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateOfShipmentFilter"
      - "$ref": "#/parameters/DateOfShipmentFromFilter"
      - "$ref": "#/parameters/DateOfShipmentToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DeliveriesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{id}/download":
    get:
      summary: Download multiple attachments of a document
      operationId: downloadDocument
      description: Download attached files of a document. If there are multiple attachments
        the files will be zipped. If number of attachments exceeds 25, only the first
        25 attachments will be zipped. Links will be ignored. Content-Transfer-Encoding
        header is set to binary
      parameters:
      - name: id
        in: path
        description: Id of the document to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AttachmentIDFilter"
      responses:
        '200':
          description: A file download stream
          headers:
            Content-Type:
              type: string
              description: the original files mime-type is used here (eg. application/pdf)
                or application/zip
            Content-Disposition:
              type: string
              description: contains the original filename (generated form document
                name)
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/events":
    get:
      summary: Get all events of one document
      operationId: getEventsOfDocument
      description: Returns a list of all events that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StartDatetimeFilter"
      - "$ref": "#/parameters/StartDatetimeFromFilter"
      - "$ref": "#/parameters/StartDatetimeToFilter"
      - "$ref": "#/parameters/EndDatetimeFilter"
      - "$ref": "#/parameters/EndDatetimeFromFilter"
      - "$ref": "#/parameters/EndDatetimeToFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EventsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/instrumentations":
    get:
      summary: Get all instrumentations of one document
      operationId: getInstrumentationsOfDocument
      description: |-
        Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```specifications, specifications[key1,key2], pictures, tenant, parent, status, type```
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/TagFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/CriticalityFilter"
      - "$ref": "#/parameters/AccessibilityFilter"
      - "$ref": "#/parameters/InstrumentationAssetStatusIDFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/InstrumentationsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/nodes":
    get:
      summary: Get all nodes of one document
      operationId: getNodesOfDocument
      description: Returns a list of all nodes that are available in your scope. You
        can apply query parameters in the request to get a filtered list. If the query
        has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/HiddenNodeFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/NodesOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/NodesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/products":
    get:
      summary: Get all products of one document
      operationId: getProductsOfDocument
      description: Returns a list of all products that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/ProductCodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/purchase_orders":
    get:
      summary: Get all purchase orders of one document
      operationId: getPurchaseOrdersOfDocument
      description: Returns a list of all purchase orders that are available in your
        scope. You can apply query parameters in the request to get a filtered list.
        If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/QuotationIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PurchaseOrdersResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/quotations":
    get:
      summary: Get all quotations of one document
      operationId: getQuotationsOfDocument
      description: Returns a list of all quotations that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/RequestForQuotationIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/QuotationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/request_for_quotations":
    get:
      summary: Get all request for quotations of one document
      operationId: getRequestForQuotationsOfDocument
      description: Returns a list of all request for quotations that are available
        in your scope. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/DocumentPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/AuthorFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/RequestForQuotationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
  "/documents/{document_id}/status":
    get:
      summary: Get the status of a specific document
      operationId: getDocumentIdStatus
      description: |-
        Returns the status of the document.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: document_id
        in: path
        description: Id of the specified document
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
      - DocumentStatus
  "/documents/{document_id}/status-options":
    get:
      summary: Get all possible statuses for the specified document
      operationId: getDocumentStatusesOptions
      description: |-
        Returns a list of all possible document statuses for the specified
        document. You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: document_id
        in: path
        description: Id of the specified document
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: document_statuses
            type: object
            properties:
              document_statuses:
                type: array
                items:
                  "$ref": "#/definitions/DocumentStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Document
      - DocumentStatus
  "/events":
    get:
      summary: Get a range of events
      operationId: getEvents
      description: |-
        Returns a list of events. If the query has no matches, the response is an empty list.

        Possible include values: ```assets, instrumentations, nodes, status, type```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StartDatetimeFilter"
      - "$ref": "#/parameters/StartDatetimeFromFilter"
      - "$ref": "#/parameters/StartDatetimeToFilter"
      - "$ref": "#/parameters/EndDatetimeFilter"
      - "$ref": "#/parameters/EndDatetimeFromFilter"
      - "$ref": "#/parameters/EndDatetimeToFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/AssetIDInEventFilter"
      - "$ref": "#/parameters/InstrumentationIDInEventFilter"
      - "$ref": "#/parameters/NodeIDInEventFilter"
      - "$ref": "#/parameters/EventOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EventsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
    post:
      summary: Create a new event
      operationId: createEvent
      description: Event must have a name, status, type and at least one asset or
        an instrumentation
      parameters:
      - name: body
        in: body
        description: Event object that needs to be created.
        required: true
        schema:
          "$ref": "#/definitions/EventRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/EventResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
  "/events/{id}":
    get:
      summary: Get a single event
      operationId: getEventById
      description: |-
        Get a specific event identified by the id in the URL.

        Possible include values: ```assets, instrumentations, nodes, status, type```
      parameters:
      - name: id
        in: path
        description: Id of the event to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EventResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
    patch:
      summary: Update an event
      operationId: updateEvent
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the event to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/EventRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
    delete:
      summary: Delete an event
      operationId: deleteEvent
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the event to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
  "/events/{event_id}/assets":
    get:
      summary: Get all assets of one event
      operationId: getAssetsOfEvent
      description: |-
        Returns a list of all assets of an event that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant,
                                    product.manufacturer.tenant, status.tenant, instrumentations ```
      parameters:
      - "$ref": "#/parameters/EventPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/SerialNumberFilter"
      - "$ref": "#/parameters/ProductIDFilter"
      - "$ref": "#/parameters/ProductCategoryIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StatusCodeFilter"
      - "$ref": "#/parameters/ProductionDateFilter"
      - "$ref": "#/parameters/ProductionDateFromFilter"
      - "$ref": "#/parameters/ProductionDateToFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/CreatedAtFilter"
      - "$ref": "#/parameters/CreatedAtFromFilter"
      - "$ref": "#/parameters/CreatedAtToFilter"
      - "$ref": "#/parameters/UpdatedAtFilter"
      - "$ref": "#/parameters/UpdatedAtFromFilter"
      - "$ref": "#/parameters/UpdatedAtToFilter"
      - "$ref": "#/parameters/OwnershipClaimedFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/AssetsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
    delete:
      summary: Remove assets from an event
      operationId: removeAssetsFromEvent
      description: Remove one or more assets from an event. If the event has no more
        related assets or instrumentations, the event will be deleted
      parameters:
      - name: event_id
        in: path
        description: Id of the event where the asset will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
  "/events/{event_id}/documents":
    get:
      summary: Get all documents of an event
      operationId: getDocumentsOfEvent
      description: |-
        Returns a list of documents. If the query has no matches, the response is an empty list.

        Possible include values: ```status, tenant, classification, categories, categories.parent, categories.standards, attachments```
      parameters:
      - "$ref": "#/parameters/EventPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
    post:
      summary: Add documents to an event
      operationId: addDocumentsToEvent
      description: Add one or more documents to an event.
      parameters:
      - name: event_id
        in: path
        description: Id of the asset to which the documents will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
    patch:
      summary: Replace the documents of an event
      operationId: replaceDocumentsOfEvent
      description: Replaces all documents belonging to an event. You can send a list
        of resources that will replace all previous values.
      parameters:
      - name: event_id
        in: path
        description: Id of the event of which the documents will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
    delete:
      summary: Remove documents from an event
      operationId: removeDocumentsFromEvent
      description: Remove one or more documents from an event.
      parameters:
      - name: event_id
        in: path
        description: Id of the event from which the documents will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
  "/events/{event_id}/instrumentations":
    get:
      summary: Get all instrumentations of one event
      operationId: getInstrumentationsOfEvent
      description: |-
        Returns a list of all instrumentations of an event that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```specifications, specifications[key1,key2], pictures, tenant, parent, status, type, type.tenant, type.parent```
      parameters:
      - "$ref": "#/parameters/EventPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/TagFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/CriticalityFilter"
      - "$ref": "#/parameters/AccessibilityFilter"
      - "$ref": "#/parameters/NodeIDNullFilter"
      - "$ref": "#/parameters/InstrumentationAssetStatusIDFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/InstrumentationsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
    delete:
      summary: Remove instrumentations from an event
      operationId: removeInstrumentationsFromEvent
      description: Remove one or more instrumentations from an event. If the event
        has no more related instrumentations or assets, the event will be deleted
      parameters:
      - name: event_id
        in: path
        description: Id of the event where the instrumentation will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
  "/events/{event_id}/nodes":
    get:
      summary: Get all nodes of one event
      operationId: getNodesOfEvent
      description: |-
        Returns a list of all nodes of an event that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```specifications, specifications[key1,key2], pictures, tenant, parent, status, type, type.tenant, type.parent instrumentations```
      parameters:
      - "$ref": "#/parameters/EventPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/InstrumentationsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/NodesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
    delete:
      summary: Remove nodes from an event
      operationId: removeNodesFromEvent
      description: Remove one or more nodes from an event. If the event has no more
        related nodes, instrumentations or assets, the event will be deleted
      parameters:
      - name: event_id
        in: path
        description: Id of the event where the node will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/NodeIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
  "/events/{event_id}/specifications":
    get:
      summary: Get specifications of an event
      operationId: getSpecificationsOfEvent
      description: Returns the specification of an object in your accessible scope.
        If no specifications are defined, this is just an empty object. Specification
        must have the form below.
      parameters:
      - name: event_id
        in: path
        description: Id of the specified event
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationsResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Specification
    patch:
      summary: Update specifications of an event
      operationId: updateSpecificationsOfEvent
      description: Update the specification object of an event in your accessible
        scope. To add specifications, just add the key and set the value object with
        value, unit and source_timestamp. To mark an existing specification to be
        unknown, the value could be set to null. To delete keys, use the delete method.
        Multiple specification objects can be sent in the same request. Keys inside
        a specification are unique and can only be added once. Keys can only consist
        of a-z A-Z 0-9 . - _ all uppercase A-Z are converted to lower-case a-z. For
        a key that is send multiple times in the request body, only the last key-value
        is saved.
      parameters:
      - name: event_id
        in: path
        description: Id of the specified event
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications objects to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Specification
    delete:
      summary: Delete specifications of an event
      operationId: removeSpecificationsFromEvent
      description: The specification keys in the body will be removed of the object
        in your accessible scope. Multiple specification keys can be sent in the same
        request. If a key does not exist it will be ignored.
      parameters:
      - name: event_id
        in: path
        description: Id of the specified event
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Array of keys to delete from specifications
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsDelete"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Specification
  "/events/{event_id}/specifications/rename":
    patch:
      summary: Rename a specification key
      operationId: renameSpecificationsOfEvent
      description: Rename one specification key of an event in your accessible scope.
        The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted
        to lower-case.
      parameters:
      - name: event_id
        in: path
        description: Id of the specified node
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications object to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRename"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Specification
  "/events/{event_id}/status":
    get:
      summary: Get the status of a specific event
      operationId: getEventIdStatus
      description: |-
        Returns the status of the event.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: event_id
        in: path
        description: Id of the specified event
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EventStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - EventStatus
  "/events/{event_id}/status-options":
    get:
      summary: Get all possible statuses for the specified event
      operationId: getEventStatusesOptions
      description: |-
        Returns a list of all possible event statuses for the specified event.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: event_id
        in: path
        description: Id of the specified event
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: event_statuses
            type: object
            properties:
              event_statuses:
                type: array
                items:
                  "$ref": "#/definitions/EventStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - EventStatus
  "/events/{event_id}/type":
    get:
      summary: Get the type of a specific event
      operationId: getEventIdType
      description: |-
        Returns the type of the event.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: event_id
        in: path
        description: Id of the specified event
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EventTypeResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - EventType
  "/events/{event_id}/type-options":
    get:
      summary: Get all possible types for the specified event
      operationId: getEventTypeesOptions
      description: |-
        Returns a list of all possible event types for the specified event.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: event_id
        in: path
        description: Id of the specified event
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: event_types
            type: object
            properties:
              event_types:
                type: array
                items:
                  "$ref": "#/definitions/EventTypeResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - EventType
  "/health_conditions":
    get:
      summary: Get a range of health conditions
      operationId: getHealthConditions
      description: |-
        Returns a list of all health conditions. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include value: ``asset_status,tenant,causes,causes.remedies``
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AssetStatusIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DiagnosisCodeFilter"
      - "$ref": "#/parameters/DeviceIdentFilter"
      - "$ref": "#/parameters/ProductIdentifierFilter"
      - "$ref": "#/parameters/ProtocolFilter"
      - "$ref": "#/parameters/ProtocolVersionFilter"
      - "$ref": "#/parameters/HiddenNodeFilter"
      - "$ref": "#/parameters/HealthConditionsOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          headers:
            Content-Language:
              description: language of the name and description fields, can be a list
                of languages
              type: string
          schema:
            "$ref": "#/definitions/HealthConditionsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthCondition
    post:
      summary: Create a new health condition
      operationId: createHealthCondition
      description: Health condition must have a diagnosis_code, a protocol and a device
        ident
      parameters:
      - in: body
        name: Body
        description: Health Condition to create.
        required: true
        schema:
          "$ref": "#/definitions/HealthConditionRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/HealthConditionResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthCondition
  "/health_conditions/{id}":
    get:
      summary: Get a single health condition
      operationId: getHealthConditionById
      description: |-
        Get a specific health condition identified by the id in the URL.
        Possible include value: ``asset_status,tenant,causes,causes.remedies``
      parameters:
      - name: id
        in: path
        description: Id of health condition to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          headers:
            Content-Language:
              description: language of the name and description fields
              type: string
          schema:
            "$ref": "#/definitions/HealthConditionResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthCondition
    patch:
      summary: Update a health condition
      operationId: updateHealthCondition
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the health condition to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/HealthConditionRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthCondition
    delete:
      summary: Delete a health condition
      operationId: deleteHealthCondition
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the health condition to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthCondition
  "/instrumentations":
    get:
      summary: Get a range of instrumentations
      operationId: getInstrumentations
      description: "Returns a list of instrumentations in your accessible scope. If
        the query has no matches, the response is an empty list.\n\nPossible include
        values: ```assets, assets.status, assets.specifications, nodes, nodes.type,
        specifications, specifications[key1,key2], pictures, tenant, parent, status,
        worst_asset_status, type, type.tenant, type.parent, values, values.unit, values_in_preferred_units,
        values_in_preferred_units.unit``` "
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/TagFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/CriticalityFilter"
      - "$ref": "#/parameters/AccessibilityFilter"
      - "$ref": "#/parameters/NodeIDwithPlusFilter"
      - "$ref": "#/parameters/AssetIDNullFilter"
      - "$ref": "#/parameters/SystemIDNullFilter"
      - "$ref": "#/parameters/InstrumentationAssetStatusIDFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/InstrumentationsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    post:
      summary: Create a new instrumentation
      operationId: createInstrumentation
      description: Create a new instrumentation. The tag of the given instrumentation
        needs to be unique within its parent. The instrumentation will not be created
        when this constraint is violated.  To assign a parent instrumentation the
        user needs `can_permit` permission on the parent.
      parameters:
      - name: Body
        in: body
        description: Instrumentation object that needs to be created. tag, instrumentation
          status and instrumentation type are required
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/InstrumentationResponse"
          headers:
            Location:
              description: url of the created instrumentation
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{id}":
    get:
      summary: Get a single instrumentation
      operationId: getInstrumentationById
      description: "Get a specific instrumentation in your accessible scope, identified
        by the id in the URL.\n\nPossible include values: ```assets, assets.status,
        assets.specifications, nodes, nodes.type, specifications, specifications[key1,key2],
        pictures, tenant, parent, status, worst_asset_status, type, type.parent, type.tenant,
        values, values.unit, values.asset, values_in_preferred_units, values_in_preferred_units.unit,
        values_in_preferred_units.asset ``` "
      parameters:
      - name: id
        in: path
        description: Id of the instrumentation to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    patch:
      summary: Update an instrumentation
      operationId: updateInstrumentation
      description: Update accessible parameters of the requested resource in your
        accessible scope. To assign a parent instrumentation the user needs `can_permit`
        permission on the parent and on the current instrumentation.
      parameters:
      - name: id
        in: path
        description: Id of the instrumentation to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    delete:
      summary: Delete an instrumentation
      operationId: deleteInstrumentation
      description: Delete a specific resource in your accessible scope, identified
        by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the instrumentation to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{instrumentation_id}/assets":
    get:
      summary: Get all assets of one instrumentation
      operationId: getAssetsOfInstrumentation
      description: |-
        Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant,
                                    product.manufacturer.tenant, status.tenant, instrumentations ```
      parameters:
      - "$ref": "#/parameters/InstrumentationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/SerialNumberFilter"
      - "$ref": "#/parameters/ProductIDFilter"
      - "$ref": "#/parameters/ProductCategoryIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StatusCodeFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/ProductionDateFilter"
      - "$ref": "#/parameters/ProductionDateFromFilter"
      - "$ref": "#/parameters/ProductionDateToFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/NodeIDNullFilter"
      - "$ref": "#/parameters/CreatedAtFilter"
      - "$ref": "#/parameters/CreatedAtFromFilter"
      - "$ref": "#/parameters/CreatedAtToFilter"
      - "$ref": "#/parameters/UpdatedAtFilter"
      - "$ref": "#/parameters/UpdatedAtFromFilter"
      - "$ref": "#/parameters/UpdatedAtToFilter"
      - "$ref": "#/parameters/OwnershipClaimedFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/AssetsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    post:
      summary: Add assets to an instrumentation
      operationId: addAssetsToInstrumentation
      description: Add one or more assets to an instrumentation. This action requires
        `can_permit` permission on the instrumentation and on the asset.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation to which the assets will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    patch:
      summary: Replace the assets of an instrumentation
      operationId: replaceAssetsOfInstrumentation
      description: Replaces all assets belonging to an instrumentation. You can send
        a list of resources that will replace all previous values. This action requires
        `can_permit` permission on the instrumentation and on the asset.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation of which the assets will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    delete:
      summary: Remove assets from an instrumentation
      operationId: removeAssetsFromInstrumentation
      description: Remove one or more assets from an instrumentation in your accessible
        scope. This action requires `can_permit` permission on the instrumentation
        and on the asset.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation from which the assets will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{instrumentation_id}/assets/history":
    get:
      summary: Get all assets an instrumentation was assigned to
      operationId: getAssetsOfInstrumentationHistory
      description: Returns a list of all assets history available in your scope which
        have been assigned to the specified instrumentation. You can apply query parameters
        in the request to get a filtered list. If the query has no matches, the response
        will show an empty array.
      parameters:
      - "$ref": "#/parameters/InstrumentationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/AssetIDFilter"
      - "$ref": "#/parameters/HistoryEventFilter"
      - "$ref": "#/parameters/EventDateTimeFromFilter"
      - "$ref": "#/parameters/EventDateTimeToFilter"
      - "$ref": "#/parameters/AssetsHistoryOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationAssetsHistoryResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{instrumentation_id}/bill_of_materials":
    get:
      summary: Get all bill of materials of an instrumentation
      operationId: getBillOfMaterialsOfInstrumentation
      description: Returns a list of all bill of materials that are available in your
        scope. You can apply query parameters in the request to get a filtered list.
        If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/InstrumentationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/AuthorFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/BillOfMaterialsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    post:
      summary: Add bill of materials to an instrumentation
      operationId: addBillOfMaterialsToInstrumentation
      description: Add one or more bill of materials to an instrumentation.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation to which the bill of materials will
          be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/BillOfMaterialIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    patch:
      summary: Replace the bill of materials of an instrumentation
      operationId: replaceBillOfMaterialsOfInstrumentation
      description: Replaces all bill of materials belonging to an instrumentation.
        You can send a list of resources that will replace all previous values.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation of which the bill of materials will
          be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/BillOfMaterialIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    delete:
      summary: Remove bill of materials from an instrumentation
      operationId: removeBillOfMaterialsFromInstrumentation
      description: Remove one or more bill of materials from an instrumentation in
        your accessible scope.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation from which the bill of materials will
          be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/BillOfMaterialIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{instrumentation_id}/documents":
    get:
      summary: Get all documents of an instrumentation
      operationId: getDocumentsOfInstrumentation
      description: |-
        Returns a list of documents. If the query has no matches, the response is an empty list.

        Possible include values: ```status, tenant, classification, categories, categories.parent, categories.standards, attachments```
      parameters:
      - "$ref": "#/parameters/InstrumentationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    post:
      summary: Add documents to an instrumentation
      operationId: addDocumentsToInstrumentation
      description: Add one or more documents to an instrumentation. This action requires
        `can_update` permission on the instrumentation and `can_read` permission on
        the document.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation to which the documents will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    patch:
      summary: Replace the documents of an instrumentation
      operationId: replaceDocumentsOfInstrumentation
      description: Replaces all documents belonging to an instrumentation. You can
        send a list of resources that will replace all previous values. This action
        requires `can_update` permission on the instrumentation and `can_read` permission
        on the document.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation of which the documents will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    delete:
      summary: Remove documents from an instrumentation
      operationId: removeDocumentsFromInstrumentation
      description: Remove one or more documents from an instrumentation. This action
        requires `can_update` permission on the instrumentation and `can_read` permission
        on the document.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation from which the documents will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{instrumentation_id}/nodes":
    get:
      summary: Get all nodes of one Instrumentation
      operationId: getNodesOfInstrumentation
      description: Returns a list of all nodes that are available in your scope. You
        can apply query parameters in the request to get a filtered list. If the query
        has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/InstrumentationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/HiddenNodeFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/NodesOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/NodesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    post:
      summary: Add nodes to an instrumentation
      operationId: addNodesToInstrumentation
      description: Add one or more nodes to an instrumentation in your accessible
        scope. This action requires `can_permit` permission on the instrumentation
        and on the node.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation to which the nodes will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/NodeIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    patch:
      summary: Replace the nodes of an instrumentation
      operationId: replaceNodesOfInstrumentation
      description: Replaces all nodes belonging to an instrumentation in your accessible
        scope. You can send a list of resources that will replace all previous values.
        This action requires `can_permit` permission on the instrumentation and on
        the node.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation of which the nodes will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/NodeIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    delete:
      summary: Remove nodes from an instrumentation
      operationId: removeNodesFromInstrumentation
      description: Remove one or more nodes from an instrumentation in your accessible
        scope. This action requires `can_permit` permission on the instrumentation
        and on the node.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation from which the nodes will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/NodeIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{instrumentation_id}/notifications":
    get:
      summary: Get all notifications of an Instrumentation
      operationId: getNotificationsOfInstrumentation
      description: Returns a list of all notifications that are available in your
        scope. You can apply query parameters in the request to get a filtered list.
        If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/InstrumentationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/EnabledFilter"
      - "$ref": "#/parameters/EventTypeFilter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ResourceNotificationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    post:
      summary: Add a notification to an instrumentation
      operationId: addNotificationToInstrumentation
      description: 'Add a notifications to an instrumentation in your accessible scope.
        This action requires `can_update` permission on the instrumentation. Depending
        on the event_type, different additional parameters are needed in the request.
        For the event_type ```health_status``` at least on of the following parameters  are
        required: ```diagnosis_codes``` (array of strings) and/or ```asset_statuses```  (array
        of strings of asset status codes) '
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation to which the notifications will be
          added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object body of the notification to add.
        required: true
        schema:
          "$ref": "#/definitions/ResourceNotificationRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{instrumentation_id}/notifications/{id}":
    get:
      summary: Get a single notification of an Instrumentation
      description: Get a specific notification of an Instrumentation identified by
        the id in the URL.
      operationId: getNotificationOfInstrumentation
      parameters:
      - "$ref": "#/parameters/InstrumentationPathID"
      - name: id
        in: path
        description: Id of the notification
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ResourceNotificationResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    patch:
      summary: Update a notification of an instrumentation
      operationId: replaceNotificationsOfInstrumentation
      description: 'Updates a notification belonging to an instrumentation in your
        accessible scope. This action requires `can_update` permission on the instrumentation.
        Depending on the event_type, different additional parameters are needed in
        the request. For the event_type ```health_status``` at least on of the following
        parameters  are required: ```diagnosis_codes``` (array of strings) and/or
        ```asset_statuses```  (array of strings) '
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation of which the notifications will be
          updated
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the notification to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object body of the notification that will be updated
        required: true
        schema:
          "$ref": "#/definitions/ResourceNotificationRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    delete:
      summary: Remove a notification from an instrumentation
      operationId: removeNotificationsFromInstrumentation
      description: Remove a notification from an instrumentation in your accessible
        scope. This action requires `can_update` permission on the instrumentation.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation from which the notification will be
          removed
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the notification to be removed
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{id}/pictures":
    get:
      summary: Get instrumentation pictures
      operationId: getInstrumentationPictures
      description: Get all pictures of an instrumentation.
      parameters:
      - name: id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: width
        in: query
        description: filter by width
        type: integer
      - name: width_from
        in: query
        description: filter by width_from
        type: integer
      - name: width_to
        in: query
        description: filter by width_to
        type: integer
      - name: height
        in: query
        description: filter by height
        type: integer
      - name: height_from
        in: query
        description: filter by height_from
        type: integer
      - name: height_to
        in: query
        description: filter by height_to
        type: integer
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PicturesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    post:
      summary: Upload an instrumentation picture
      operationId: UploadInstrumentationPicture
      description: |-
        Upload a new instrumentation picture. Checks the file-storage quota. Allowed content-types are
        - image/gif
        - image/jpg
        - image/jpeg
        - image/png
      consumes:
      - multipart/form-data
      parameters:
      - name: id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: image
        in: formData
        description: the image to upload (up to 1 MB)
        required: true
        type: file
      responses:
        '201':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PictureResponse"
          headers:
            Location:
              description: Url of the created instrumentation picture
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{instrumentation_id}/pictures/{id}":
    get:
      summary: Get an instrumentation picture
      operationId: getInstrumentationPicture
      description: Get a single picture of an instrumentation.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the instrumentation picture
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PictureResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    patch:
      summary: Update an instrumentation picture
      operationId: updateInstrumentationPicture
      description: |-
        Upload a new instrumentation picture. Check the file-storage quota. Allowed content-types are
        - image/gif
        - image/jpg
        - image/jpeg
        - image/png
      consumes:
      - multipart/form-data
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the instrumentation picture
        type: integer
        format: int64
        required: true
      - name: image
        in: formData
        description: the image to upload (up to 1 MB)
        required: true
        type: file
      responses:
        '204':
          description: The picture was updated successfully.
          schema:
            "$ref": "#/definitions/PictureResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
    delete:
      summary: Delete an instrumentation picture
      operationId: deleteInstrumentationPicture
      description: Delete an instrumentation picture.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the instrumentation picture
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{instrumentation_id}/pictures/{id}/download":
    get:
      summary: Download an instrumentation picture
      operationId: downloadInstrumentationPicture
      description: Download an instrumentation picture.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the instrumentation picture
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: A file download stream
          headers:
            Content-Type:
              type: string
              description: the original files mime-type is used here (eg. image/jpeg)
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{id}/pictures/links":
    post:
      summary: Add a link as instrumentation picture
      operationId: addInstrumentationPictureLink
      description: Add an external resource as instrumentation picture.
      parameters:
      - name: id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Picture link object to be created
        required: true
        schema:
          "$ref": "#/definitions/PictureLinkRequest"
      responses:
        '201':
          description: The picture link was successfully created. The response body
            contains its representation
          schema:
            "$ref": "#/definitions/PictureResponse"
          headers:
            Location:
              description: Url of the created instrumentation picture
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{instrumentation_id}/pictures/links/{id}":
    patch:
      summary: Update an instrumentation picture link
      operationId: updateInstrumentationPictureLink
      description: Update an instrumentation picture link.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the instrumentation picture
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Picture link object to be updated
        required: true
        schema:
          "$ref": "#/definitions/PictureLinkRequest"
      responses:
        '204':
          description: The picture link was updated successfully.
          schema:
            "$ref": "#/definitions/PictureResponse"
          headers:
            Location:
              description: Url of the created instrumentation picture link
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{instrumentation_id}/specifications":
    get:
      summary: Get specifications of an instrumentation
      operationId: getSpecificationsOfInstrumentation
      description: Returns the specification of an object in your accessible scope.
        If no specifications are defined, this is just an empty object. Specification
        must have the form below.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the specified instrumentation
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      - name: ui_visible
        in: query
        type: boolean
        required: false
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationsUIVisibleResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - Specification
    patch:
      summary: Update specifications of an instrumentation
      operationId: updateSpecificationsOfInstrumentation
      description: Update the specification object of an instrumentation in your accessible
        scope. To add specifications, just add the key and set the value object with
        value, unit and source_timestamp. To mark an existing specification to be
        unknown, the value could be set to null. To delete keys, use the delete method.
        Multiple specification objects can be sent in the same request. Keys inside
        a specification are unique and can only be added once. Keys can only consist
        of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z.
        For a key that is send multiple times in the request body, only the last key-value
        is saved.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the specified instrumentation
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications objects to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsUIVisibleRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - Specification
    delete:
      summary: Delete specifications of an instrumentation
      operationId: removeSpecificationsFromInstrumentation
      description: The specification keys in the body will be removed of the object
        in your accessible scope. Multiple specification keys can be sent in the same
        request. If a key does not exist it will be ignored.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the specified instrumentation
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Array of keys to delete from specifications
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsDelete"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - Specification
  "/instrumentations/{instrumentation_id}/specifications/{key}/history":
    get:
      summary: Get the history of one specification attribute of an instrumentation.
      operationId: getSpecificationHistoryOfInstrumentation
      description: This might be useful for history data. The response contains a
        collection of historic values and when they`ve been updated. Since this can
        be a lot of data the service uses pagination. The history can be filtered
        by using a date range of source_timestamp and/or updated_at. Please consider
        that source_timestamp is not required and update on the attribute without
        giving a source_timestamp wont be included in the resulting response
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the specified instrumentation
        type: integer
        format: int64
        required: true
      - name: key
        in: path
        type: string
        required: true
        description: the exact key
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - name: source_timestamp_from
        in: query
        description: source_timestamp filter from. Starting with + will include the
          previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: source_timestamp_to
        in: query
        description: source_timestamp filter to. Ending with + will include the next
          value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: updated_at_from
        in: query
        description: updated_at filter from. Starting with + will include the previous
          value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: updated_at_to
        in: query
        description: updated_at filter to. Ending with + will include the next value
          as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - "$ref": "#/parameters/SpecificationHistoryOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationHistoryResponse"
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - Specification
  "/instrumentations/{instrumentation_id}/specifications/rename":
    patch:
      summary: Rename a specification key
      operationId: renameSpecificationsOfInstrumentation
      description: Rename one specification key of an instrumentation in your accessible
        scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will
        be converted to lower-case.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the specified instrumentation
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications object to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRename"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - Specification
  "/instrumentations/{instrumentation_id}/status":
    get:
      summary: Get the status of the specific instrumentation
      operationId: getInstrumentationIdStatus
      description: |-
        Returns the status of the instrumentation. Needed if only permission on instrumentation but not on tenant.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - InstrumentationStatus
  "/instrumentations/{instrumentation_id}/status-options":
    get:
      summary: Get all possible statuses of the specified instrumentation
      operationId: getInstrumentationStatusesOptions
      description: |-
        Returns a list of all possible instrumentation statuses for the specified instrument.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: instrumentation_statuses
            type: object
            properties:
              instrumentation_statuses:
                type: array
                items:
                  "$ref": "#/definitions/InstrumentationStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - InstrumentationStatus
  "/instrumentations/{instrumentation_id}/systems":
    get:
      summary: Get all systems of one instrumentation
      operationId: getSystemsOfInstrumentation
      description: |-
        Returns a list of all systems that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```pictures, specifications, specifications[key1,key2], tenant, parent, status, type, type.tenant, type.parent ```
      parameters:
      - "$ref": "#/parameters/InstrumentationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/SystemsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SystemsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/{instrumentation_id}/thresholds":
    get:
      summary: Get instrumentation thresholds
      operationId: getInstrumentationThresholds
      description: Get all thresholds of an instrumentation.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        description: filter by key
        type: string
      - name: threshold_type
        in: query
        description: filter by type
        type: string
      - "$ref": "#/parameters/ThresholdsOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ThresholdsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - Threshold
    post:
      summary: Create an instrumentation threshold
      operationId: CreateInstrumentationThreshold
      description: |-
        Create a new instrumentation threshold.
        This action requires ```can_update``` permission on the instrumentation.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the specified instrumentation
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object body that will be created.
        required: true
        schema:
          "$ref": "#/definitions/ThresholdRequest"
      responses:
        '201':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ThresholdResponse"
          headers:
            Location:
              description: Url of the created instrumentation threshold
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - Threshold
  "/instrumentations/{instrumentation_id}/thresholds/{id}":
    get:
      summary: Get an instrumentation threshold
      operationId: getInstrumentationThreshold
      description: Get a single threshold of an instrumentation.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the instrumentation threshold
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ThresholdResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - Threshold
    patch:
      summary: Update an instrumentation threshold
      operationId: updateInstrumentationThreshold
      description: Replaces the threshold belonging to an instrumentation. This action
        requires `can_update` permission on the instrumentation.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the instrumentation threshold
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object body that will be updated.
        required: true
        schema:
          "$ref": "#/definitions/ThresholdRequest"
      responses:
        '204':
          description: The threshold was updated successfully.
          schema:
            "$ref": "#/definitions/ThresholdResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - Threshold
    delete:
      summary: Delete an instrumentation threshold.
      operationId: deleteInstrumentationThreshold
      description: Delete an instrumentation threshold.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the instrumentation threshold
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - Threshold
  "/instrumentations/{instrumentation_id}/type":
    get:
      summary: Get the type of the specific instrumentation
      operationId: getInstrumentationIdType
      description: |-
        Returns the type of the instrumentation. Needed if only permission on instrumentation but not on tenant.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```parent```
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationTypeResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - InstrumentationType
  "/instrumentations/{instrumentation_id}/type-options":
    get:
      summary: Get all possible types of the specified instrumentation
      operationId: getInstrumentationTypesOptions
      description: |-
        Returns a list of all possible instrumentation types for the specified instrument.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: instrumentation_types
            type: object
            properties:
              instrumentation_types:
                type: array
                items:
                  "$ref": "#/definitions/InstrumentationTypeResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - InstrumentationType
  "/instrumentations/{instrumentation_id}/value_objects/{key}":
    get:
      summary: Get instrumentation value objects for a specific key.
      operationId: getInstrumentationValueObjectsForKey
      description: |-
        Returns a collection of the history value objects of the value objects for the specified key.
        For a selected result of the value objects the filter parameters selector and interval are mandatory.
        With the filter parameters from, to or datetime, it is possible to receive the history of a defined time period.
        Possible include values: ```asset```
      parameters:
      - "$ref": "#/parameters/InstrumentationPathID"
      - "$ref": "#/parameters/InstrumentationValuesKeyPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AssetValueFromFilter"
      - "$ref": "#/parameters/AssetValueToFilter"
      - "$ref": "#/parameters/AssetValueDateTimeFilter"
      - "$ref": "#/parameters/SelectorFilter"
      - "$ref": "#/parameters/SelectorIntervalFilter"
      - "$ref": "#/parameters/AssetValuesOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetKeyValueObjectsResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/instrumentations/search":
    post:
      summary: Returns a range of instrumentations, same as GET /instrumentations,
        but allows instead URI params uses body
      operationId: postInstrumentationsSearch
      description: "Returns a list of instrumentations in your accessible scope. If
        the query has no matches, the response is an empty list.\n\nPossible include
        values: ```assets, assets.status, assets.specifications, nodes, nodes.type,
        specifications, specifications[key1,key2], pictures, tenant, parent, status,
        worst_asset_status, type, type.tenant, type.parent, values, values.unit, values_in_preferred_units,
        values_in_preferred_units.unit``` "
      parameters:
      - name: Body
        in: body
        description: JSON and same as params in GET /instrumentations.
        required: false
        schema:
          "$ref": "#/definitions/AssetIDFilter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
  "/nodes":
    get:
      summary: Get a range of nodes
      operationId: getNodes
      description: "Returns a list of nodes in your accessible scope. If the query
        has no matches, the response is an empty list.\n\nPossible include values:
        ```parent, tenant, type, type.parent, specifications, specifications[key1,key2],
        pictures, instrumentations, instrumentations.specifications, instrumentations.specifications[key1,key2],
        instrumentations.values, instrumentations.values.unit, instrumentations.values_in_preferred_units,
        instrumentations.values_in_preferred_units.unit, worst_asset_status```\nHidden
        nodes are not returned by default, if the hidden nodes should be included,
        add \"```hidden```\" to the include parameter "
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/NodesOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/NodesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    post:
      summary: Create a new node
      operationId: createNodes
      description: Create a new node. The name of the given node needs to be unique
        within its parent. The node will not be created when this constraint is violated.
        To assign a parent node the user needs `can_permit` permission on the parent.
      parameters:
      - name: Body
        in: body
        description: Object body that will be created. Name, node status and node
          type are required
        required: true
        schema:
          "$ref": "#/definitions/NodeRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/NodeResponse"
          headers:
            Location:
              description: url of the created node
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
  "/nodes/{id}":
    get:
      summary: Get a single node
      operationId: getNodesById
      description: "Get a specific node in your accessible scope, identified by the
        id in the URL.\n\nPossible include values: ```parent, tenant, type, specifications,
        specifications[key1,key2], pictures, instrumentations, instrumentations.specifications,
        instrumentations.specifications[key1,key2], instrumentations.values, instrumentations.values.unit,
        instrumentations.values_in_preferred_units, instrumentations.values_in_preferred_units.unit,
        worst_asset_status``` "
      parameters:
      - name: id
        in: path
        description: Id of the node to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/NodeResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    patch:
      summary: Update a node
      operationId: updateNode
      description: Update accessible parameters of the requested resource in your
        accessible scope. To assign a parent node the user needs `can_permit` permission
        on the parent and on the current node.
      parameters:
      - name: id
        in: path
        description: Id of the node to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/NodeRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    delete:
      summary: Delete a node
      operationId: deleteNode
      description: Delete a specific resource in your accessible scope, identified
        by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the node to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
  "/nodes/{node_id}/assets":
    get:
      summary: Get all assets of one node
      operationId: getAssetsOfNode
      description: |-
        Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant,
                                    product.manufacturer.tenant, status.tenant, instrumentations ```
      parameters:
      - "$ref": "#/parameters/NodePathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/SerialNumberFilter"
      - "$ref": "#/parameters/ProductIDFilter"
      - "$ref": "#/parameters/ProductCategoryIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StatusCodeFilter"
      - "$ref": "#/parameters/ProductionDateFilter"
      - "$ref": "#/parameters/ProductionDateFromFilter"
      - "$ref": "#/parameters/ProductionDateToFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/CreatedAtFilter"
      - "$ref": "#/parameters/CreatedAtFromFilter"
      - "$ref": "#/parameters/CreatedAtToFilter"
      - "$ref": "#/parameters/UpdatedAtFilter"
      - "$ref": "#/parameters/UpdatedAtFromFilter"
      - "$ref": "#/parameters/UpdatedAtToFilter"
      - "$ref": "#/parameters/OwnershipClaimedFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/AssetsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    post:
      summary: Add assets to a node
      operationId: addAssetsToNode
      description: Add one or more assets to a node. This action requires `can_permit`
        permission on the node and on the asset.
      parameters:
      - name: node_id
        in: path
        description: Id of the node to which the assets will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    patch:
      summary: Replace the assets of a node
      operationId: replaceAssetsOfNode
      description: Replaces all assets belonging to a node in your accessible scope.
        You can send a list of resources that will replace all previous values. This
        action requires `can_permit` permission on the node and on the asset.
      parameters:
      - name: node_id
        in: path
        description: Id of the node of which the assets will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    delete:
      summary: Remove assets from a node
      operationId: removeAssetsFromNode
      description: Remove one or more assets from a node in your accessible scope.
        This action requires `can_permit` permission on the node and on the asset.
      parameters:
      - name: node_id
        in: path
        description: Id of the node from which the assets will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
  "/nodes/{node_id}/documents":
    get:
      summary: Get all documents of a node
      operationId: getDocumentsOfNode
      description: |-
        Returns a list of documents. If the query has no matches, the response is an empty list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, classification, categories, categories.parent, categories.standards, attachments```
      parameters:
      - "$ref": "#/parameters/NodePathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    post:
      summary: Add documents to a node
      operationId: addDocumentsToNode
      description: Add one or more documents to a node. This action requires `can_update`
        permission on the node and `can_read` permission on the document.
      parameters:
      - name: node_id
        in: path
        description: Id of the node to which the documents will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    patch:
      summary: Replace the documents of a node
      operationId: replaceDocumentsOfNode
      description: Replaces all documents belonging to a node. You can send a list
        of resources that will replace all previous values. This action requires `can_update`
        permission on the node and `can_read` permission on the document.
      parameters:
      - name: node_id
        in: path
        description: Id of the node of which the documents will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    delete:
      summary: Remove documents from a node
      operationId: removeDocumentsFromNode
      description: Remove one or more documents from a node. This action requires
        `can_update` permission on the node and `can_read` permission on the document.
      parameters:
      - name: node_id
        in: path
        description: Id of the node from which the documents will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
  "/nodes/{node_id}/instrumentations":
    get:
      summary: Get all instrumentations of one node
      operationId: getInstrumentationsOfNode
      description: |-
        Returns a list of all instrumentations that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```specifications, specifications[key1,key2], pictures, tenant, parent, status, worst_asset_status, type```
      parameters:
      - "$ref": "#/parameters/NodePathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/TagFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/CriticalityFilter"
      - "$ref": "#/parameters/AccessibilityFilter"
      - "$ref": "#/parameters/InstrumentationAssetStatusIDFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/InstrumentationsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    post:
      summary: Add instrumentations to a node
      operationId: addInstrumentationsToNode
      description: Add one or more instrumentations to a node. This action requires
        `can_permit` permission on the node and on the instrumentation.
      parameters:
      - name: node_id
        in: path
        description: Id of the node to which the instrumentations will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    patch:
      summary: Replace the instrumentations of a node
      operationId: replaceInstrumentationsOfNode
      description: Replaces all instrumentations belonging to a node in your accessible
        scope. You can send a list of resources that will replace all previous values.
        This action requires `can_permit` permission on the node and on the instrumentation.
      parameters:
      - name: node_id
        in: path
        description: Id of the node of which the instrumentations will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    delete:
      summary: Remove instrumentations from a node
      operationId: removeInstrumentationsFromNode
      description: Remove one or more instrumentations from a node in your accessible
        scope. This action requires `can_permit` permission on the node and on the
        instrumentation.
      parameters:
      - name: node_id
        in: path
        description: Id of the node from which the instrumentations will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
  "/nodes/{id}/pictures":
    get:
      summary: Get node pictures
      operationId: getNodePictures
      description: Get all pictures of an node.
      parameters:
      - name: id
        in: path
        description: Id of the node
        type: integer
        format: int64
        required: true
      - name: width
        in: query
        description: filter by width
        type: integer
      - name: width_from
        in: query
        description: filter by width_from
        type: integer
      - name: width_to
        in: query
        description: filter by width_to
        type: integer
      - name: height
        in: query
        description: filter by height
        type: integer
      - name: height_from
        in: query
        description: filter by height_from
        type: integer
      - name: height_to
        in: query
        description: filter by height_to
        type: integer
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PicturesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    post:
      summary: Upload an node picture
      operationId: UploadNodePicture
      description: |-
        Upload a new node picture. Checks the file-storage quota. Allowed content-types are
        - image/gif
        - image/jpg
        - image/jpeg
        - image/png
      consumes:
      - multipart/form-data
      parameters:
      - name: id
        in: path
        description: Id of the node
        type: integer
        format: int64
        required: true
      - name: image
        in: formData
        description: the image to upload (up to 1 MB)
        required: true
        type: file
      responses:
        '201':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PictureResponse"
          headers:
            Location:
              description: Url of the created node picture
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
  "/nodes/{node_id}/pictures/{id}":
    get:
      summary: Get an node picture
      operationId: getNodePicture
      description: Get a single picture of an node.
      parameters:
      - name: node_id
        in: path
        description: Id of the node
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the node picture
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PictureResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    patch:
      summary: Update an node picture
      operationId: updateNodePicture
      description: |-
        Upload a new node picture. Check the file-storage quota. Allowed content-types are
        - image/gif
        - image/jpg
        - image/jpeg
        - image/png
      consumes:
      - multipart/form-data
      parameters:
      - name: node_id
        in: path
        description: Id of the node
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the node picture
        type: integer
        format: int64
        required: true
      - name: image
        in: formData
        description: the image to upload (up to 1 MB)
        required: true
        type: file
      responses:
        '204':
          description: The picture was updated successfully.
          schema:
            "$ref": "#/definitions/PictureResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    delete:
      summary: Delete an node picture
      operationId: deleteNodePicture
      description: Delete an node picture.
      parameters:
      - name: node_id
        in: path
        description: Id of the node
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the node picture
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
  "/nodes/{node_id}/pictures/{id}/download":
    get:
      summary: Download an node picture
      operationId: downloadNodePicture
      description: Download an node picture.
      parameters:
      - name: node_id
        in: path
        description: Id of the node
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the node picture
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: A file download stream
          headers:
            Content-Type:
              type: string
              description: the original files mime-type is used here (eg. image/jpeg)
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
  "/nodes/{id}/pictures/links":
    post:
      summary: Add a link as node picture
      operationId: addNodePictureLink
      description: Add an external resource as node picture.
      parameters:
      - name: id
        in: path
        description: Id of the node
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Picture link object to be created
        required: true
        schema:
          "$ref": "#/definitions/PictureLinkRequest"
      responses:
        '201':
          description: The picture link was successfully created. The response body
            contains its representation
          schema:
            "$ref": "#/definitions/PictureResponse"
          headers:
            Location:
              description: Url of the created node picture
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
  "/nodes/{node_id}/pictures/links/{id}":
    patch:
      summary: Update a node picture link
      operationId: updateNodePictureLink
      description: Update a node picture link.
      parameters:
      - name: node_id
        in: path
        description: Id of the node
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the node picture
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Picture link object to be updated
        required: true
        schema:
          "$ref": "#/definitions/PictureLinkRequest"
      responses:
        '204':
          description: The picture link was updated successfully.
          schema:
            "$ref": "#/definitions/PictureResponse"
          headers:
            Location:
              description: Url of the created instrumentation picture link
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
  "/nodes/{node_id}/recipes":
    get:
      summary: Get all recipes of one node
      operationId: getRecipesOfNode
      description: |-
        Returns a list of all recipes that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```Possible include values: pictures, specifications, specifications[key1,key2], tenant, status, type, type.tenant, type.parent ```
      parameters:
      - "$ref": "#/parameters/NodePathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/RecipesOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/RecipesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    post:
      summary: Add recipes to a node
      operationId: addRecipesToNode
      description: Add one or more recipes to a node. This action requires `can_permit`
        permission on the node and on the recipe.
      parameters:
      - name: node_id
        in: path
        description: Id of the node to which the recipes will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/RecipeIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    patch:
      summary: Replace the recipes of a node
      operationId: replaceRecipesOfNode
      description: Replaces all recipes belonging to a node in your accessible scope.
        You can send a list of resources that will replace all previous values. This
        action requires `can_permit` permission on the node and on the recipe.
      parameters:
      - name: node_id
        in: path
        description: Id of the node of which the recipes will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/RecipeIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    delete:
      summary: Remove recipes from a node
      operationId: removeRecipesFromNode
      description: Remove one or more recipes from a node in your accessible scope.
        This action requires `can_permit` permission on the node and on the recipe.
      parameters:
      - name: node_id
        in: path
        description: Id of the node from which the recipes will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/RecipeIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
  "/nodes/{node_id}/specifications":
    get:
      summary: Get specifications of a node
      operationId: getSpecificationsOfNode
      description: Returns the specification of an object in your accessible scope.
        If no specifications are defined, this is just an empty object. Specification
        must have the form below.
      parameters:
      - name: node_id
        in: path
        description: Id of the specified node
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      - name: ui_visible
        in: query
        type: boolean
        required: false
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationsUIVisibleResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
      - Specification
    patch:
      summary: Update specifications of a node
      operationId: updateSpecificationsOfNode
      description: Update the specification object of a node in your accessible scope.
        To add specifications, just add the key and set the value object with value,
        unit and source_timestamp. To mark an existing specification to be unknown,
        the value could be set to null. To delete keys, use the delete method. Multiple
        specification objects can be sent in the same request. Keys inside a specification
        are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9
        . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that
        is send multiple times in the request body, only the last key-value is saved.
      parameters:
      - name: node_id
        in: path
        description: Id of the specified node
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications objects to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsUIVisibleRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
      - Specification
    delete:
      summary: Delete specifications of a node
      operationId: removeSpecificationsFromNode
      description: The specification keys in the body will be removed of the object
        in your accessible scope. If a key does not exist it will be ignored.
      parameters:
      - name: node_id
        in: path
        description: Id of the specified node
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Array of keys to delete from specifications
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsDelete"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
      - Specification
  "/nodes/{node_id}/specifications/rename":
    patch:
      summary: Rename a specification key
      operationId: renameSpecificationsOfNode
      description: Rename one specification key of a node in your accessible scope.
        The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted
        to lower-case.
      parameters:
      - name: node_id
        in: path
        description: Id of the specified node
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications object to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRename"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
      - Specification
  "/nodes/{node_id}/systems":
    get:
      summary: Get all systems of one node
      operationId: getSystemsOfNode
      description: |-
        Returns a list of all systems that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```pictures, specifications, specifications[key1,key2], tenant, parent, status, type, type.tenant, type.parent, worst_asset_status ```
      parameters:
      - "$ref": "#/parameters/NodePathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/SystemsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SystemsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    post:
      summary: Add systems to a node
      operationId: addSystemsToNode
      description: Add one or more systems to a node. This action requires `can_permit`
        permission on the node and on the system.
      parameters:
      - name: node_id
        in: path
        description: Id of the node to which the systems will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/SystemIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    patch:
      summary: Replace the systems of a node
      operationId: replaceSystemsOfNode
      description: Replaces all systems belonging to a node in your accessible scope.
        You can send a list of resources that will replace all previous values. This
        action requires `can_permit` permission on the node and on the system.
      parameters:
      - name: node_id
        in: path
        description: Id of the node of which the systems will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/SystemIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
    delete:
      summary: Remove systems from a node
      operationId: removeSystemsFromNode
      description: Remove one or more systems from a node in your accessible scope.
        This action requires `can_permit` permission on the node and on the system.
      parameters:
      - name: node_id
        in: path
        description: Id of the node from which the systems will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/SystemIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
  "/nodes/{node_id}/type":
    get:
      summary: Get the type of the specific node
      operationId: getNodeIdType
      description: |-
        Returns the type of the node. Needed if only permission on node but not on tenant.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```tenant```
      parameters:
      - name: node_id
        in: path
        description: Id of the node
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/NodeTypeResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
      - NodeType
  "/nodes/{node_id}/type-options":
    get:
      summary: Get all possible types of the specified node
      operationId: getNodeTypesOptions
      description: |-
        Returns a list of all possible node types for the specified node.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: node_id
        in: path
        description: Id of the node
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: node_types
            type: object
            properties:
              node_types:
                type: array
                items:
                  "$ref": "#/definitions/NodeTypeResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
      - NodeType
  "/permission_requests":
    post:
      summary: Create a new permission request
      operationId: createPermissionRequest
      description: Permissions must have a permission_type, assignable and permitable.
      parameters:
      - name: Body
        in: body
        description: Permission object that needs to be created.
        required: true
        schema:
          "$ref": "#/definitions/PermissionRequestCreateRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/PermissionRequestResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PermissionRequest
  "/permission_requests/{id}":
    get:
      summary: Get a single permissionRequest
      operationId: getPermissionRequestById
      description: Get a specific permission request identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the permission request to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PermissionRequestResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PermissionRequest
    patch:
      summary: Update a permission request
      operationId: updatePermissionRequest
      description: Update accessible parameters of the requested resource in your
        accessible scope.
      parameters:
      - name: id
        in: path
        description: Id of the permission request to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/PermissionRequestUpdateRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PermissionRequest
    delete:
      summary: Delete a permission request
      operationId: deletePermissionRequest
      description: Delete a specific resource in your accessible scope, identified
        by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the permission request to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PermissionRequest
  "/permissions":
    get:
      summary: Get a range of permissions
      operationId: getPermissions
      description: |-
        Returns a list of all permissions that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```assignable, permitable, technical_connect_users```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - name: permission_type
        in: query
        description: one or multiple permission_types (comma list). Allowed values
          are `can_read`, `can_update`, `can_delete` and `can_permit`
        type: string
        required: false
      - name: assignable_id
        in: query
        description: filter by an assignable id
        type: integer
        format: int64
        required: false
      - name: assignable_type
        in: query
        description: filter by a specific type of assignables eg. `User` or `Usergroup`.
        type: string
        required: false
      - name: permitable_id
        in: query
        description: filter by a permitable id
        type: integer
        format: int64
        required: false
      - name: permitable_type
        in: query
        description: filter by a specific type of permitables eg. `Asset` or `Node`
        type: string
        required: false
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            type: object
            title: permissions
            properties:
              permissions:
                type: array
                items:
                  "$ref": "#/definitions/PermissionResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Permission
    post:
      summary: Create a new permission
      operationId: createPermissions
      description: |-
        Permissions must have a permission_type, assignable and permitable.
        To create multiple permissions at ones, multiple permission_types can be passed as array. In this case the API will return an array of the created permissions.
      parameters:
      - name: Body
        in: body
        description: Permission object that needs to be created.
        required: true
        schema:
          "$ref": "#/definitions/PermissionRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/PermissionResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Permission
  "/permissions/{id}":
    get:
      summary: Get a single permission
      operationId: getPermissionById
      description: |-
        Get a specific permission identified by the id in the URL.

        Possible include values: ```assignable, permitable, technical_connect_users```
      parameters:
      - name: id
        in: path
        description: Id of the permission to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PermissionResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Permission
    delete:
      summary: Delete a permission
      operationId: deletePermission
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the permission to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Permission
  "/products":
    get:
      summary: Get a range of products
      operationId: getProducts
      description: |-
        Returns a list of all products that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, parent, manufacturer, pictures, specifications, specifications[key1,key2], categories, categories.parent``` "
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/ProductCodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    post:
      summary: Create a new product
      operationId: createProduct
      description: |-
        Products need a unique product_code and a manufacturer (company).
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - name: Body
        in: body
        description: Product object that needs to be created.
        required: true
        schema:
          "$ref": "#/definitions/ProductRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/ProductResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{id}":
    get:
      summary: Get a single product
      operationId: getProductById
      description: |-
        Get a specific product identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, parent, manufacturer, pictures, specifications, specifications[key1,key2], categories, categories.parent```
      parameters:
      - name: id
        in: path
        description: Id of the product to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    patch:
      summary: Update a product
      operationId: updateProduct
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the product to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/ProductRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    delete:
      summary: Delete a product
      operationId: deleteProduct
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the product to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{product_id}/categories-options":
    get:
      summary: Get all categories of one product
      operationId: getCategoriesOptionsOfProduct
      description: |-
        Returns a list of all possible categories for the specific product available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```tenant, parent``` "
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductCategoriesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
      - ProductCategory
  "/products/{product_id}/documents":
    get:
      summary: Get all documents of a product
      operationId: getDocumentsOfProduct
      description: |-
        Returns a list of documents assigned to the specified product.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, classification, categories, categories.parent, categories.standards, attachments```
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    post:
      summary: Add documents to a product
      operationId: addDocumentsToProduct
      description: Add one or more documents to a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product to which the documents will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    patch:
      summary: Replace the documents of a product
      operationId: replaceDocumentsOfProduct
      description: Replaces all documents belonging to a product. You can send a list
        of resources that will replace all previous values.
      parameters:
      - name: product_id
        in: path
        description: Id of the product of which the documents will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    delete:
      summary: Remove documents from a product
      operationId: removeDocumentsFromProduct
      description: Remove one or more documents from a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product from which the documents will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{product_id}/edge_device_features":
    get:
      summary: Get all edge device features of a product
      operationId: getEdgeDeviceFeaturesOfProduct
      description: |-
        Returns a list of edge device features assigned to the specified product.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EdgeDeviceFeaturesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    post:
      summary: Add edge device features to a product
      operationId: addEdgeDeviceFeaturesToProduct
      description: Add one or more edge device features to a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product to which the edge device features will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/EdgeDeviceFeatureIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    patch:
      summary: Replace the edge device features of a product
      operationId: replaceEdgeDeviceFeaturesOfProduct
      description: Replaces all edge device features belonging to a product. You can
        send a list of resources that will replace all previous values.
      parameters:
      - name: product_id
        in: path
        description: Id of the product of which the edge device features will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/EdgeDeviceFeatureIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    delete:
      summary: Remove edge device features from a product
      operationId: removeEdgeDeviceFeaturesFromProduct
      description: Remove one or more edge device features from a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product from which the edge device features will be
          removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/EdgeDeviceFeatureIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{id}/pictures":
    get:
      summary: Get product pictures
      operationId: getProductPictures
      description: Get all product pictures of a product.
      parameters:
      - name: id
        in: path
        description: Id of the product
        type: integer
        format: int64
        required: true
      - name: width
        in: query
        description: filter by width
        type: integer
      - name: width_from
        in: query
        description: filter by width_from
        type: integer
      - name: width_to
        in: query
        description: filter by width_to
        type: integer
      - name: height
        in: query
        description: filter by height
        type: integer
      - name: height_from
        in: query
        description: filter by height_from
        type: integer
      - name: height_to
        in: query
        description: filter by height_to
        type: integer
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PicturesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    post:
      summary: Upload a product picture
      operationId: UploadProductPicture
      description: |-
        Upload a new product picture. Checks the file-storage quota. Allowed content-types are
        - image/gif
        - image/jpg
        - image/jpeg
        - image/png
      consumes:
      - multipart/form-data
      parameters:
      - name: id
        in: path
        description: Id of the product
        type: integer
        format: int64
        required: true
      - name: image
        in: formData
        description: the image to upload (up to 1 MB)
        required: true
        type: file
      responses:
        '201':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PictureResponse"
          headers:
            Location:
              description: Url of the created product picture
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{product_id}/pictures/{id}":
    get:
      summary: Get a product picture
      operationId: getProductPicture
      description: Get a single picture of a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the product picture
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PictureResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    patch:
      summary: Update a product picture
      operationId: updateProductPicture
      description: |-
        Upload a new product picture. Checks the file-storage quota. Allowed content-types are
        - image/gif
        - image/jpg
        - image/jpeg
        - image/png
      consumes:
      - multipart/form-data
      parameters:
      - name: product_id
        in: path
        description: Id of the product
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the product picture
        type: integer
        format: int64
        required: true
      - name: image
        in: formData
        description: the image to upload (up to 1 MB)
        required: true
        type: file
      responses:
        '204':
          description: The picture was updated successfully.
          schema:
            "$ref": "#/definitions/PictureResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    delete:
      summary: Delete a product picture
      operationId: deleteProductPicture
      description: Delete a product picture.
      parameters:
      - name: product_id
        in: path
        description: Id of the product
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the product picture
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{product_id}/pictures/{id}/download":
    get:
      summary: Download a product picture
      operationId: downloadProductPicture
      description: Download a product picture.
      parameters:
      - name: product_id
        in: path
        description: Id of the product
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the product picture
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: A file download stream
          headers:
            Content-Type:
              type: string
              description: the original files mime-type is used here (eg. image/jpeg)
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{id}/pictures/links":
    post:
      summary: Add a link as product picture
      operationId: addProductPictureLink
      description: Add an external resource as product picture.
      parameters:
      - name: id
        in: path
        description: Id of the product
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Picture link object to be created
        required: true
        schema:
          "$ref": "#/definitions/PictureLinkRequest"
      responses:
        '201':
          description: The picture link was successfully created. The response body
            contains its representation
          schema:
            "$ref": "#/definitions/PictureResponse"
          headers:
            Location:
              description: Url of the created product picture
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{product_id}/pictures/links/{id}":
    patch:
      summary: Update a product picture link
      operationId: updateProductPictureLink
      description: Update a product picture link.
      parameters:
      - name: product_id
        in: path
        description: Id of the product
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the product picture
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Picture link object to be updated
        required: true
        schema:
          "$ref": "#/definitions/PictureLinkRequest"
      responses:
        '204':
          description: The picture link was updated successfully.
          schema:
            "$ref": "#/definitions/PictureResponse"
          headers:
            Location:
              description: Url of the created product picture link
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{product_id}/purchase_orders":
    get:
      summary: Get all purchase orders of one product
      operationId: getPurchaseOrdersOfProduct
      description: Returns a list of all purchase orders that are available in your
        scope. You can apply query parameters in the request to get a filtered list.
        If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/QuotationIDFilter"
      - "$ref": "#/parameters/CustomerNumberFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PurchaseOrdersResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    post:
      summary: Add purchase orders to a product
      operationId: addPurchaseOrdersToProduct
      description: Add one or more purchase orders to a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product to which the purchase orders will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    patch:
      summary: Replace the purchase orders of a product
      operationId: replacePurchaseOrdersOfProduct
      description: Replaces all purchase orders belonging to a product. You can send
        a list of resources that will replace all previous values.
      parameters:
      - name: product_id
        in: path
        description: Id of the product of which the purchase orders will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    delete:
      summary: Remove purchase orders from a product
      operationId: removePurchaseOrdersFromProduct
      description: Remove one or more purchase orders from a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product from which the purchase orders will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{product_id}/quotations":
    get:
      summary: Get all quotations of one product
      operationId: getQuotationsOfProduct
      description: Returns a list of all quotations that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/RequestForQuotationIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/QuotationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    post:
      summary: Add quotations to a product
      operationId: addQuotationsToProduct
      description: Add one or more quotations to a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product to which the quotations will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/QuotationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    patch:
      summary: Replace the quotations of a product
      operationId: replaceQuotationsOfProduct
      description: Replaces all quotations belonging to a product. You can send a
        list of resources that will replace all previous values.
      parameters:
      - name: product_id
        in: path
        description: Id of the product of which the quotations will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/QuotationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    delete:
      summary: Remove quotations from a product
      operationId: removeQuotationsFromProduct
      description: Remove one or more quotations from a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product from which the quotations will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/QuotationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{product_id}/softwares":
    get:
      summary: Get a range of software of one product
      operationId: getSoftwaresOfProduct
      description: |-
        Returns a list of software.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```software_attachments```
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/SoftwareOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SoftwaresResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    post:
      summary: Add software to a product
      operationId: addSoftwaresToProduct
      description: Add one or more software to a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product to which the software will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/SoftwareIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    patch:
      summary: Replace the software of a product
      operationId: replaceSoftwaresOfProduct
      description: Replaces all software belonging to a product. You can send a list
        of resources that will replace all previous values.
      parameters:
      - name: product_id
        in: path
        description: Id of the product of which the software will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/SoftwareIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    delete:
      summary: Remove software from a product
      operationId: removeSoftwaresOfProduct
      description: Remove one or more software from a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product from which the software will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/SoftwareIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{product_id}/spare_parts":
    get:
      summary: Get all spare parts of a product
      operationId: getSparePartsOfProduct
      description: |-
        Returns a list of spare parts assigned to the specified product.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/OrderCodeFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SparePartsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    post:
      summary: Add spare parts to a product
      operationId: addSparePartsToProduct
      description: Add one or more spare parts to a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product to which the spare part will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/SparePartIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    patch:
      summary: Replace the spare parts of a product
      operationId: replaceSparePartsOfProduct
      description: Replaces all spare parts belonging to a product. You can send a
        list of resources that will replace all previous values.
      parameters:
      - name: product_id
        in: path
        description: Id of the product of which the spare parts will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/SparePartIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    delete:
      summary: Remove spare parts from a product
      operationId: removeSparePartsFromProduct
      description: Remove one or more documents from a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product from which the spare parts will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/SparePartIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{product_id}/specifications":
    get:
      summary: Get specifications of a product
      operationId: getSpecificationsOfProduct
      description: Returns the specification of an object. If no specifications are
        defined, this is just an empty object.
      parameters:
      - name: product_id
        in: path
        description: Id of the specified product
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationsResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
      - Specification
    patch:
      summary: Update specifications of a product
      operationId: updateSpecificationsOfProduct
      description: Update the specification object of a product. To add specifications,
        just add the key and set the value object with value, unit and source_timestamp.
        To mark an existing specification to be unknown, the value could be set to
        null. To delete keys, use the delete method. Multiple specification objects
        can be sent in the same request. Keys inside a specification are unique and
        can only be added once. Keys can only consist of [a-z A-Z 0-9 . - _ ]. All
        uppercase A-Z are converted to lower-case a-z. If a key occurs more than once
        in the request body, the last key-value will be saved.
      parameters:
      - name: product_id
        in: path
        description: Id of the specified product
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications objects to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
      - Specification
    delete:
      summary: Delete specifications of a product
      operationId: removeSpecificationsFromProduct
      description: The specification keys in the body will be removed. Multiple specification
        keys can be sent in the same request. If a key does not exist it will be ignored.
      parameters:
      - name: product_id
        in: path
        description: Id of the specified product
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Array of keys to delete from specifications
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsDelete"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
      - Specification
  "/products/{product_id}/specifications/rename":
    patch:
      summary: rename a key in the specification.
      operationId: renameSpecificationsOfProduct
      description: Rename a key of the specification object of a product. Instead
        of delete and recreate again, this is to preserve the key´s value history.
        Also the new keys can only consist of a-z A-Z 0-9 . - _ all uppercase A-Z
        are converted to lower-case a-z. Only one key can be changed per request
      parameters:
      - name: product_id
        in: path
        description: Id of the specified product
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications object to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRename"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
      - Specification
  "/products/{product_id}/status":
    get:
      summary: Get the status of a specific product
      operationId: getProductIdStatus
      description: |-
        Returns the status of the product.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: product_id
        in: path
        description: Id of the specified product
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
      - ProductStatus
  "/products/{product_id}/status-options":
    get:
      summary: Get all possible statuses for the specified product
      operationId: getProductStatusesOptions
      description: |-
        Returns a list of all possible product statuses for the specified product.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: product_id
        in: path
        description: Id of the specified product
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: product_statuses
            type: object
            properties:
              product_statuses:
                type: array
                items:
                  "$ref": "#/definitions/ProductStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
      - ProductStatus
  "/purchase_orders":
    get:
      summary: Get a range of purchase orders
      operationId: getPurchaseOrders
      description: Returns a list of purchase orders. If the query has no matches,
        the response is an empty list.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/CustomerPurchaseOrderNumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/QuotationIDFilter"
      - "$ref": "#/parameters/CustomerNumberFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PurchaseOrdersResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
    post:
      summary: Create a new purchase order
      operationId: createPurchaseOrder
      description: Create a new purchase order with a sender and a receiver.
      parameters:
      - name: Body
        in: body
        description: Object body that will be created.
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/PurchaseOrderResponse"
          headers:
            Location:
              description: url of the created purchase order
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
  "/purchase_orders/{id}":
    get:
      summary: Get a single purchase order
      operationId: getPurchaseOrderById
      description: Get a specific purchase order identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the purchase order to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PurchaseOrderResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
    patch:
      summary: Update a purchase order
      operationId: updatePurchaseOrder
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the purchase order to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
    delete:
      summary: Delete a purchase order
      operationId: deletePurchaseOrder
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the purchase order to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
  "/purchase_orders/{purchase_order_id}/deliveries":
    get:
      summary: Get all deliveries of one purchase order
      operationId: getDeliviersOfPurchaseOrder
      description: Returns a list of all deliveries that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/PurchaseOrderPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DateOfShipmentFilter"
      - "$ref": "#/parameters/DateOfShipmentFromFilter"
      - "$ref": "#/parameters/DateOfShipmentToFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/CustomerNumberFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DeliveriesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
    post:
      summary: Add deliveries to a purchase order
      operationId: addDeliviersToPurchaseOrder
      description: Add one or more deliveries to a purchase order.
      parameters:
      - name: purchase_order_id
        in: path
        description: Id of the purchase order to which the deliveries will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DeliveryIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
    patch:
      summary: Replace the deliveries of a purchase order
      operationId: replaceDeliviersOfPurchaseOrder
      description: Replaces all deliveries belonging to a purchase order. You can
        send a list of resources that will replace all previous values.
      parameters:
      - name: purchase_order_id
        in: path
        description: Id of the purchase order of which the deliveries will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DeliveryIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
    delete:
      summary: Remove deliveries from a purchase order
      operationId: removeDeliviersFromPurchaseOrder
      description: Remove one or more deliveries from a purchase order.
      parameters:
      - name: purchase_order_id
        in: path
        description: Id of the purchase order from which the deliveries will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DeliveryIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
  "/purchase_orders/{purchase_order_id}/documents":
    get:
      summary: Get all documents of one purchase order
      operationId: getDocumentsOfPurchaseOrder
      description: |-
        Returns a list of documents. If the query has no matches, the response is an empty list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, classification, categories, categories.parent, categories.standards, attachments```
      parameters:
      - "$ref": "#/parameters/PurchaseOrderPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
    post:
      summary: Add documents to a purchase order
      operationId: addDocumentsToPurchaseOrder
      description: Add one or more documents to a purchase order.
      parameters:
      - name: purchase_order_id
        in: path
        description: Id of the purchase order to which the documents will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
    patch:
      summary: Replace the documents of a purchase order
      operationId: replaceDocumentsOfPurchaseOrder
      description: Replaces all documents belonging to a purchase order. You can send
        a list of resources that will replace all previous values.
      parameters:
      - name: purchase_order_id
        in: path
        description: Id of the purchase order of which the documents will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
    delete:
      summary: Remove documents from a purchase order
      operationId: removeDocumentsFromPurchaseOrder
      description: Remove one or more documents from a purchase order.
      parameters:
      - name: purchase_order_id
        in: path
        description: Id of the purchase order from which the documents will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
  "/purchase_orders/{purchase_order_id}/products":
    get:
      summary: Get all products of one purchase
      operationId: getProductsOfPurchaseOrder
      description: |-
        Returns a list of all products that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, parent, manufacturer, pictures, categories, categories.parent```
      parameters:
      - "$ref": "#/parameters/PurchaseOrderPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/ProductCodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
    post:
      summary: Add products to a purchase order
      operationId: addProductsToPurchaseOrder
      description: Add one or more products to a purchase order.
      parameters:
      - name: purchase_order_id
        in: path
        description: Id of the purchase order to which the products will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/ProductIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
    patch:
      summary: Replace the products of a purchase order
      operationId: replaceProductsOfPurchaseOrder
      description: Replaces all products belonging to a purchase order. You can send
        a list of resources that will replace all previous values.
      parameters:
      - name: purchase_order_id
        in: path
        description: Id of the purchase order of which the products will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/ProductIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
    delete:
      summary: Remove products from a purchase order
      operationId: removeProductsFromPurchaseOrder
      description: Remove one or more products from a purchase order.
      parameters:
      - name: purchase_order_id
        in: path
        description: Id of the purchase order from which the products will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/ProductIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
  "/purchase_orders/{purchase_order_id}/products/quantity":
    patch:
      summary: Change the product quantity in a purchase order
      operationId: updateProductQuantitiesOfPurchaseOrder
      description: Sets a new quantity of a product in a purchase order or deletes
        the line in case quantity is zero.
      parameters:
      - name: purchase_order_id
        in: path
        description: Id of the purchase order of which the change will be done
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be changed or removed
        required: true
        schema:
          "$ref": "#/definitions/ProductQuantity"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
  "/purchase_orders/{purchase_order_id}/status":
    get:
      summary: Get the status of the specific purchase order
      operationId: getPurchaseOrderIdStatus
      description: |-
        Returns the status of the purchase order. Needed if only permission on purchase order but not on tenant.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include value: ```tenant```
      parameters:
      - name: purchase_order_id
        in: path
        description: Id of the specified purchase order
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PurchaseOrderStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrder
      - PurchaseOrderStatus
  "/quotations":
    get:
      summary: Get a range of quotations
      operationId: getQuotations
      description: Returns a list of quotations. If the query has no matches, the
        response is an empty list.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/RequestForQuotationIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/QuotationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
    post:
      summary: Create a new quotation
      operationId: createQuotation
      description: Create a new quotation with a sender and a receiver.
      parameters:
      - name: Body
        in: body
        description: Object body that will be created.
        required: true
        schema:
          "$ref": "#/definitions/QuotationRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/QuotationResponse"
          headers:
            Location:
              description: url of the created quotation
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
  "/quotations/{id}":
    get:
      summary: Get a single quotation
      operationId: getQuotationById
      description: Get a specific quotation identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the quotation to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/QuotationResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
    patch:
      summary: Update a quotation
      operationId: updateQuotation
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the quotation to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/QuotationRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
    delete:
      summary: Delete a quotation
      operationId: deleteQuotation
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the quotation to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
  "/quotations/{quotation_id}/documents":
    get:
      summary: Get all documents of one quotation
      operationId: getDocumentsOfQuotation
      description: |-
        Returns a list of documents.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, classification, categories, categories.parent, categories.standards, attachments```
      parameters:
      - "$ref": "#/parameters/QuotationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
    post:
      summary: Add documents to a quotation
      operationId: addDocumentsToQuotation
      description: Add one or more documents to a quotation.
      parameters:
      - name: quotation_id
        in: path
        description: Id of the quotation to which the documents will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
    patch:
      summary: Replace the documents of a quotation
      operationId: replaceDocumentsOfQuotation
      description: Replaces all documents belonging to a quotation. You can send a
        list of resources that will replace all previous values.
      parameters:
      - name: quotation_id
        in: path
        description: Id of the quotation of which the documents will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
    delete:
      summary: Remove documents from a quotation
      operationId: removeDocumentsFromQuotation
      description: Remove one or more documents from a quotation.
      parameters:
      - name: quotation_id
        in: path
        description: Id of the quotation from which the documents will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
  "/quotations/{quotation_id}/products":
    get:
      summary: Get all products of one quotation
      operationId: getProductsOfQuotation
      description: |-
        Returns a list of all products that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - "$ref": "#/parameters/QuotationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/ProductCodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
    post:
      summary: Add products to a quotation
      operationId: addProductsToQuotation
      description: Add one or more products to a quotation.
      parameters:
      - name: quotation_id
        in: path
        description: Id of the quotation to which the products will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/ProductIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
    patch:
      summary: Replace the products of a quotation
      operationId: replaceProductsOfQuotation
      description: Replaces all products belonging to a quotation. You can send a
        list of resources that will replace all previous values.
      parameters:
      - name: quotation_id
        in: path
        description: Id of the quotation of which the products will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/ProductIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
    delete:
      summary: Remove products from a quotation
      operationId: removeProductsFromQuotation
      description: Remove one or more products from a quotation.
      parameters:
      - name: quotation_id
        in: path
        description: Id of the quotation from which the products will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/ProductIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
  "/quotations/{quotation_id}/products/quantity":
    patch:
      summary: Change the product quantity in a quotation
      operationId: updateProductQuantitiesOfQuotation
      description: Sets a new quantity of a product in a quotation or deletes the
        line in case quantity is zero.
      parameters:
      - name: quotation_id
        in: path
        description: Id of the quotation of which the change will be done
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be changed or removed
        required: true
        schema:
          "$ref": "#/definitions/ProductQuantity"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
  "/quotations/{quotation_id}/purchase_orders":
    get:
      summary: Get all purchase orders of one quotation
      operationId: getPurchaseOrdersOfQuotation
      description: Returns a list of all purchase orders that are available in your
        scope. You can apply query parameters in the request to get a filtered list.
        If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/QuotationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/QuotationIDFilter"
      - "$ref": "#/parameters/CustomerNumberFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PurchaseOrdersResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
    post:
      summary: Add purchase orders to a quotation
      operationId: addPurchaseOrdersToQuotation
      description: Add one or more purchase orders to a quotation.
      parameters:
      - name: quotation_id
        in: path
        description: Id of the quotation to which the purchase orders will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
    patch:
      summary: Replace the purchase orders of a quotation
      operationId: replacePurchaseOrdersOfQuotation
      description: Replaces all purchase orders belonging to a quotation. You can
        send a list of resources that will replace all previous values.
      parameters:
      - name: quotation_id
        in: path
        description: Id of the quotation of which the purchase orders will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
    delete:
      summary: Remove purchase orders from a quotation
      operationId: removePurchaseOrdersFromQuotation
      description: Remove one or more purchase orders from a quotation.
      parameters:
      - name: quotation_id
        in: path
        description: Id of the quotation from which the purchase orders will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
  "/quotations/{quotation_id}/status":
    get:
      summary: Get the status of the specific quotation
      operationId: getQuotationIdStatus
      description: |-
        Returns the status of the quotation. Needed if only permission on quotation but not on tenant.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include value: ```tenant```
      parameters:
      - name: quotation_id
        in: path
        description: Id of the specified quotation
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/QuotationStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Quotation
      - QuotationStatus
  "/request_for_quotations":
    get:
      summary: Get a range of request for quotations
      operationId: getRequestForQuotations
      description: Returns a list of request for quotations. If the query has no matches,
        the response is an empty list.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/AuthorFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/RequestForQuotationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
    post:
      summary: Create a new request for quotation
      operationId: createRequestForQuotation
      description: Create a new request for quotation.
      parameters:
      - name: Body
        in: body
        description: Object body that will be created
        required: true
        schema:
          "$ref": "#/definitions/RequestForQuotationRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/RequestForQuotationResponse"
          headers:
            Location:
              description: url of the created request for quotation
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
  "/request_for_quotations/{id}":
    get:
      summary: Get a single request for quotation
      operationId: getRequestForQuotationById
      description: Get a specific request for quotation identified by the id in the
        URL.
      parameters:
      - name: id
        in: path
        description: Id of the request for quotation to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/RequestForQuotationResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
    patch:
      summary: Update a request for quotation
      operationId: updateRequestForQuotation
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the request for quotation to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/RequestForQuotationRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
    delete:
      summary: Delete a request for quotation
      operationId: deleteRequestForQuotation
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the request for quotation to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
  "/request_for_quotations/{request_for_quotation_id}/bill_of_materials":
    get:
      summary: Get all bill of materials of one request for quotation
      operationId: getBillOfMaterialsOfRequestForQuotation
      description: Returns a list of all bill of materials that are available in your
        scope. You can apply query parameters in the request to get a filtered list.
        If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/RequestForQuotationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/AuthorFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/BillOfMaterialsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
    post:
      summary: Add bill of materials to a request for quotation
      operationId: addBillOfMaterialsToRequestForQuotation
      description: Add one or more bill of materials to a request for quotation.
      parameters:
      - name: request_for_quotation_id
        in: path
        description: Id of the request for quotation to which the bill of materials
          will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/BillOfMaterialIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
    patch:
      summary: Replace the bill of materials of a request for quotation
      operationId: replaceBillOfMaterialsOfRequestForQuotation
      description: Replaces all bill of materials belonging to a request for quotation.
        You can send a list of resources that will replace all previous values.
      parameters:
      - name: request_for_quotation_id
        in: path
        description: Id of the request for quotation of which the bill of materials
          will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/BillOfMaterialIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
    delete:
      summary: Remove bill of materials from a request for quotation
      operationId: deleteBillOfMaterialsFromRequestForQuotation
      description: Remove one or more bill of materials from a request for quotation.
      parameters:
      - name: request_for_quotation_id
        in: path
        description: Id of the request for quotation from which the bill of materials
          will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/BillOfMaterialIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
  "/request_for_quotations/{request_for_quotation_id}/documents":
    get:
      summary: Get all documents of one request for quotation
      operationId: getDocumentsOfRequestForQuotation
      description: |-
        Returns a list of documents.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, classification, categories, categories.parent, attachments```
      parameters:
      - "$ref": "#/parameters/RequestForQuotationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
    post:
      summary: Add documents to a request for quotation
      operationId: addDocumentsToRequestForQuotation
      description: Add one or more documents to a request for quotation.
      parameters:
      - name: request_for_quotation_id
        in: path
        description: Id of the request for quotation to which the documents will be
          added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
    patch:
      summary: Replace the documents of a request for quotation
      operationId: replaceDocumentsOfRequestForQuotation
      description: Replaces all documents belonging to a request for quotation. You
        can send a list of resources that will replace all previous values.
      parameters:
      - name: request_for_quotation_id
        in: path
        description: Id of the request for quotation of which the documents will be
          replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
    delete:
      summary: Remove documents from a request for quotation
      operationId: deleteDocumentsOfRequestForQuotation
      description: Remove one or more documents from a request for quotation.
      parameters:
      - name: request_for_quotation_id
        in: path
        description: Id of the request for quotation from which the documents will
          be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
  "/request_for_quotations/{request_for_quotation_id}/quotations":
    get:
      summary: Get all quotations of one request for quotation
      operationId: getQuotationsOfRequestForQuotation
      description: Returns a list of all quotations that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/RequestForQuotationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/DateFilter"
      - "$ref": "#/parameters/DateFromFilter"
      - "$ref": "#/parameters/DateToFilter"
      - "$ref": "#/parameters/SenderIDFilter"
      - "$ref": "#/parameters/ReceiverIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/QuotationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
    post:
      summary: Add quotations to a request for quotation
      operationId: addQuotationsToRequestForQuotation
      description: Add one or more quotations to a request for quotation.
      parameters:
      - name: request_for_quotation_id
        in: path
        description: Id of the request for quotation to which the quotations will
          be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/QuotationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
    patch:
      summary: Replace the quotations of a request for quotation
      operationId: replaceQuotationsOfRequestForQuotation
      description: Replaces all quotations belonging to a request for quotation. You
        can send a list of resources that will replace all previous values.
      parameters:
      - name: request_for_quotation_id
        in: path
        description: Id of the request for quotation of which the quotations will
          be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/QuotationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
    delete:
      summary: Remove quotations from a request for quotation
      operationId: deleteQuotationsFromRequestForQuotation
      description: Remove one or more quotations from a request for quotation.
      parameters:
      - name: request_for_quotation_id
        in: path
        description: Id of the request for quotation from which the quotations will
          be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/QuotationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
  "/request_for_quotations/{request_for_quotation_id}/status":
    get:
      summary: Get the status of the specific request for quotation
      operationId: getRequestForQuotationIdStatus
      description: |-
        Returns the status of the request for quotation. Needed if only permission on request for quotation but not on tenant.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include value: ```tenant```
      parameters:
      - name: request_for_quotation_id
        in: path
        description: Id of the specified request for quotation
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/RequestForQuotationStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotation
      - RequestForQuotationStatus
  "/softwares":
    get:
      summary: Get a range of softwares
      operationId: getSoftwares
      description: |-
        Returns a list of softwares.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```software_attachments```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/SoftwareTypeIDFilter"
      - "$ref": "#/parameters/SoftwareOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SoftwaresResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Software
    post:
      summary: Create a new software
      operationId: createSoftware
      description: |-
        Create a new software.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - name: Body
        in: body
        description: Object body that will be created.
        required: true
        schema:
          "$ref": "#/definitions/SoftwareRequestPost"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/SoftwareResponse"
          headers:
            Location:
              description: url of the created software
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Software
  "/softwares/{id}":
    get:
      summary: Get a single software
      operationId: getSoftwareById
      description: |-
        Get a specific software identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```software_attachments```
      parameters:
      - name: id
        in: path
        description: Id of the software to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SoftwareResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Software
    patch:
      summary: Update a software
      operationId: updateSoftware
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the software to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/SoftwareRequestPatch"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Software
    delete:
      summary: Delete a software
      operationId: deleteSoftware
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the software to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Software
  "/softwares/{software_id}/attachments":
    get:
      summary: Get all software attachments of one software
      operationId: getSoftwareAttachmentsOfSoftware
      description: Returns a list of all software attachments that are available in
        your scope. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array.'
      parameters:
      - "$ref": "#/parameters/SoftwarePathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/RemarksFilter"
      - "$ref": "#/parameters/FileNameFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SoftwareAttachmentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Software
  "/spare_parts":
    get:
      summary: Get a range of spare parts
      operationId: getSpareParts
      description: |-
        Returns a list of all spare parts that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/OrderCodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SparePartsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePart
    post:
      summary: Create a new spare part
      operationId: createSparePart
      description: |-
        Spare parts need a unique order_code and a tenant.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - name: Body
        in: body
        description: Spare part object that needs to be created.
        required: true
        schema:
          "$ref": "#/definitions/SparePartRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/SparePartResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePart
  "/spare_parts/{id}":
    get:
      summary: Get a single spare part
      operationId: getSparePartById
      description: |-
        Get a specific spare part identified by the ID in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: ID of the spare part to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SparePartResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePart
    patch:
      summary: Update a spare part
      operationId: updateSparePart
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: ID of the spare part to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/SparePartRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePart
    delete:
      summary: Delete a spare part
      operationId: deleteSparePart
      description: Delete a specific resource identified by the ID in the URL.
      parameters:
      - name: id
        in: path
        description: ID of the spare part to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePart
  "/spare_parts/{spare_part_id}/documents":
    get:
      summary: Get all documents of a spare part
      operationId: getDocumentsOfSparePart
      description: |-
        Returns a list of documents assigned to the specified spare part.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, classification, categories, categories.parent, categories.standards, attachments```
      parameters:
      - "$ref": "#/parameters/SparePartPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePart
    post:
      summary: Add document to a spare part
      operationId: addDocumentsToSparePart
      description: Add one or more documents to a spare part.
      parameters:
      - name: spare_part_id
        in: path
        description: ID of the spare part to which the documents will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePart
    patch:
      summary: Replace the documents of a spare part
      operationId: replaceDocumentsOfSparePart
      description: Replaces all documents belonging to a spare part. You can send
        a list of resources that will replace all previous values.
      parameters:
      - name: spare_part_id
        in: path
        description: ID of the spare part of which the documents will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePart
    delete:
      summary: Remove documents from a spare part
      operationId: removeDocumentsFromSparePart
      description: Remove one or more documents from a spare part.
      parameters:
      - name: spare_part_id
        in: path
        description: ID of the spare part to which the documents will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePart
  "/spare_parts/{spare_part_id}/status-options":
    get:
      summary: Get all possible statuses for the specified spare part
      operationId: getSparePartStatusesOptions
      description: |-
        Returns a list of all possible spare part statuses for the specified spare part.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: spare_part_id
        in: path
        description: ID of the specified spare part
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: spare_part_statuses
            type: object
            properties:
              spare_part_statuses:
                type: array
                items:
                  "$ref": "#/definitions/SparePartStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePart
      - SparePartStatus
  "/spare_parts/{spare_part_id}/type-options":
    get:
      summary: Get all possible types for the specified spare part
      operationId: getSparePartTypesOptions
      description: |-
        Returns a list of all possible spare part types for the specified spare part.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: spare_part_id
        in: path
        description: ID of the specified spare part
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: spare_part_types
            type: object
            properties:
              spare_part_types:
                type: array
                items:
                  "$ref": "#/definitions/SparePartTypeResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePart
      - SparePartType
  "/subscriptions":
    get:
      summary: Get a range of subscriptions
      operationId: getSubscriptions
      description: "Returns a list of subscriptions.\n\nPossible include values: ```user,
        user.usage, specifications, specifications[key1,key2], customer``` "
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/UserIDFilter"
      - "$ref": "#/parameters/ClientApplicationIDFilter"
      - "$ref": "#/parameters/ExternalReferenceFilter"
      - "$ref": "#/parameters/SubscriptionStatusFilter"
      - "$ref": "#/parameters/NotificationStatusFilter"
      - "$ref": "#/parameters/AssetNotificationStatusFilter"
      - "$ref": "#/parameters/DataStorageNotificationStatusFilter"
      - "$ref": "#/parameters/FileStorageNotificationStatusFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/StartDateFilter"
      - "$ref": "#/parameters/EndDateFilter"
      - "$ref": "#/parameters/CreatedAtFilter"
      - "$ref": "#/parameters/CreatedAtFromFilter"
      - "$ref": "#/parameters/CreatedAtToFilter"
      - "$ref": "#/parameters/UpdatedAtFilter"
      - "$ref": "#/parameters/UpdatedAtFromFilter"
      - "$ref": "#/parameters/UpdatedAtToFilter"
      - "$ref": "#/parameters/ScopeFilter"
      - "$ref": "#/parameters/ResellerLabelFilter"
      - "$ref": "#/parameters/CustomerIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SubscriptionsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
    post:
      summary: Create a new subscription
      operationId: createSubscription
      description: Creates a new subscription. Only available for technical_users
        of the client_application and admins. Setting a successor or predecessor is
        possible. The client_application and user of the given Subscription and the
        reference Subscription have to match to do so.
      parameters:
      - in: body
        name: Body
        description: subscription body
        required: true
        schema:
          "$ref": "#/definitions/SubscriptionRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/SubscriptionResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
  "/subscriptions/{id}":
    get:
      summary: Get a single subscription
      operationId: getSubscriptionById
      description: "Get a specific subscription identified by the id in the URL.\n\nPossible
        include values: ```user, user.usage, specifications, specifications[key1,key2],
        customer``` "
      parameters:
      - name: id
        in: path
        description: Id of the subscription to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SubscriptionResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
    patch:
      summary: Update a subscription
      operationId: updateSubscription
      description: Update accessible parameters of the requested resource. Setting
        a successor or predecessor is possible. The client_application and user of
        the given Subscription and the reference Subscription have to match to do
        so. The successor/predecessor of a subscription cant be itself
      parameters:
      - name: id
        in: path
        description: Id of the subscription to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/SubscriptionRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
    delete:
      summary: Delete a subscription
      operationId: deleteSubscription
      description: Delete a specific subscription identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the subscription
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
  "/subscriptions/{subscription_id}/asset_assignment":
    post:
      summary: Assign assets to a subscription based on a filter
      operationId: assignAssetSetToSubscription
      description: Assign one or more assets to a subscription based on a filter.
        Body may contain an object id and type which then will return all assets assigned
        to that object directly or indirectly (through other objects). Body may contain
        an index search query to search assets based on a set of fields (like in the
        /search endpoint), only assets matching that search will be returned. Body
        may combine these conditions or even may contain none of them (in the latter
        case all readable assets is used). The assets returned from the filter are
        then assigned to the subscription. An error is raised if the filter given,
        does not contain any asset. If an asset is already assigned, it will be ignored.
      parameters:
      - name: subscription_id
        in: path
        description: Id of the subscription to which the assets will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/SubscriptionAssetAssignmentRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
    delete:
      summary: Unassign assets to a subscription based on a filter
      operationId: unassignAssetSetToSubscription
      description: Unassign one or more assets to a subscription based on a filter.
        Body may contain an object id and type which then will return all assets assigned
        to that object directly or indirectly (through other objects). Body may contain
        an index search query to search assets based on a set of fields (like in the
        /search endpoint), only assets matching that search will be returned. Body
        may combine these conditions or even may contain none of them (in the latter
        case all readable assets is used). The assets returned from the filter are
        then unassigned to the subscription. An error is raised if the filter given,
        does not contain any asset. If an asset is already unassigned, it will be
        ignored.
      parameters:
      - name: subscription_id
        in: path
        description: Id of the subscription to which the assets will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/SubscriptionAssetAssignmentRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
  "/subscriptions/{subscription_id}/assets":
    get:
      summary: Get all assets of one subscription
      operationId: getAssetsOfSubscription
      description: |-
        Returns a list of all assets that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ```status, tenant, parent, pictures, product, product.manufacturer, product.pictures, product.status, product.categories, product.categories.parent, specifications, specifications[key1,key2], product.tenant,
                                    product.manufacturer.tenant, status.tenant, instrumentations ```
      parameters:
      - "$ref": "#/parameters/SubscriptionPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/SerialNumberFilter"
      - "$ref": "#/parameters/ProductIDFilter"
      - "$ref": "#/parameters/ProductCategoryIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StatusCodeFilter"
      - "$ref": "#/parameters/ProductionDateFilter"
      - "$ref": "#/parameters/ProductionDateFromFilter"
      - "$ref": "#/parameters/ProductionDateToFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/NodeIDinAssetFilter"
      - "$ref": "#/parameters/CreatedAtFilter"
      - "$ref": "#/parameters/CreatedAtFromFilter"
      - "$ref": "#/parameters/CreatedAtToFilter"
      - "$ref": "#/parameters/UpdatedAtFilter"
      - "$ref": "#/parameters/UpdatedAtFromFilter"
      - "$ref": "#/parameters/UpdatedAtToFilter"
      - "$ref": "#/parameters/OwnershipClaimedFilter"
      - "$ref": "#/parameters/PermissionFilter"
      - "$ref": "#/parameters/AssetsOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
    post:
      summary: Add assets to a subscription
      operationId: addAssetsToSubscription
      description: Add one or more assets to a subscription.
      parameters:
      - name: subscription_id
        in: path
        description: Id of the subscription to which the assets will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
    patch:
      summary: Replace the assets of a subscription
      operationId: replaceAssetsOfSubscription
      description: Replaces all assets belonging to a subscription in your accessible
        scope. You can send a list of resources that will replace all previous values.
      parameters:
      - name: subscription_id
        in: path
        description: Id of the subscription of which the assets will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
    delete:
      summary: Remove assets from a subscription
      operationId: removeAssetsFromSubscription
      description: Remove one or more assets from a subscription in your accessible
        scope.
      parameters:
      - name: subscription_id
        in: path
        description: Id of the subscription from which the assets will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/AssetIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
  "/subscriptions/{subscription_id}/seats":
    get:
      summary: Get all users or invited emails having a seat in subscription
      operationId: getSeatUsersOfSubscription
      description: |-
        Returns a list of all users or emails.

        Possible include values: ```subscription```
      parameters:
      - "$ref": "#/parameters/SubscriptionPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/EMailFilter"
      - "$ref": "#/parameters/UserIDFilter"
      - "$ref": "#/parameters/SubscriptionSeatStatusFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SubscriptionSeatsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
    post:
      summary: Add users (existing users) or emails (new users) to a seat in subscription
      operationId: addSeatUsersToSubscription
      description: Add one or more users to a seat in subscription. User can only
        have one subscription per service (as seat user or as owner), the amount of
        available seats is defined in seat_quota of subscription. One or more emails
        can also be sent for users that do not yet exist in Netilion, the users emails
        will then be invited to join Netilion. ```Either id or email pro entry should
        be provided (not both).``` If an email is provided for existing user, then
        given user will be used.
      parameters:
      - name: subscription_id
        in: path
        description: Id of the subscription to which the user will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/UserIDorEmails"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
    delete:
      summary: Remove users (existing users) or emails (new users) from a seat in
        subscription
      operationId: removeSeatUsersFromSubscription
      description: |-
        Remove one or more users or emails from a seat in subscription. **Either id or email pro entry should be provided (not both).** If an email is provided for existing user, then given user will be used.
        This operation does send notification emails to the seat user, so it should be used by the owner to remove seats.
      parameters:
      - name: subscription_id
        in: path
        description: Id of the subscription from which the user will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/UserIDorEmails"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
  "/subscriptions/{subscription_id}/specifications":
    get:
      summary: Get specifications of a subscription
      operationId: getSpecificationsOfSubscription
      description: Returns the specification of an object in your accessible scope.
        If no specifications are defined, this is just an empty object. Specification
        must have the form below.
      parameters:
      - name: subscription_id
        in: path
        description: Id of the specified subscription
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationsResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
      - Specification
    patch:
      summary: Update specifications of a subscription
      operationId: updateSpecificationsOfSubscriptions
      description: Update the specification object of a subscription in your accessible
        scope. To add specifications, just add the key and set the value object with
        value, unit and source_timestamp. To mark an existing specification to be
        unknown, the value could be set to null. To delete keys, use the delete method.
        Multiple specification objects can be sent in the same request. Keys inside
        a specification are unique and can only be added once. Keys can only consist
        of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z.
        For a key that is send multiple times in the request body, only the last key-value
        is saved.
      parameters:
      - name: subscription_id
        in: path
        description: Id of the specified subscription
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications objects to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
      - Specification
    delete:
      summary: Delete specifications of a subscription
      operationId: removeSpecificationsFromSubscriptions
      description: The specification keys in the body will be removed of the object
        in your accessible scope. If a key does not exist it will be ignored.
      parameters:
      - name: subscription_id
        in: path
        description: Id of the specified subscription
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Array of keys to delete from specifications
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsDelete"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
      - Specification
  "/subscriptions/{subscription_id}/specifications/rename":
    patch:
      summary: Rename a specification key
      operationId: renameSpecificationsOfSubscriptions
      description: Rename one specification key of a subscription in your accessible
        scope. The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will
        be converted to lower-case.
      parameters:
      - name: subscription_id
        in: path
        description: Id of the specified subscription
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications object to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRename"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
      - Specification
  "/tenants":
    get:
      summary: Get a range of tenants
      operationId: getTenants
      description: Returns a list of tenants in your accessible scope. If the query
        has no matches, the response is an empty list.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/AdminUserIDFilter"
      - "$ref": "#/parameters/AdminOrUserIDFilter"
      - "$ref": "#/parameters/PublicFilter"
      - "$ref": "#/parameters/TenantOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/TenantsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
    post:
      summary: Create a new tenant
      operationId: createTenants
      description: Create a new tenant. The name of the given tenant needs to be unique.
        The tenant will not be created when this constraint is violated.
      parameters:
      - name: Body
        in: body
        description: Object body that will be created. Tenant name is required
        required: true
        schema:
          "$ref": "#/definitions/TenantRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/TenantResponse"
          headers:
            Location:
              description: url of the created tenant
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
  "/tenants/{id}":
    get:
      summary: Get a single tenant
      operationId: getTenantsById
      description: Get a specific tenant in your accessible scope, identified by the
        id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the tenant to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/TenantResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
    patch:
      summary: Update a tenant
      operationId: updateTenant
      description: Update accessible parameters of the requested resource in your
        accessible scope.
      parameters:
      - name: id
        in: path
        description: Id of the tenant to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/TenantRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
    delete:
      summary: Delete a tenant
      operationId: deleteTenant
      description: Delete a specific resource in your accessible scope, identified
        by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the tenant to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
  "/tenants/{tenant_id}/admins":
    get:
      summary: Get all admins of a tenant
      operationId: getTenantAdmins
      description: Returns a list of all admins that are available for the tenant.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/TenantPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/FirstNameFilter"
      - "$ref": "#/parameters/LastNameFilter"
      - "$ref": "#/parameters/UserOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UsersPublicResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
    post:
      summary: Add admins to a tenant
      operationId: addTenantAdmins
      description: Add admins to a tenant. Only an admin of a tenant can add additional
        admins.
      parameters:
      - name: tenant_id
        in: path
        description: Id of the tenant to which the users will be added as admins
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object body that will be created. Tenant name is required
        required: true
        schema:
          "$ref": "#/definitions/AdminIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
    patch:
      summary: Replace the admins of a tenant
      operationId: replaceTenantAdmins
      description: Replaces all admins of the tenant. You can send a list of resources
        that will replace all previous values.
      parameters:
      - name: tenant_id
        in: path
        description: Id of the tenant of which the admins will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/AdminIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
    delete:
      summary: Remove admins from a tenant
      operationId: removeTenantAdmins
      description: Remove one or more admins from a tenant identified by id in the
        url.
      parameters:
      - name: tenant_id
        in: path
        description: Id of the tenant from which the admins will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/AdminIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
  "/tenants/{tenant_id}/users":
    get:
      summary: Get all users of a tenant
      operationId: getTenantUsers
      description: Returns a list of all users that are available for the tenant.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/TenantPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/FirstNameFilter"
      - "$ref": "#/parameters/LastNameFilter"
      - "$ref": "#/parameters/UserOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UsersPublicResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
    post:
      summary: Add users to a tenant
      operationId: addTenantUsers
      description: Add users to a tenant. Only an admin of a tenant can add additional
        users.
      parameters:
      - name: tenant_id
        in: path
        description: Id of the tenant to which the users will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object body that will be created. Tenant name is required
        required: true
        schema:
          "$ref": "#/definitions/UserIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
    patch:
      summary: Replace the users of a tenant
      operationId: replaceTenantUsers
      description: Replaces all users of the tenant. You can send a list of resources
        that will replace all previous values.
      parameters:
      - name: tenant_id
        in: path
        description: Id of the tenant of which the users will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/UserIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
    delete:
      summary: Remove users from a tenant
      operationId: removeTenantUsers
      description: Remove one or more users from a tenant identified by id in the
        url.
      parameters:
      - name: tenant_id
        in: path
        description: Id of the tenant from which the admins will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/UserIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Tenant
  "/units":
    get:
      summary: Get a range of units.
      operationId: getUnits
      description: 'Returns a list of all units that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array. Possible include
        values: `base_unit`'
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/SymbolFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/BaseUnitIDFilter"
      - "$ref": "#/parameters/UnitOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UnitsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Unit
  "/units/{id}":
    get:
      summary: Get a single Unit
      operationId: getUnitById
      description: 'Get a specific unit identified by the id in the URL. Possible
        include values: `base_unit`'
      parameters:
      - name: id
        in: path
        description: Id of the unit to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UnitResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Unit
  "/users":
    get:
      summary: Get a range of users
      operationId: getUsers
      description: 'Returns a list of users in your permission scope. If the query
        has no matches, the response is an empty list. Possible include values: ```userroles,
        usergroups, specifications, specifications[key1,key2]```. Specification filters
        and includes are only available for admin users'
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/EMailFilter"
      - "$ref": "#/parameters/FirstNameFilter"
      - "$ref": "#/parameters/LastNameFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/CreatedAtFilter"
      - "$ref": "#/parameters/CreatedAtFromFilter"
      - "$ref": "#/parameters/CreatedAtToFilter"
      - "$ref": "#/parameters/UpdatedAtFilter"
      - "$ref": "#/parameters/UpdatedAtFromFilter"
      - "$ref": "#/parameters/UpdatedAtToFilter"
      - "$ref": "#/parameters/UserOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UsersResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/{id}":
    get:
      summary: Get a single user
      operationId: getUserById
      description: 'Get a specific user in your permission scope, identified by the
        id in the URL. Possible include values: ```userroles, usergroups, specifications,
        specifications[key1,key2]```'
      parameters:
      - name: id
        in: path
        description: Id of the user to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UserResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    patch:
      summary: Update a user
      operationId: updateUser
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the user to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/UserChangeRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    delete:
      summary: Delete a user
      operationId: deleteUser
      description: Delete a specific resource in your permission scope identified
        by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the user to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/{user_id}/sign_ins":
    get:
      summary: Get sign_ins of a user
      operationId: getSignInsOfUser
      description: Returns a list of all sign ins of a specific user identified by
        id in the url. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array.'
      parameters:
      - name: user_id
        in: path
        description: Id of the user to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/TimeFilter"
      - "$ref": "#/parameters/TimeFromFilter"
      - "$ref": "#/parameters/TimeToFilter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SignInsResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/{user_id}/specifications":
    get:
      summary: Get specifications of a user
      operationId: getSpecificationsOfUser
      description: Returns the specification of an object in your accessible scope.
        If no specifications are defined, this is just an empty object. Specification
        must have the form below.
      parameters:
      - name: user_id
        in: path
        description: Id of the specified user
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationsResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
      - Specification
    patch:
      summary: Update specifications of a user
      operationId: updateSpecificationsOfUsers
      description: Update the specification object of a user in your accessible scope.
        To add specifications, just add the key and set the value object with value,
        unit and source_timestamp. To mark an existing specification to be unknown,
        the value could be set to null. To delete keys, use the delete method. Multiple
        specification objects can be sent in the same request. Keys inside a specification
        are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9
        . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that
        is send multiple times in the request body, only the last key-value is saved.
      parameters:
      - name: user_id
        in: path
        description: Id of the specified user
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications objects to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
      - Specification
    delete:
      summary: Delete specifications of a user
      operationId: removeSpecificationsFromUsers
      description: The specification keys in the body will be removed of the object
        in your accessible scope. If a key does not exist it will be ignored.
      parameters:
      - name: user_id
        in: path
        description: Id of the specified user
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Array of keys to delete from specifications
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsDelete"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
      - Specification
  "/users/{user_id}/specifications/rename":
    patch:
      summary: Rename a specification key
      operationId: renameSpecificationsOfUsers
      description: Rename one specification key of a user in your accessible scope.
        The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted
        to lower-case.
      parameters:
      - name: user_id
        in: path
        description: Id of the specified user
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications object to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRename"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
      - Specification
  "/users/{user_id}/usage":
    get:
      summary: Get the use of file storage, data storage and the number of assets
        registred of a user
      operationId: getUsageOfUser
      description: Returns the file storage, data storage and number of assets of
        a specific user identified by id in the url.'
      parameters:
      - name: user_id
        in: path
        description: Id of the user to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UsageResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/{user_id}/usergroups":
    get:
      summary: Get the user groups of one user
      operationId: getUserGroupsOfUser
      description: Returns a list of all usergroups of a specific user identified
        by id in the url. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array.'
      parameters:
      - "$ref": "#/parameters/UserPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/UserGroupOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UserGroupsWithUsers"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    post:
      summary: Add user groups to a user
      operationId: addUserGroupsToUser
      description: Add one or more user groups to a user identified by id in the url.
      parameters:
      - name: user_id
        in: path
        description: Id of the user to whom the user groups will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/UserGroupIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    patch:
      summary: Replace the user groups of a user
      operationId: replaceUserGroupsOfUser
      description: Replaces all user groups belonging to a user. You can send a list
        of resources that will replace all previous values.
      parameters:
      - name: user_id
        in: path
        description: Id of the user of which the user groups will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced.
        required: true
        schema:
          "$ref": "#/definitions/UserGroupIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    delete:
      summary: Remove user groups from a user
      operationId: removeUserGroupFromUser
      description: Remove one or more user groups from a user identified by id in
        the url.
      parameters:
      - name: user_id
        in: path
        description: Id of the user from which the user groups will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/UserGroupIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/{user_id}/userroles":
    get:
      summary: Get all user roles of one user
      operationId: getUserRolesOfUser
      description: Returns a list of all user roles that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/UserPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/UserRoleOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UserRolesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    post:
      summary: Add user roles to a user
      operationId: addUserRolesToUser
      description: Add one or more user roles to a user. To work with roles, admin
        role is required.
      parameters:
      - name: user_id
        in: path
        description: Id of the user to which the user roles will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/UserRoleIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    patch:
      summary: Replace the user roles of a user
      operationId: replaceUserRolesOfUser
      description: Replaces all user roles belonging to a user. You can send a list
        of resources that will replace all previous values. To work with roles, admin
        role is required.
      parameters:
      - name: user_id
        in: path
        description: Id of the user of which the user roles will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/UserRoleIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    delete:
      summary: Remove user roles from a user
      operationId: removeUserRolesFromUser
      description: Remove one or more user roles from a user. To work with roles,
        admin role is required.
      parameters:
      - name: user_id
        in: path
        description: Id of the user from which the user roles will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/UserRoleIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/current":
    get:
      summary: Get current user
      operationId: getCurrentUser
      description: 'Get the user authenticated in the current context. Possible include
        values: ```userroles, usergroups, usage, demo_data, specifications, specifications[key1,key2]```'
      parameters:
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/CurrentUserResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/current/access_rights":
    get:
      summary: Get current users access rights for a permitable
      operationId: getCurrentUserAccessRights
      description: Get the access rights for a permitable of the authenticated user
        in the current context.
      parameters:
      - name: permitable_id
        in: query
        description: id of the permitable.
        type: integer
        format: int64
        required: true
      - name: permitable_type
        in: query
        description: permitable type eg. Asset, Node, EDM::EdgeDevice.
        type: string
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AccessRightsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/current/data_exports":
    get:
      summary: Get current users data exports
      operationId: getCurrentUserDataExports
      description: Get the data exports of the authenticated user.
      parameters:
      - name: type
        in: query
        description: type of data export, can be complete, measurements, batch_values,
          instrumentation_values, asset_vdi_2770_documentation_container or system_vdi_2770_documentation_container.
        type: string
        required: false
      - name: instrumentation_id
        in: query
        description: ID of the instrumentation to export data from.
        type: integer
        format: int64
        required: false
      - name: asset_id
        in: query
        description: ID of the asset to export data from.
        type: integer
        format: int64
        required: false
      - name: system_id
        in: query
        description: ID of the system to export data from.
        type: integer
        format: int64
        required: false
      - name: batch_id
        in: query
        description: ID of the batch to export data from.
        type: integer
        format: int64
        required: false
      - name: language
        in: query
        description: filter for requested export language
        type: string
        required: false
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DataExportsResponse"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    post:
      summary: create users data export for current user
      operationId: createCurrentUserDataExport
      description: create the data export of the authenticated user in the current
        context.
      parameters:
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/DataExportRequest"
      responses:
        '201':
          description: The data export was created successfully.
          schema:
            "$ref": "#/definitions/DataExportResponse"
          headers:
            Location:
              type: string
              description: link to get the newly created data export.
        '401':
          "$ref": "#/responses/401"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/current/data_exports/{id}":
    get:
      summary: Get a single user data export
      operationId: getCurrentUserDataExportbyId
      description: Get the data exports of the authenticated user.
      parameters:
      - name: id
        in: path
        description: Id of the data_export to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DataExportResponse"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    delete:
      summary: delete users data export for current user
      operationId: deleteCurrentUserDatasExport
      description: delete the data export of the authenticated user in the current
        context.
      parameters:
      - name: id
        in: path
        description: Id of the data_export to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/current/data_exports/{id}/download":
    get:
      summary: Get current users data export zip file
      operationId: getCurrentUserDataExportsFile
      description: Get the data export file of the authenticated user in the current
        context. Content-Transfer-Encoding header is set to binary.
      parameters:
      - name: id
        in: path
        description: Id of the data_export to download
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: A file download stream
          headers:
            Content-Type:
              type: string
              description: application/zip is used here
            Content-Disposition:
              type: string
              description: contains the original files filename
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/current/demo_data":
    get:
      summary: Get information if demo data is available for user
      operationId: getCurrentUserDemoData
      description: Get information if the user has activated the demo data of the
        netilion services
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/CurrentUserDemoDataResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    post:
      summary: Activate demo data for user
      operationId: setCurrentUserDemoData
      description: give user access to the demo data of the netilion services, no
        body parameters are required
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    delete:
      summary: Deactivate demo data for user
      operationId: deleteCurrentUserDemoData
      description: remove access rights to the demo data of the netilion services
        for the user, no parameters are required
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/current/notifications":
    get:
      summary: Get relevant notifications for the current authenticated user
      operationId: getCurrentUserNotifications
      description: |-
        Returns a list of all notifications available for the authenticated user on the current client application.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```content```. To get a translation set Accept-Language.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/StartDatetimeFilter"
      - "$ref": "#/parameters/StartDatetimeFromFilter"
      - "$ref": "#/parameters/StartDatetimeToFilter"
      - "$ref": "#/parameters/EndDatetimeFilter"
      - "$ref": "#/parameters/EndDatetimeFromFilter"
      - "$ref": "#/parameters/EndDatetimeToFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: notifications
            type: object
            properties:
              notifications:
                type: array
                items:
                  "$ref": "#/definitions/NotificationResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/current/notifications/{id}":
    delete:
      summary: Delete the given notification for the current user
      operationId: deleteCurrentUserNotifications
      description: Delete the given notification for the currently authenticated user.
      parameters:
      - name: id
        in: path
        description: Id of the notification to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/users/lookup":
    get:
      summary: Lookup user by email
      operationId: lookupUser
      description: Get a user for a given email address.
      parameters:
      - name: email
        in: query
        description: email of the user to lookup.
        type: string
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UserPublicResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/asset/specification_keys":
    get:
      summary: Get existing asset specification keys
      operationId: getSpecificationKeysOfAssets
      description: Returns the existing specification keys in all readable assets.
      parameters:
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      - name: ui_visible
        in: query
        type: boolean
        required: false
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationKeys"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Asset
      - Specification
  "/asset/statuses":
    get:
      summary: Get a range of asset statuses
      operationId: getAssetStatuses
      description: |-
        Returns a list of all asset statuses that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.

        Possible include value: ```tenant```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          headers:
            Content-Language:
              description: language of the status name, can be a list of languages
              type: string
          schema:
            title: asset_statuses
            type: object
            properties:
              asset_statuses:
                type: array
                items:
                  "$ref": "#/definitions/AssetStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - AssetStatus
    post:
      summary: Create a new asset status
      operationId: createAssetStatus
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: AssetStatus object to create.
        required: true
        schema:
          "$ref": "#/definitions/AssetStatusRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/AssetStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - AssetStatus
  "/asset/statuses/{id}":
    get:
      summary: Get a single asset status
      operationId: getAssetStatusById
      description: |-
        Get a specific asset status identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```tenant```
      parameters:
      - name: id
        in: path
        description: Id of asset status to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          headers:
            Content-Language:
              description: language of the status name, can be a list of languages
              type: string
          schema:
            "$ref": "#/definitions/AssetStatusResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - AssetStatus
    patch:
      summary: Update an asset status
      operationId: updateAssetStatus
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the asset to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/AssetStatusRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - AssetStatus
    delete:
      summary: Delete an asset status
      operationId: deleteAssetStatus
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the asset status to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - AssetStatus
  "/assets/{asset_id}/events":
    get:
      summary: Get all events of one asset
      operationId: getEventsOfAsset
      description: |-
        Returns a list of all events belonging to an asset in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ``assets, instrumentations, nodes, status, type``
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StartDatetimeFilter"
      - "$ref": "#/parameters/StartDatetimeFromFilter"
      - "$ref": "#/parameters/StartDatetimeToFilter"
      - "$ref": "#/parameters/EndDatetimeFilter"
      - "$ref": "#/parameters/EndDatetimeFromFilter"
      - "$ref": "#/parameters/EndDatetimeToFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/EventOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EventsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Asset
    post:
      summary: Create a new event for an asset
      operationId: createEventForAsset
      description: Events must have a name, and can have a start_datetime (if not
        provided, the date of creation will be used as default value), end_datetime,
        event_type, event_status, description and responsible
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object to be created.
        required: true
        schema:
          "$ref": "#/definitions/EventRequestNoAssets"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/EventResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Asset
    delete:
      summary: Remove events from an asset
      operationId: removeEventFromAsset
      description: Remove one or more events from an asset in your accessible scope.
        If the event has no more related assets, the event will be deleted
      parameters:
      - name: asset_id
        in: path
        description: Id of the asset from which the events will removed.
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          type: object
          title: events
          required:
          - events
          properties:
            events:
              type: array
              title: events
              items:
                "$ref": "#/definitions/Nested_ID"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Asset
  "/assets/{asset_id}/health_conditions":
    get:
      summary: Get all health conditions assigned to an asset
      operationId: getAssetHealthConditions
      description: |-
        Returns a list of health conditions of an asset.

        Possible include value: ``asset_status, causes, causes.remedies``
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/HealthConditionIDFilter"
      - "$ref": "#/parameters/DiagnosisCodeFilter"
      - "$ref": "#/parameters/AssetStatusIDFilter"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          headers:
            Content-Language:
              description: language of the description field, can be a list of languages
              type: string
          schema:
            "$ref": "#/definitions/AssetHealthConditionsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - AssetHealthCondition
    post:
      summary: Add health conditions to an asset
      operationId: addHealthConditionsToAsset
      description: Add one or more health conditions to an asset.
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/AssetHealthConditionsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - AssetHealthCondition
    patch:
      summary: Replace health conditions of an asset
      operationId: reaplaceHealthConditionsOfAsset
      description: Replaces all health conditions belonging to an asset. You can send
        a list of resources that will replace all previous values.
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - name: Body
        in: body
        description: Resources that shall be replaced.
        required: true
        schema:
          "$ref": "#/definitions/AssetHealthConditionsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - AssetHealthCondition
    delete:
      summary: Remove health conditions of an asset
      operationId: removeHealthConditionsOfAsset
      description: Remove one or more health conditions from an asset.
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/AssetHealthConditionsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - AssetHealthCondition
  "/assets/{asset_id}/health_conditions/calculate":
    get:
      summary: Calculate health conditions of an asset
      operationId: calculateAssetHealthConditions
      description: 'Calculates the health conditions of an asset defined by the given
        diagnosis message, protocol and device ident. Possible include values: ``asset_status,causes,causes.remedies``'
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - name: protocol
        in: query
        description: Filter accepts 'PROFIBUS', 'HART', 'ETHERNETIP' or 'MODBUS'
        required: true
        type: string
      - name: protocol_version
        in: query
        description: definition of the protocol version. For example 5, 6 or 7 for
          HART
        required: false
        type: string
      - name: diagnosis_message
        in: query
        description: diagnosis message of an asset
        required: true
        type: string
      - name: device_ident
        in: query
        description: device_ident of the asset
        required: false
        type: string
      - name: product_identifier
        in: query
        description: product_identifier of the asset
        required: false
        type: string
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          headers:
            Content-Language:
              description: language of the description field, can be a list of languages
              type: string
          schema:
            "$ref": "#/definitions/AssetHealthConditionsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - AssetHealthCondition
    patch:
      summary: Calculate health conditions of an asset and update asset with this
        health conditions
      operationId: calculateAssetHealthConditionsAndUpdateAsset
      description: Calculates the health conditions of an asset defined by the given
        diagnosis message, protocol and device ident. The asset will be automatically
        updated with the result.
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - name: Body
        in: body
        description: Resources that shall be replaced.
        required: true
        schema:
          "$ref": "#/definitions/AssetHealthConditionsCalculateRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - AssetHealthCondition
  "/assets/{asset_id}/health_conditions/timemachine":
    get:
      summary: Get all health_conditions historical evolution the given asset had
        assigned
      operationId: getHealthConditionsOfAssetTimemachine
      description: |-
        Returns a list of all health_conditions available in your scope of
        an asset.
        You can apply query parameters in the request
        to get a filtered list. If the query has no matches, the response will show
        an empty array.
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/FromPlainFilter"
      - "$ref": "#/parameters/ToPlainFilter"
      - "$ref": "#/parameters/AssetHealthConditionTimemachineOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetHealthConditionsTimemachineResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - AssetHealthCondition
  "/assets/{asset_id}/values":
    post:
      summary: Create asset values
      operationId: createAssetValues
      description: |-
        Store values measured by an asset. For performance reasons, this endpoint behaves somewhat differently than normal endpoints:

        * The data passed to this endpoint is processed asynchronously.
        * This endpoint always returns an empty response with status 204 No Content.
        * The data will be validated during processing. Invalid data will be dropped silently.
        * The request size is limited to 500kb, requests larger then 500kb will get an "413 Payload Too Large" error.

        Data validations and manipulation:

          * Keys and groups can only consist of the characters [a-z A-Z 0-9 . - _ ].
          * Keys and groups will be converted to lower case strings.
          * Keys and groups must be between 1 and 128 characters long.
          * Units can be passed as id or code. See the units endpoint for all available units.
          * The timestamp is not mandatory and will be set to the time the value was transmitted to the server (This only works if the values get transferred one at a time, if you send multiple values without timestamp at once, all values will get the same timestamp and there for only the last one will be stored)
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - name: Body
        in: body
        description: Values to store to an asset.
        required: true
        schema:
          "$ref": "#/definitions/AssetValuesRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '413':
          "$ref": "#/responses/413"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Values
      - Asset
    get:
      summary: Get latest values for the asset.
      operationId: getAssetValues
      description: |-
        Returns a collection of the latest value for every key of the asset.
        Possible include values: ```unit, unit.base_unit```
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/UsePreferredUnitsAssetParam"
      - "$ref": "#/parameters/KeyFilter"
      - "$ref": "#/parameters/KeyUnitIDFilter"
      - "$ref": "#/parameters/GroupFilter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetValuesResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Values
      - Asset
  "/assets/{asset_id}/values/{key}":
    get:
      summary: Get asset values for a specific key.
      operationId: getAssetValuesForKey
      description: |-
        Returns a collection of the history values of an values for the specified key.
        For a aggregated result of the values the filter parameters aggregation and interval are mandatory.
        Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section.
        With the filter parameters from to it is possible to receive the history of a defined time period.
        Possible include values: ```unit```
      parameters:
      - "$ref": "#/parameters/AssetPathID"
      - "$ref": "#/parameters/AssetValuesKeyPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/AssetValuePagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/UsePreferredUnitsAssetKeyParam"
      - "$ref": "#/parameters/IncludeTotalCountParam"
      - "$ref": "#/parameters/AssetValueFromFilter"
      - "$ref": "#/parameters/AssetValueToFilter"
      - "$ref": "#/parameters/UnitFilter"
      - "$ref": "#/parameters/AggregationFilter"
      - "$ref": "#/parameters/AggregationIntervalFilter"
      - "$ref": "#/parameters/AssetValueStatusFilter"
      - "$ref": "#/parameters/AssetValueHoldFilter"
      - "$ref": "#/parameters/AssetValueSimulatedFilter"
      - "$ref": "#/parameters/AssetValuesOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetKeyValuesResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Values
      - Asset
  "/batches/{batch_id}/specifications":
    get:
      summary: Get specifications of a batch
      operationId: getSpecificationsOfBatch
      description: Returns the specification of an object in your accessible scope.
        If no specifications are defined, this is just an empty object. Specification
        must have the form below.
      parameters:
      - name: batch_id
        in: path
        description: Id of the specified batch
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationsResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
    patch:
      summary: Update specifications of a batch
      operationId: updateSpecificationsOfBatch
      description: Update the specification object of a batch in your accessible scope.
        To add specifications, just add the key and set the value object with value,
        unit and source_timestamp. To mark an existing specification to be unknown,
        the value could be set to null. To delete keys, use the delete method. Multiple
        specification objects can be sent in the same request. Keys inside a specification
        are unique and can only be added once. Keys can only consist of [a-z A-Z 0-9
        . - _ ]. All uppercase A-Z are converted to lower-case a-z. For a key that
        is send multiple times in the request body, only the last key-value is saved.
      parameters:
      - name: batch_id
        in: path
        description: Id of the specified batch
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications objects to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
    delete:
      summary: Delete specifications of a batch
      operationId: removeSpecificationsFromBatch
      description: The specification keys in the body will be removed of the object
        in your accessible scope. Multiple specification keys can be sent in the same
        request. If a key does not exist it will be ignored.
      parameters:
      - name: batch_id
        in: path
        description: Id of the specified batch
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Array of keys to delete from specifications
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsDelete"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
  "/batches/{batch_id}/specifications/{key}/history":
    get:
      summary: Get the history of one specification attribute of a batch.
      operationId: getSpecificationHistoryOfBatch
      description: This might be useful for history data. The response contains a
        collection of historic values and when they`ve been updated. Since this can
        be a lot of data the service uses pagination. The history can be filtered
        by using a date range of source_timestamp and/or updated_at. Please consider
        that source_timestamp is not required and update on the attribute without
        giving a source_timestamp wont be included in the resulting response
      parameters:
      - name: batch_id
        in: path
        description: Id of the specified batch
        type: integer
        format: int64
        required: true
      - name: key
        in: path
        type: string
        required: true
        description: the exact key
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - name: source_timestamp_from
        in: query
        description: source_timestamp filter from. Starting with + will include the
          previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: source_timestamp_to
        in: query
        description: source_timestamp filter to. Ending with + will include the next
          value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: updated_at_from
        in: query
        description: updated_at filter from. Starting with + will include the previous
          value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: updated_at_to
        in: query
        description: updated_at filter to. Ending with + will include the next value
          as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - "$ref": "#/parameters/SpecificationHistoryOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationHistoryResponse"
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
  "/batches/{batch_id}/specifications/rename":
    patch:
      summary: Rename a specification key
      operationId: renameSpecificationsOfBatch
      description: Rename one specification key of a batch in your accessible scope.
        The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted
        to lower-case.
      parameters:
      - name: batch_id
        in: path
        description: Id of the specified batch
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications object to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRename"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
  "/batches/{batch_id}/values":
    get:
      summary: Get latest values for the batch.
      operationId: getBatchValues
      description: |-
        Returns a collection of the latest values for all keys of the batch.
        Possible include values: ```unit, asset, system```
      parameters:
      - "$ref": "#/parameters/BatchPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/UsePreferredUnitsInstrumentationParam"
      - "$ref": "#/parameters/KeyFilter"
      - "$ref": "#/parameters/KeyUnitIDFilter"
      - "$ref": "#/parameters/GroupFilter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetValuesResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Values
  "/batches/{batch_id}/values/{key}":
    get:
      summary: Get batch values for a specific key.
      operationId: getBatchValuesForKey
      description: |-
        Returns a collection of the history values of an values for the specified key.
        For a aggregated result of the values the filter parameters aggregation and interval are mandatory.
        Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section.
        With the filter parameters from to it is possible to receive the history of a defined time period.
        Possible include values: ```unit```
      parameters:
      - "$ref": "#/parameters/BatchPathID"
      - "$ref": "#/parameters/BatchValuesKeyPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/AssetValuePagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/UsePreferredUnitsInstrumentationKeyParam"
      - "$ref": "#/parameters/IncludeTotalCountParam"
      - "$ref": "#/parameters/AssetValueFromFilter"
      - "$ref": "#/parameters/AssetValueToFilter"
      - "$ref": "#/parameters/UnitFilter"
      - "$ref": "#/parameters/AggregationFilter"
      - "$ref": "#/parameters/AggregationIntervalFilter"
      - "$ref": "#/parameters/AssetValueStatusFilter"
      - "$ref": "#/parameters/AssetValueHoldFilter"
      - "$ref": "#/parameters/AssetValueSimulatedFilter"
      - "$ref": "#/parameters/AssetValuesOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetKeyValuesResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Values
  "/delivery/statuses":
    get:
      summary: Get a range of delivery statuses
      operationId: getDeliveryStatuses
      description: |-
        Returns a list of all delivery statuses that are available in your
        scope. You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.

        Possible include value: ```tenant```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: delivery_statuses
            type: object
            properties:
              delivery_statuses:
                type: array
                items:
                  "$ref": "#/definitions/DeliveryStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DeliveryStatus
    post:
      summary: Create a new delivery status
      operationId: createDeliveryStatus
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: DeliveryStatus object to create.
        required: true
        schema:
          "$ref": "#/definitions/DeliveryStatusRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/DeliveryStatusRequest"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DeliveryStatus
  "/delivery/statuses/{id}":
    get:
      summary: Get a single delivery status
      operationId: getDeliveryStatusById
      description: |-
        Get a specific delivery status identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: Id of delivery status to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DeliveryStatusResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DeliveryStatus
    patch:
      summary: Update an delivery status
      operationId: updateDeliveryStatuses
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the delivery to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/DeliveryStatusRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DeliveryStatus
    delete:
      summary: Delete a delivery status
      operationId: deleteDeliveryStatus
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the delivery status to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DeliveryStatus
  "/document/categories":
    get:
      summary: Get a range of document categories
      operationId: getDocumentCategories
      description: |-
        Returns a list of all document categories that are available in your
        scope. You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```tenant, parent, standards```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/StandardIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentCategoriesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentCategory
    post:
      summary: Create a new document category
      operationId: createDocumentCategory
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: Document category to create.
        required: true
        schema:
          "$ref": "#/definitions/DocumentCategoryRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/DocumentCategoryResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentCategory
  "/document/categories/{id}":
    get:
      summary: Get a single document category
      operationId: getDocumentCategoryById
      description: |-
        Get a specific document category identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```tenant, parent, standards```
      parameters:
      - name: id
        in: path
        description: Id of document category to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentCategoryResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentCategory
    patch:
      summary: Update a document category
      operationId: updateDocumentCategory
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the document category to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/DocumentCategoryRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentCategory
    delete:
      summary: Delete a document category
      operationId: deleteDocumentCategory
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the document category to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentCategory
  "/document/categories/{category_id}/documents":
    get:
      summary: Get all documents of one category
      operationId: getDocumentsOfDocumentCategory
      description: |-
        Returns a list of all documents that are available in your scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, classification, categories, categories.parent, attachments```
      parameters:
      - name: category_id
        in: path
        description: Id of the category
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentCategory
    post:
      summary: Add documents to a category
      operationId: addDocumentsToDocumentCategory
      description: Add one or more documents to a category identified by id in the
        url.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - name: category_id
        in: path
        description: Id of the category
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentCategory
    patch:
      summary: Replace documents of a category
      operationId: replaceDocumentsOfDocumentCategory
      description: Replaces all documents belonging to a category. You can send a
        list of resources that will replace all previous values.
      parameters:
      - name: category_id
        in: path
        description: Id of the category
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentCategory
    delete:
      summary: Remove documents from a category
      operationId: removeDocumentsFromDocumentCategory
      description: Remove one or more documents from a category identified by id in
        the url.
      parameters:
      - name: category_id
        in: path
        description: Id of the category
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/DocumentIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentCategory
  "/document/classifications":
    get:
      summary: Get a range of document classifications
      operationId: getDocumentClassifications
      description: |-
        Returns a list of all document classifications that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: document_classifications
            type: object
            properties:
              document_classifications:
                type: array
                items:
                  "$ref": "#/definitions/DocumentClassificationResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentClassification
    post:
      summary: Create a new document classification
      operationId: createDocumentClassification
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: DocumentClassification object to create.
        required: true
        schema:
          "$ref": "#/definitions/DocumentClassificationRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/DocumentClassificationResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentClassification
  "/document/classifications/{id}":
    get:
      summary: Get a single document classification
      operationId: getDocumentClassificationById
      description: |-
        Get a specific document classification identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: Id of document classification to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentClassificationResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentClassification
    patch:
      summary: Update a document classification
      operationId: updateDocumentClassification
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the document classification to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/DocumentClassificationRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentClassification
    delete:
      summary: Delete a document classification
      operationId: deleteDocumentClassification
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the document classification to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentClassification
  "/document/statuses":
    get:
      summary: Get a range of document statuses
      operationId: getDocumentStatuses
      description: |-
        Returns a list of all document statuses that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.

        Possible include value: ```tenant```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: document_statuses
            type: object
            properties:
              document_statuses:
                type: array
                items:
                  "$ref": "#/definitions/DocumentStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentStatus
    post:
      summary: Create a new document status
      operationId: createDocumentStatus
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: DocumentStatus object to create.
        required: true
        schema:
          "$ref": "#/definitions/DocumentStatusRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/DocumentStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentStatus
  "/document/statuses/{id}":
    get:
      summary: Get a single document status
      operationId: getDocumentStatusById
      description: |-
        Get a specific document status identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: Id of document status to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentStatusResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentStatus
    patch:
      summary: Update a document status
      operationId: updateDocumentStatus
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the document status to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/DocumentStatusRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentStatus
    delete:
      summary: Delete a document status
      operationId: deleteDocumentStatus
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the document status to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - DocumentStatus
  "/edge_device/applications/{edge_device_application_id}/client_applications":
    get:
      summary: Get all client applications of one edge device application
      operationId: getClientApplicationsOfEdgeDeviceApplication
      description: |-
        Returns a list of all client applications associated with the selected edge device application.
        Possible include values: ```technical_user```
        You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/EdgeDeviceApplicationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ClientApplicationsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    post:
      summary: Add client applications to an edge device application
      operationId: addClientApplicationsToEdgeApplication
      description: Add one or more client applications to an edge device application.
        This action requires the edge device admin role.
      parameters:
      - name: edge_device_application_id
        in: path
        description: Id of the edge device application to which the client applications
          will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/ClientApplicationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    patch:
      summary: Replace the client applications of an edge device application
      operationId: replaceClientApplicationsOfEdgeDeviceApplication
      description: |-
        Replaces all client applications belonging to an edge device application. You can send a list of resources that will replace all previous values.
        This action requires the edge device admin role.
      parameters:
      - name: edge_device_application_id
        in: path
        description: Id of the edge device application of which the client applications
          will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/ClientApplicationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
    delete:
      summary: Remove client applications from an edge device application
      operationId: removeClientApplicationsOfEdgeDeviceApplication
      description: |-
        Remove one or more client applications from an edge device application.
        This action requires the edge device admin role.
      parameters:
      - name: edge_device_application_id
        in: path
        description: Id of the edge device application from which the client applications
          will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/ClientApplicationIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ClientApplication
  "/endress/extended_order_code_lookup":
    get:
      summary: lookup for the extended order code for Endress+Hauser products
      operationId: ehExtendedOrderCodeLookup
      description: Returns an extended order code for Endress+Hauser products when
        the given order code is existing
      parameters:
      - name: order_code
        in: query
        description: any Endress+Hauser order code
        type: string
        required: true
        minLength: 4
        maxLength: 18
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ExtendedOrderCode"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
        '503':
          "$ref": "#/responses/503"
      tags:
      - Lookup
  "/endress/product_lookup":
    get:
      summary: lookup for Endress+Hauser products with asset specific search criteria
      operationId: ehProductLookup
      description: |-
        Returns an Endress+Hauser product, matching the serial number.
        The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\).
      parameters:
      - name: serial_number
        in: query
        description: Any Endress+Hauser serial number
        type: string
        required: true
        minLength: 4
        maxLength: 18
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
        '503':
          "$ref": "#/responses/503"
      tags:
      - Lookup
  "/endress/successor_lookup":
    get:
      summary: lookup for Endress+Hauser successor products
      operationId: ehSuccessorLookup
      description: |-
        Returns successor information, if a serial_number or order code was provided, the order code transformer is used, for product_code the successor comes from the Product Status List r
        Possible include values: ```product, product.pictures,product.status, product.parent```
        The serial number is at least 4 characters long and may include letters, numbers, dashes (-), underscores (_) and backslashes (\\).
      parameters:
      - "$ref": "#/parameters/IncludeParam"
      - name: serial_number
        in: query
        description: Any Endress+Hauser serial number
        type: string
        minLength: 4
        maxLength: 18
      - name: order_code
        in: query
        description: an Endress+Hauser order code
        type: string
      - name: product_code
        in: query
        description: an Endress+Hauser product_code
        type: string
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SuccessorsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
        '503':
          "$ref": "#/responses/503"
      tags:
      - Lookup
  "/event/statuses":
    get:
      summary: Get a range of event statuses
      operationId: getEventStatuses
      description: |-
        Returns a list of all event statuses that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.

        Possible include value: ```tenant```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: event_statuses
            type: object
            properties:
              event_statuses:
                type: array
                items:
                  "$ref": "#/definitions/EventStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - EventStatus
    post:
      summary: Create a new event status
      operationId: createEventStatus
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: EventStatus object to create.
        required: true
        schema:
          "$ref": "#/definitions/EventStatusRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/EventStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - EventStatus
  "/event/statuses/{id}":
    get:
      summary: Get a single event status
      operationId: getEventStatusById
      description: |-
        Get a specific event status identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: Id of event status to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EventStatusResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - EventStatus
    patch:
      summary: Update an event status
      operationId: updateEventStatus
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the event status to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/EventStatusRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - EventStatus
    delete:
      summary: Delete an event status
      operationId: deleteEventStatus
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the event status to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - EventStatus
  "/event/types":
    get:
      summary: Get a range of event types
      operationId: getEventTypes
      description: |-
        Returns a list of all event types that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: event_types
            type: object
            properties:
              event_types:
                type: array
                items:
                  "$ref": "#/definitions/EventTypeResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - EventType
    post:
      summary: Create a new event type
      operationId: createEventType
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: EventType object to create.
        required: true
        schema:
          "$ref": "#/definitions/EventTypeRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/EventTypeResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - EventType
  "/event/types/{id}":
    get:
      summary: Get a single event type
      operationId: getEventTypeById
      description: |-
        Get a specific event type identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: Id of event type to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EventTypeResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - EventType
    patch:
      summary: Update an event type
      operationId: updateEventType
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the event type to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/EventTypeRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - EventType
    delete:
      summary: Delete an event type
      operationId: deleteEventType
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the event type to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - EventType
  "/health_conditions/{health_condition_id}/causes":
    get:
      summary: Get all causes of a health condition
      operationId: getHealthConditionCauses
      description: Returns a list of causes of a health condition. You can apply query
        parameters in the request to get a filtered list. If the query has no matches,
        the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/HealthConditionPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DescriptionFilter"
      - "$ref": "#/parameters/HealthConditionCausesOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: causes
            type: object
            properties:
              causes:
                type: array
                items:
                  "$ref": "#/definitions/HealthConditionCauseResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthConditionCause
    post:
      summary: Create a health condition cause
      operationId: createHealthConditionCause
      description: Cause must have a code and at least one health condition
      parameters:
      - "$ref": "#/parameters/HealthConditionPathID"
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/HealthConditionCauseRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/HealthConditionCauseResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthConditionCause
  "/health_conditions/{health_condition_id}/causes/{id}":
    get:
      summary: Get a single health condition cause
      operationId: getHealthConditionCauseById
      description: |-
        Get a specific cause identified by the id in the URL.
        Possible include value: ``remedies``
      parameters:
      - "$ref": "#/parameters/HealthConditionPathID"
      - name: id
        in: path
        description: Id of the cause to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/HealthConditionCauseResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthConditionCause
    patch:
      summary: Update a health condition cause
      operationId: updateHealthConditionCause
      description: Update accessible parameters of the requested resource.
      parameters:
      - "$ref": "#/parameters/HealthConditionPathID"
      - name: id
        in: path
        description: Id of the cause to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/HealthConditionCauseRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthConditionCause
    delete:
      summary: Delete a health condition cause
      operationId: deleteCause
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - "$ref": "#/parameters/HealthConditionPathID"
      - name: id
        in: path
        description: Id of the cause to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthConditionCause
  "/health_conditions/{health_condition_id}/causes/{cause_id}/remedies":
    get:
      summary: Get all remedies of a cause
      operationId: getHealthConditionRemedies
      description: Returns a list of remedies for a specific cause. You can apply
        query parameters in the request to get a filtered list. If the query has no
        matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/HealthConditionPathID"
      - "$ref": "#/parameters/HealthConditionCausePathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DescriptionFilter"
      - "$ref": "#/parameters/HealthConditionRemediesOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: remedies
            type: object
            properties:
              remedies:
                type: array
                items:
                  "$ref": "#/definitions/HealthConditionRemedyResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthConditionRemedy
    post:
      summary: Create a remedy
      operationId: createHealthConditionRemedy
      description: Remedy must have a code and a description scope.
      parameters:
      - "$ref": "#/parameters/HealthConditionPathID"
      - "$ref": "#/parameters/HealthConditionCausePathID"
      - name: Body
        in: body
        description: Parameters that shall be updated
        required: true
        schema:
          "$ref": "#/definitions/HealthConditionRemedyRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/HealthConditionRemedyResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthConditionRemedy
  "/health_conditions/{health_condition_id}/causes/{cause_id}/remedies/{id}":
    get:
      summary: Get a single remedy
      operationId: getHealthConditionRemedyById
      description: Get a specific remedy identified by the id in the URL.
      parameters:
      - "$ref": "#/parameters/HealthConditionPathID"
      - "$ref": "#/parameters/HealthConditionCausePathID"
      - name: id
        in: path
        description: Id of the remedy to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/HealthConditionRemedyResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthConditionRemedy
    patch:
      summary: Update a remedy
      operationId: updateHealthConditionRemedy
      description: Update accessible parameters of the requested resource.
      parameters:
      - "$ref": "#/parameters/HealthConditionPathID"
      - "$ref": "#/parameters/HealthConditionCausePathID"
      - name: id
        in: path
        description: Id of the remedy to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated
        required: true
        schema:
          "$ref": "#/definitions/HealthConditionRemedyRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthConditionRemedy
    delete:
      summary: Delete a remedy
      operationId: deleteHealthConditionRemedy
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - "$ref": "#/parameters/HealthConditionPathID"
      - "$ref": "#/parameters/HealthConditionCausePathID"
      - name: id
        in: path
        description: Id of the remedy to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - HealthConditionRemedy
  "/instrumentation/specification_keys":
    get:
      summary: Get existing instrumentation specification keys
      operationId: getSpecificationKeysOfInstrumentations
      description: Returns the existing specification keys in all readable instrumentations.
      parameters:
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      - name: ui_visible
        in: query
        type: boolean
        required: false
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationKeys"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Instrumentation
      - Specification
  "/instrumentation/statuses":
    get:
      summary: Get a range of instrumentation statuses
      operationId: getInstrumentationStatuses
      description: |-
        Returns a list of all event statuses that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.

        Possible include value: ```tenant```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - name: name
        in: query
        description: searches instrumentation statuses with given name
        type: string
        required: false
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: instrumentation_statuses
            type: object
            required:
            - pagination
            - instrumentation_statuses
            properties:
              instrumentation_statuses:
                type: array
                items:
                  "$ref": "#/definitions/InstrumentationStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - InstrumentationStatus
    post:
      summary: Create a new instrumentation status
      operationId: createInstrumentationStatus
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: InstrumentationStatus object to create.
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationStatusRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/InstrumentationStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - InstrumentationStatus
  "/instrumentation/statuses/{id}":
    get:
      summary: Get a single instrumentation status
      operationId: getInstrumentationStatusById
      description: |-
        Get a specific instrumentation status identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: Id of instrumentation status to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationStatusResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - InstrumentationStatus
    patch:
      summary: Update an instrumentation status
      operationId: updateInstrumentationStatus
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the instrumentation status to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationStatusRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - InstrumentationStatus
    delete:
      summary: Delete an instrumentation status
      operationId: deleteInstrumentationStatus
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the instrumentation status to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - InstrumentationStatus
  "/instrumentation/types":
    get:
      summary: Get a range of instrumentation types
      operationId: getInstrumentationTypes
      description: |-
        Returns a list of all event types that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```parent, tenant```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - name: name
        in: query
        description: searches instrumentation types with given name
        type: string
        required: false
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: instrumentation_types
            type: object
            properties:
              instrumentation_types:
                type: array
                items:
                  "$ref": "#/definitions/InstrumentationTypeResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - InstrumentationType
    post:
      summary: Create a new instrumentation type
      operationId: createInstrumentationType
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: InstrumentationType object to create.
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationTypeRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/InstrumentationTypeResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - InstrumentationType
  "/instrumentation/types/{id}":
    get:
      summary: Get a single instrumentation type
      operationId: getInstrumentationTypeById
      description: |-
        Get a specific instrumentation type identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```parent, tenant```
      parameters:
      - name: id
        in: path
        description: Id of instrumentation type to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/InstrumentationTypeResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - InstrumentationType
    patch:
      summary: Update an instrumentation type
      operationId: updateInstrumentationType
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the instrumentation type to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/InstrumentationTypeRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - InstrumentationType
    delete:
      summary: Delete an instrumentation type
      operationId: deleteInstrumentationType
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the instrumentation type to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - InstrumentationType
  "/instrumentations/{instrumentation_id}/events":
    get:
      summary: Get all events of one instrumentation
      operationId: getEventsOfInstrumentation
      description: |-
        Returns a list of all events belonging to an instrumentation in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ``assets, instrumentations, nodes, status, type``
      parameters:
      - "$ref": "#/parameters/InstrumentationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StartDatetimeFilter"
      - "$ref": "#/parameters/StartDatetimeFromFilter"
      - "$ref": "#/parameters/StartDatetimeToFilter"
      - "$ref": "#/parameters/EndDatetimeFilter"
      - "$ref": "#/parameters/EndDatetimeFromFilter"
      - "$ref": "#/parameters/EndDatetimeToFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/EventOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EventsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Instrumentation
    post:
      summary: Create a new event for an instrumentation
      operationId: createEventForInstrumentation
      description: Events must have a name, and can have a start_datetime (if not
        provided, the date of creation will be used as default value), end_datetime,
        event_type, event_status, description and responsible
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object to be created.
        required: true
        schema:
          "$ref": "#/definitions/EventRequestNoInstrumentations"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/EventResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Instrumentation
    delete:
      summary: Remove events from an instrumentation
      operationId: removeEventFromInstrumentation
      description: Remove one or more events from an instrumentation in your accessible
        scope. If the event has no more related instrumentations, the event will be
        deleted
      parameters:
      - name: instrumentation_id
        in: path
        description: Id of the instrumentation from which the events will removed.
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          type: object
          title: events
          required:
          - events
          properties:
            events:
              type: array
              title: events
              items:
                "$ref": "#/definitions/Nested_ID"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Instrumentation
  "/instrumentations/{instrumentation_id}/values":
    get:
      summary: Get latest values for the instrumentation.
      operationId: getInstrumentationValues
      description: |-
        Returns a collection of the latest values for all keys of the instrumentation.
        Possible include values: ```unit, asset```
      parameters:
      - "$ref": "#/parameters/InstrumentationPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/UsePreferredUnitsInstrumentationParam"
      - "$ref": "#/parameters/KeyFilter"
      - "$ref": "#/parameters/KeyUnitIDFilter"
      - "$ref": "#/parameters/GroupFilter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetValuesResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Values
      - Instrumentation
  "/instrumentations/{instrumentation_id}/values/{key}":
    get:
      summary: Get instrumentation values for a specific key.
      operationId: getInstrumentationValuesForKey
      description: |-
        Returns a collection of the history values of an values for the specified key.
        For a aggregated result of the values the filter parameters aggregation and interval are mandatory.
        Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section.
        With the filter parameters from to it is possible to receive the history of a defined time period.
        Possible include values: ```unit```
      parameters:
      - "$ref": "#/parameters/InstrumentationPathID"
      - "$ref": "#/parameters/InstrumentationValuesKeyPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/AssetValuePagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/UsePreferredUnitsInstrumentationKeyParam"
      - "$ref": "#/parameters/IncludeTotalCountParam"
      - "$ref": "#/parameters/AssetValueFromFilter"
      - "$ref": "#/parameters/AssetValueToFilter"
      - "$ref": "#/parameters/UnitFilter"
      - "$ref": "#/parameters/AggregationFilter"
      - "$ref": "#/parameters/AggregationIntervalFilter"
      - "$ref": "#/parameters/AssetValueStatusFilter"
      - "$ref": "#/parameters/AssetValueHoldFilter"
      - "$ref": "#/parameters/AssetValueSimulatedFilter"
      - "$ref": "#/parameters/AssetValuesOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetKeyValuesResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Values
      - Instrumentation
  "/node/specification_keys":
    get:
      summary: Get existing asset specification keys
      operationId: getSpecificationKeysOfNodes
      description: Returns the existing specification keys in all readable nodes.
      parameters:
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      - name: ui_visible
        in: query
        type: boolean
        required: false
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationKeys"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Node
      - Specification
  "/node/types":
    get:
      summary: Get a range of instrumentation types
      operationId: getNodeTypes
      description: |-
        Returns a list of all node types available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```tenant, parent```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - name: name
        in: query
        description: searches node types with given name
        type: string
        required: false
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: node_types
            type: object
            properties:
              node_types:
                type: array
                items:
                  "$ref": "#/definitions/NodeTypeResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - NodeType
    post:
      summary: Create a new node type
      operationId: createNodeType
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: NodeType object to create.
        required: true
        schema:
          "$ref": "#/definitions/NodeTypeRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/NodeTypeResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - NodeType
  "/node/types/{id}":
    get:
      summary: Get a single node type
      operationId: getNodeTypeById
      description: |-
        Get a specific node type identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```tenant, parent```
      parameters:
      - name: id
        in: path
        description: Id of node type to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/NodeTypeResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - NodeType
    patch:
      summary: Update a node type
      operationId: updateNodeType
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the node type to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/NodeTypeRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - NodeType
    delete:
      summary: Delete a node type
      operationId: deleteNodeType
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the node type to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - NodeType
  "/nodes/{node_id}/events":
    get:
      summary: Get all events of one node
      operationId: getEventsOfNode
      description: |-
        Returns a list of all events belonging to a node in your accessible scope. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ``assets, instrumentations, nodes, status, type``
      parameters:
      - "$ref": "#/parameters/NodePathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TypeIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/StartDatetimeFilter"
      - "$ref": "#/parameters/StartDatetimeFromFilter"
      - "$ref": "#/parameters/StartDatetimeToFilter"
      - "$ref": "#/parameters/EndDatetimeFilter"
      - "$ref": "#/parameters/EndDatetimeFromFilter"
      - "$ref": "#/parameters/EndDatetimeToFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/EventOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/EventsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Node
    post:
      summary: Create a new event for a node
      operationId: createEventForNode
      description: Events must have a name, and can have a start_datetime (if not
        provided, the date of creation will be used as default value), end_datetime,
        event_type, event_status, description and responsible
      parameters:
      - name: node_id
        in: path
        description: Id of the instrumentation
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object to be created.
        required: true
        schema:
          "$ref": "#/definitions/EventRequestNoNodes"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/EventResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Node
    delete:
      summary: Remove events from a node
      operationId: removeEventFromNode
      description: Remove one or more events from an node in your accessible scope.
        If the event has no more related nodes, the event will be deleted
      parameters:
      - name: node_id
        in: path
        description: Id of the node from which the events will removed.
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          type: object
          title: events
          required:
          - events
          properties:
            events:
              type: array
              title: events
              items:
                "$ref": "#/definitions/Nested_ID"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Event
      - Node
  "/permission_inheritances":
    get:
      summary: Get a range of permission inheritances
      operationId: getPermissionInheritances
      description: Returns a list of all permission inheritances that are available
        in your scope. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - name: permission_type
        in: query
        description: filter by one of the permission_types (`can_read`, `can_update`,
          `can_delete`, `can_permit`)
        type: string
        required: false
      - name: permission_inheritable_id
        in: query
        description: filter by id of permitable
        type: integer
        format: int64
        required: false
      - name: permission_inheritable_type
        in: query
        description: filter by a specific type of permitables eg. `Event`
        type: string
        required: false
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            type: object
            title: permission_inheritances
            properties:
              permission_inheritances:
                type: array
                items:
                  "$ref": "#/definitions/PermissionInheritanceResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Permission
    post:
      summary: Create a new permission inheritance
      operationId: createPermissionInheritance
      description: Create a new permission inheritance, only needed if default permission
        inheritance should be overwritten.
      parameters:
      - name: Body
        in: body
        description: Permission object that needs to be created.
        required: true
        schema:
          "$ref": "#/definitions/PermissionInheritanceRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/PermissionInheritanceResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Permission
  "/permission_inheritances/{id}":
    get:
      summary: Get a single permission inheritance
      operationId: getPermissionInheritanceById
      description: Get a specific permission inheritance identified by the id in the
        URL.
      parameters:
      - name: id
        in: path
        description: Id of the permission inheritance to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PermissionInheritanceResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Permission
    delete:
      summary: Delete a permission inheritance
      operationId: deletePermissionInheritance
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the permission inheritance to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Permission
  "/product/categories":
    get:
      summary: Get a range of product categories
      operationId: getProductCategories
      description: |-
        Returns a list of all product categories that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```tenant, parent```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductCategoriesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
    post:
      summary: Create a new product category
      operationId: createProductCategory
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: Product category to create.
        required: true
        schema:
          "$ref": "#/definitions/ProductCategoryRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/ProductCategoryResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
  "/product/categories/{id}":
    get:
      summary: Get a single product category
      operationId: getProductCategoryById
      description: |-
        Get a specific product category identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```tenant, parent```
      parameters:
      - name: id
        in: path
        description: Id of product category to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductCategoryResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
    patch:
      summary: Update a product category
      operationId: updateProductCategory
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the product category to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/ProductCategoryRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
    delete:
      summary: Delete a product category
      operationId: deleteProductCategory
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the product category to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
  "/product/categories/{category_id}/products":
    get:
      summary: Get all products of a product category
      operationId: createProductsOfProductCategory
      description: |-
        Get all products of a specific product category identified by the id in the URL.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - "$ref": "#/parameters/CategoryPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/ProductCodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
    post:
      summary: Add products to a category
      operationId: addProductsToProductCategory
      description: Add one or more products to a category identified by id in the
        url.
      parameters:
      - name: category_id
        in: path
        description: Id of the category
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added
        required: true
        schema:
          "$ref": "#/definitions/ProductIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
    patch:
      summary: Replace products of a category
      operationId: replaceProductsOfProductCategory
      description: Replaces all products belonging to a category. You can send a list
        of resources that will replace all previous values.
      parameters:
      - name: category_id
        in: path
        description: Id of the category
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/ProductIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
    delete:
      summary: Remove products from a category
      operationId: removeProductsFromProductCategory
      description: Remove one or more products from a category identified by id in
        the url.
      parameters:
      - name: category_id
        in: path
        description: Id of the category
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/ProductIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
  "/product/identifiers":
    get:
      summary: Get a range of product identifiers
      operationId: getProductIdentifiers
      description: |-
        Returns a list of product identifiers. If the query has no matches, the response is an empty list.

        Possible include values: ```products```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/ProductIdentifierOrganizationFilter"
      - "$ref": "#/parameters/ProductIdentifierProtocolFilter"
      - "$ref": "#/parameters/ProductIdentifierVersionFilter"
      - "$ref": "#/parameters/ProductIdentifierFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductIdentifiersResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductIdentifier
    post:
      summary: Create a new product identifier
      operationId: createProductIdentifier
      description: Product identifiers must have a product identifier that is unique
        under the tenant and protocols scope. They need to be assigned to at least
        one product. To create a product identifier for a product you need the tenant
        admin role on the products tenant.
      parameters:
      - name: body
        in: body
        description: Product identifier object that needs to be created.
        required: true
        schema:
          "$ref": "#/definitions/ProductIdentifierRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/ProductIdentifierResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductIdentifier
  "/product/identifiers/{id}":
    get:
      summary: Get a single product identifier
      operationId: getProductIdentifierById
      description: |-
        Get a specific product identifier identified by the id in the URL.

        Possible include values: ```products```
      parameters:
      - name: id
        in: path
        description: Id of the product identifier to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductIdentifierResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductIdentifier
    patch:
      summary: Update a product identifier
      operationId: updateProductIdentifier
      description: Update accessible parameters of the requested resource. To update
        a product identifier for a product you need the tenant admin role on the products
        tenant.
      parameters:
      - name: id
        in: path
        description: Id of the product identifier to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/ProductIdentifierRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductIdentifier
    delete:
      summary: Delete a product identifier
      operationId: deleteProductIdentifier
      description: Delete a specific resource product identifier identified by the
        id in the URL. To delete a product identifier of a product you need the tenant
        admin role on the products tenant.
      parameters:
      - name: id
        in: path
        description: Id of the product identifier to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductIdentifier
  "/product/identifiers/{product_identifier_id}/products":
    get:
      summary: Get all products of one product identifier
      operationId: getProductsOfProductIdentifier
      description: |-
        Returns a list of all products of a product identifier that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.
        Parameters supporting translation: ```name, description```. To get a translation set the ```Accept-Language``` header.
        Possible include values: ```status, tenant, parent, manufacturer, pictures, specifications, specifications[key1,key2], categories, categories.parent```
      parameters:
      - "$ref": "#/parameters/ProductIdentifierPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/ProductCodeFilter"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/SpecificationsKeyFilter"
      - "$ref": "#/parameters/SpecificationsValueFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductIdentifier
    delete:
      summary: Remove products from a product identifier
      operationId: removeProductsFromProductIdentifier
      description: Remove one or more products from a product identifier. If the product
        identifier has no more related products, the product identifier will be deleted
      parameters:
      - name: product_identifier_id
        in: path
        description: Id of the product identifier from which the products will be
          removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/ProductIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductIdentifier
    post:
      summary: Add products to a product identifier
      operationId: addProductsToProductIdentifier
      description: Adds one or more products to a product identifier.
      parameters:
      - name: product_identifier_id
        in: path
        description: Id of the product identifier to which the products will get added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/ProductIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductIdentifier
  "/product/statuses":
    get:
      summary: Get a range of product statuses
      operationId: getProductStatuses
      description: |-
        Returns a list of all product statuses that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.

        Possible include value: ```tenant```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: product_statuses
            type: object
            properties:
              product_statuses:
                type: array
                items:
                  "$ref": "#/definitions/ProductStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductStatus
  "/product/statuses/{id}":
    get:
      summary: Get a single product status
      operationId: getProductStatusById
      description: |-
        Get a specific product status identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: Id of product status to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductStatusResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductStatus
    patch:
      summary: Update a product status
      operationId: updateProductStatus
      description: |-
        Updates accessible parameters of selected product status.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the product status to update
        type: integer
        format: int64
        required: true
      - name: body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/ProductStatusRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductStatus
    delete:
      summary: Delete a product status
      operationId: deleteProductStatus
      description: Delete the given product status identified by id
      parameters:
      - name: id
        in: path
        description: Id of the product status to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductStatus
  "/product_features":
    get:
      summary: Get a range of product features
      operationId: getProductFeatures
      description: " Returns a list of all product features that are available in
        your scope. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array. "
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/ProductIDFilter"
      - "$ref": "#/parameters/ProductFeatureKeyFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductFeaturesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    post:
      summary: Create a new product feature
      operationId: createProductFeature
      description: Products must have a product (user needs product edit rights) and
        a unique feature_key (per product)
      parameters:
      - name: Body
        in: body
        description: Product Feature object that needs to be created.
        required: true
        schema:
          "$ref": "#/definitions/ProductFeatureRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/ProductFeatureResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/product_features/{id}":
    get:
      summary: Get a single product feature
      operationId: getProductFeatureById
      description: 'Get a specific product feature identified by the id in the URL. '
      parameters:
      - name: id
        in: path
        description: Id of the product feature to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductFeatureResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    patch:
      summary: Update a product feature
      operationId: updateProductFeature
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the product feature to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/ProductFeatureRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    delete:
      summary: Delete a product feature
      operationId: deleteProductFeature
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the product feature to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/product_options":
    get:
      summary: Get a range of product options
      operationId: getProductOptions
      description: |-
        Returns a list of all product options that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/ProductFeatureIDFilter"
      - "$ref": "#/parameters/ProductOptionKeyFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductOptionsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    post:
      summary: Create a new product option
      operationId: createProductOption
      description: Products must have a product feature (user needs product feature
        - product edit rights) and a unique option_key (per product feature)
      parameters:
      - name: Body
        in: body
        description: Product option object that needs to be created.
        required: true
        schema:
          "$ref": "#/definitions/ProductOptionRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/ProductOptionResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/product_options/{id}":
    get:
      summary: Get a single product option
      operationId: getProductOptionById
      description: Get a specific product option identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the product option to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductOptionResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    patch:
      summary: Update a product option
      operationId: updateProductOption
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the product option to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/ProductOptionRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    delete:
      summary: Delete a product option
      operationId: deleteProductOption
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the product option to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/product_variants":
    get:
      summary: Get a range of product variants
      operationId: getProductVariants
      description: " Returns a list of all product variants that are available in
        your scope. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array. "
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/ProductIDFilter"
      - "$ref": "#/parameters/ProductVariantCodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductVariantsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    post:
      summary: Create a new product variant
      operationId: createProductVariant
      description: Product Variants must have a product (user needs product edit rights)
        and a unique variant_code (per product)
      parameters:
      - name: Body
        in: body
        description: Product variant object that needs to be created.
        required: true
        schema:
          "$ref": "#/definitions/ProductVariantRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/ProductVariantResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/product_variants/{id}":
    get:
      summary: Get a single product variant
      operationId: getProductVariantById
      description: 'Get a specific product variant identified by the id in the URL. '
      parameters:
      - name: id
        in: path
        description: Id of the product variant to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductVariantResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    patch:
      summary: Update a product variant
      operationId: updateProductVariant
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the product variant to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/ProductVariantRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    delete:
      summary: Delete a product variant
      operationId: deleteProductVariant
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the product variant to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/product_variants/{id}/configurations":
    get:
      summary: get configuration of product variant
      operationId: getProductVariantConfigurations
      description: get configuration of a product variant
      parameters:
      - name: id
        in: path
        description: Id of the product variant
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductVariantConfigurationResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
    patch:
      summary: update configuration of a product variant
      operationId: setProductVariantConfiguration
      description: set / update configuration of a product variant. The configuration
        is defined by the product features and product options. An empty array can
        be sent to remove the configuration.
      parameters:
      - name: id
        in: path
        description: Id of the product variant to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/ProductVariantConfigurationRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/product_variants/{product_variant_id}/documents":
    get:
      summary: Get all documents of a product variant
      operationId: getDocumentsOfProductVariant
      description: |-
        Returns a list of documents assigned to the specified product variant.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```status, tenant, classification, categories, categories.parent, categories.standards, attachments```
      parameters:
      - "$ref": "#/parameters/ProductVariantPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/DocumentVersionFilter"
      - "$ref": "#/parameters/NumberFilter"
      - "$ref": "#/parameters/StatusIDFilter"
      - "$ref": "#/parameters/ClassificationIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CategoryIDFilter"
      - "$ref": "#/parameters/ValidFromFilter"
      - "$ref": "#/parameters/ValidUntilFilter"
      - "$ref": "#/parameters/ValidAtFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/DocumentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Product
  "/products/{product_id}/categories":
    get:
      summary: Get all categories of a product
      operationId: getCategoriesOfProduct
      description: |-
        Get all categories for the specific product identified by the id in the URL.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
        Possible include values: ```tenant, parent```
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/ParentIDFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductCategoriesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
      - Product
    post:
      summary: Add categories to a product
      operationId: addCategoriesToProduct
      description: Add one or more categories to a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added
        required: true
        schema:
          "$ref": "#/definitions/CategoryIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
      - Product
    patch:
      summary: Replace all categories of a product
      operationId: replaceCategoriesOfProduct
      description: Replaces all categories belonging to a product. You can send a
        list of resources that will replace all previous values.
      parameters:
      - name: product_id
        in: path
        description: Id of the product
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added
        required: true
        schema:
          "$ref": "#/definitions/CategoryIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
      - Product
    delete:
      summary: Remove categories from a product
      operationId: deleteCategoriesFromProduct
      description: Remove one or more categories from a product.
      parameters:
      - name: product_id
        in: path
        description: Id of the product from which the category will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/CategoryIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductCategory
      - Product
  "/products/{product_id}/health_conditions":
    get:
      summary: Get all health conditions assigned to an product
      operationId: getProductHealthConditions
      description: |-
        Returns a list of health conditions of an product.

        Possible include value: ``asset_status, causes, causes.remedies``
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/HealthConditionIDFilter"
      - "$ref": "#/parameters/DiagnosisCodeFilter"
      - "$ref": "#/parameters/DeviceIdentFilter"
      - "$ref": "#/parameters/ProductIdentifierFilter"
      - "$ref": "#/parameters/ProtocolFilter"
      - "$ref": "#/parameters/HealthConditionsOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          headers:
            Content-Language:
              description: language of the name and description fields, can be a list
                of languages
              type: string
          schema:
            "$ref": "#/definitions/HealthConditionsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductHealthCondition
    post:
      summary: Add health conditions to an product
      operationId: addHealthConditionsToProduct
      description: Add one or more health conditions to an product.
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/HealthConditionsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductHealthCondition
    patch:
      summary: Replace health conditions of an product
      operationId: reaplaceHealthConditionsOfProduct
      description: Replaces all health conditions belonging to an product. You can
        send a list of resources that will replace all previous values.
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - name: Body
        in: body
        description: Resources that shall be replaced.
        required: true
        schema:
          "$ref": "#/definitions/HealthConditionsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductHealthCondition
    delete:
      summary: Remove health conditions of an product
      operationId: removeHealthConditionsOfProduct
      description: Remove one or more health conditions from an product.
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/HealthConditionCauseIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductHealthCondition
  "/products/{product_id}/identifiers":
    get:
      summary: Get all product identifiers of one product
      operationId: getProductIdentifiersOfProduct
      description: |-
        Returns a list of all product identifiers belonging to a product. You can apply query parameters in the request to get a filtered list. If the query has no matches, the response will show an empty array.

        Possible include values: ``tenant``
      parameters:
      - "$ref": "#/parameters/ProductPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ProductIdentifiersResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductIdentifier
    post:
      summary: Create a new product identifier for a product
      operationId: createProductIdentifierForProduct
      description: |-
        Product identifiers must have a product identifier that is unique under the tenant and protocols scope.
        To create a product identifier for a product you need the tenant admin role on the products tenant.
      parameters:
      - name: product_id
        in: path
        description: Id of the product
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object to be created.
        required: true
        schema:
          "$ref": "#/definitions/ProductIdentifierRequestNoProducts"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/ProductIdentifierResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductIdentifier
    delete:
      summary: Remove product identifiers from a product
      operationId: removeProductIdentifierFromProduct
      description: Remove one or more product identifiers from an product. If the
        product identifier has no more related products, the product identifier will
        be deleted. To delete a product identifier of a product you need the tenant
        admin role on the products tenant.
      parameters:
      - name: product_id
        in: path
        description: Id of the product from which the product identifiers will removed.
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          type: object
          title: product_identifiers
          required:
          - product_identifiers
          properties:
            product_identifiers:
              type: array
              title: product_identifiers
              items:
                "$ref": "#/definitions/Nested_ID"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - ProductIdentifier
  "/purchase_order/statuses":
    get:
      summary: Get a range of purchase order statuses
      operationId: getPurchaseOrderStatuses
      description: |-
        Returns a list of all purchase order statuses that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.

        Possible include value: ```tenant```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: purchase_order_statuses
            type: object
            properties:
              purchase_order_statuses:
                type: array
                items:
                  "$ref": "#/definitions/PurchaseOrderStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrderStatus
    post:
      summary: Create a new purchase order status
      operationId: createPurchaseOrderStatus
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: PurchaseOrderStatus object to create.
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderStatusRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/PurchaseOrderStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrderStatus
  "/purchase_order/statuses/{id}":
    get:
      summary: Get a single purchase order status
      operationId: getPurchaseOrderStatusById
      description: |-
        Get a specific purchase order status identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: Id of purchase order status to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/PurchaseOrderStatusResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrderStatus
    patch:
      summary: Update an purchase order status
      operationId: updatePurchaseOrderStatus
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the purchase order to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/PurchaseOrderStatusRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrderStatus
    delete:
      summary: Delete an purchase order status
      operationId: deletePurchaseOrderStatus
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the purchase order status to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - PurchaseOrderStatus
  "/quotation/statuses":
    get:
      summary: Get a range of quotation statuses
      operationId: getQuotationStatuses
      description: |-
        Returns a list of all quotation statuses that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.

        Possible include value: ```tenant```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: quotation_statuses
            type: object
            properties:
              quotation_statuses:
                type: array
                items:
                  "$ref": "#/definitions/QuotationStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - QuotationStatus
    post:
      summary: Create a new quotation status
      operationId: createQuotationStatus
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: QuotationStatus object to create.
        required: true
        schema:
          "$ref": "#/definitions/QuotationStatusRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/QuotationStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - QuotationStatus
  "/quotation/statuses/{id}":
    get:
      summary: Get a single quotation status
      operationId: getQuotationStatusById
      description: |-
        Get a specific quotation status identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: Id of quotation status to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/QuotationStatusResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - QuotationStatus
    patch:
      summary: Update an quotation status
      operationId: updateQuotationStatus
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the quotation to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/QuotationStatusRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - QuotationStatus
    delete:
      summary: Delete an quotation status
      operationId: deleteQuotationStatus
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the quotation status to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - QuotationStatus
  "/recipes/{recipe_id}/specifications":
    get:
      summary: Get specifications of an recipe
      operationId: getSpecificationsOfRecipe
      description: Returns the specification of an object in your accessible scope.
        If no specifications are defined, this is just an empty object. Specification
        must have the form below.
      parameters:
      - name: recipe_id
        in: path
        description: Id of the specified recipe
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationsResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
    patch:
      summary: Update specifications of an recipe
      operationId: updateSpecificationsOfRecipe
      description: Update the specification object of an recipe in your accessible
        scope. To add specifications, just add the key and set the value object with
        value, unit and source_timestamp. To mark an existing specification to be
        unknown, the value could be set to null. To delete keys, use the delete method.
        Multiple specification objects can be sent in the same request. Keys inside
        a specification are unique and can only be added once. Keys can only consist
        of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z.
        For a key that is send multiple times in the request body, only the last key-value
        is saved.
      parameters:
      - name: recipe_id
        in: path
        description: Id of the specified recipe
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications objects to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
    delete:
      summary: Delete specifications of an recipe
      operationId: removeSpecificationsFromRecipe
      description: The specification keys in the body will be removed of the object
        in your accessible scope. Multiple specification keys can be sent in the same
        request. If a key does not exist it will be ignored.
      parameters:
      - name: recipe_id
        in: path
        description: Id of the specified recipe
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Array of keys to delete from specifications
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsDelete"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
  "/recipes/{recipe_id}/specifications/{key}/history":
    get:
      summary: Get the history of one specification attribute of an recipe.
      operationId: getSpecificationHistoryOfRecipe
      description: This might be useful for history data. The response contains a
        collection of historic values and when they`ve been updated. Since this can
        be a lot of data the service uses pagination. The history can be filtered
        by using a date range of source_timestamp and/or updated_at. Please consider
        that source_timestamp is not required and update on the attribute without
        giving a source_timestamp wont be included in the resulting response
      parameters:
      - name: recipe_id
        in: path
        description: Id of the specified recipe
        type: integer
        format: int64
        required: true
      - name: key
        in: path
        type: string
        required: true
        description: the exact key
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - name: source_timestamp_from
        in: query
        description: source_timestamp filter from. Starting with + will include the
          previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: source_timestamp_to
        in: query
        description: source_timestamp filter to. Ending with + will include the next
          value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: updated_at_from
        in: query
        description: updated_at filter from. Starting with + will include the previous
          value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: updated_at_to
        in: query
        description: updated_at filter to. Ending with + will include the next value
          as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - "$ref": "#/parameters/SpecificationHistoryOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationHistoryResponse"
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
  "/recipes/{recipe_id}/specifications/rename":
    patch:
      summary: Rename a specification key
      operationId: renameSpecificationsOfRecipe
      description: Rename one specification key of an recipe in your accessible scope.
        The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted
        to lower-case.
      parameters:
      - name: recipe_id
        in: path
        description: Id of the specified recipe
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications object to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRename"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
  "/recipes/{recipe_id}/thresholds":
    get:
      summary: Get recipe thresholds
      operationId: getRecipeThresholds
      description: Get all thresholds of an recipe.
      parameters:
      - name: recipe_id
        in: path
        description: Id of the recipe
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        description: filter by key
        type: string
      - name: threshold_type
        in: query
        description: filter by type
        type: string
      - "$ref": "#/parameters/ThresholdsOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ThresholdsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Threshold
    post:
      summary: Create an recipe threshold
      operationId: CreateRecipeThreshold
      description: |-
        Create a new recipe threshold.
        This action requires ```can_update``` permission on the recipe.
      parameters:
      - name: recipe_id
        in: path
        description: Id of the specified recipe
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object body that will be created.
        required: true
        schema:
          "$ref": "#/definitions/ThresholdRequest"
      responses:
        '201':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ThresholdResponse"
          headers:
            Location:
              description: Url of the created recipe threshold
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Threshold
  "/recipes/{recipe_id}/thresholds/{id}":
    get:
      summary: Get an recipe threshold
      operationId: getRecipeThreshold
      description: Get a single threshold of an recipe.
      parameters:
      - name: recipe_id
        in: path
        description: Id of the recipe
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the recipe threshold
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ThresholdResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Threshold
    patch:
      summary: Update an recipe threshold
      operationId: updateRecipeThreshold
      description: Replaces the threshold belonging to an recipe. This action requires
        `can_update` permission on the recipe.
      parameters:
      - name: recipe_id
        in: path
        description: Id of the recipe
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the recipe threshold
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object body that will be updated.
        required: true
        schema:
          "$ref": "#/definitions/ThresholdRequest"
      responses:
        '204':
          description: The threshold was updated successfully.
          schema:
            "$ref": "#/definitions/ThresholdResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Threshold
    delete:
      summary: Delete an recipe threshold.
      operationId: deleteRecipeThreshold
      description: Delete an recipe threshold.
      parameters:
      - name: recipe_id
        in: path
        description: Id of the recipe
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the recipe threshold
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Threshold
  "/request_for_quotation/statuses":
    get:
      summary: Get a range of request for quotation statuses
      operationId: getRequestForQuotationStatuses
      description: |-
        Returns a list of all request for quotation statuses that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.

        Possible include value: ```tenant```
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: request_for_quotation_statuses
            type: object
            properties:
              request_for_quotation_statuses:
                type: array
                items:
                  "$ref": "#/definitions/RequestForQuotationStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotationStatus
    post:
      summary: Create a new request for quotation status
      operationId: createRequestForQuotationStatus
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: RequestForQuotationStatus object to create.
        required: true
        schema:
          "$ref": "#/definitions/RequestForQuotationStatusRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/RequestForQuotationStatusResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotationStatus
  "/request_for_quotation/statuses/{id}":
    get:
      summary: Get a single request for quotation status
      operationId: getRequestForQuotationStatusById
      description: |-
        Get a specific request for quotation status identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: Id of request for quotation status to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/RequestForQuotationStatusResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotationStatus
    patch:
      summary: Update an request for quotation status
      operationId: updateRequestForQuotationStatus
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the request for quotation to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/RequestForQuotationStatusRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotationStatus
    delete:
      summary: Delete an request for quotation status
      operationId: deleteRequestForQuotationStatus
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the request for quotation status to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - RequestForQuotationStatus
  "/search":
    get:
      summary: search assets, batches, instrumentations, nodes, recipes, systems .
      operationId: search
      description: "search assets, instrumentations and nodes based on a defined set
        of fields. \n\nasset - serial_number product_code product_name product_manufacturer_name
        \n\nspecification keys and values (of assets, nodes and instrumentation) when
        ui_visible is set to true \n\nbatches - batch_name \n\n \n\ninstrumentation
        - tag \n\nnodes - name \n\nrecipes - recipe_name \n\n \n\nsystems - system_name
        \n\n These fields may be extended in the  future."
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/SearchQueryFilter"
      - "$ref": "#/parameters/ManufacturerIDFilter"
      - "$ref": "#/parameters/ProductCategoryIDFilter"
      - "$ref": "#/parameters/ProductStatusIDFilter"
      - "$ref": "#/parameters/SubscriptionIDFilter"
      - "$ref": "#/parameters/SearchScopesFilter"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SearchItemsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Search
  "/sign_ins":
    get:
      summary: Get sign_ins of all users
      operationId: getSignInsOfAllUser
      description: Returns a list of all sign ins of all users. This needs special
        roles, otherwise only sign_ins of current user are returned
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/TimeFilter"
      - "$ref": "#/parameters/TimeFromFilter"
      - "$ref": "#/parameters/TimeToFilter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SignInsResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/software/attachments":
    get:
      summary: Get a range of software attachments
      operationId: getSoftwareAttachments
      description: Returns a list of all software attachments that are available in
        your scope. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array.'
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/ContentDateFilter"
      - "$ref": "#/parameters/RemarksFilter"
      - "$ref": "#/parameters/FileNameFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SoftwareAttachmentsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SoftwareAttachment
    post:
      summary: Create and upload a new software attachment
      operationId: uploadSoftwareAttachment
      description: |-
        the creation of an software attachment works through a multipart/form-data upload of the file and its filename.

        Forbidden content-types are

        - application/xhtml+xml
        - text/html
        - application/javascript
        - text/javascript
        - application/x-shockwave-flash
        - application/vnd.adobe.flash.movie
        - video/x-flv
        - text/php
        - application/php
        - application/x-php
        - application/x-httpd-php
      consumes:
      - multipart/form-data
      parameters:
      - name: file
        in: formData
        description: the filedata to upload
        required: true
        type: file
      - name: software_id
        in: formData
        description: the software id this software attachment belongs to
        type: integer
        format: int64
        required: true
      - name: content_date
        in: formData
        description: last edit date of the file. Datetime must be in format YYYY-MM-DD
          or YYYY-MM-DDThh:mm:ss
        type: string
        format: dateTime
      - name: remarks
        in: formData
        description: remarks on the software attachment
        type: string
      responses:
        '201':
          description: The software attachment was created successful and the file
            is saved. The response body contains the software attachment representation
          schema:
            "$ref": "#/definitions/SoftwareAttachmentResponse"
          headers:
            Location:
              description: url of the created software attachment
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SoftwareAttachment
  "/software/attachments/{id}":
    get:
      summary: Get a single software attachment
      operationId: getSoftwareAttachmentById
      description: specific software attachment in your accessible scope, identified
        by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the software attachment to fetch
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SoftwareAttachmentResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SoftwareAttachment
    patch:
      summary: Update an software attachment and especially its file
      operationId: updateSoftwareAttachment
      description: The software attachment object and also the file can be changed
        with a patch call.
      consumes:
      - multipart/form-data
      parameters:
      - name: id
        in: path
        description: Id of the software attachment to update
        type: integer
        format: int64
        required: true
      - name: file
        in: formData
        description: the filedata to upload
        required: false
        type: file
      - name: software_id
        in: formData
        description: the software id this software attachment belongs to
        type: integer
        format: int64
        required: false
      - name: content_date
        in: formData
        description: last edit date of the file. Datetime must be in format YYYY-MM-DD
          or YYYY-MM-DDThh:mm:ss
        type: string
        format: dateTime
      - name: remarks
        in: formData
        description: remarks on the software attachment
        type: string
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SoftwareAttachment
    delete:
      summary: Delete a software attachment and the file
      operationId: deleteSoftwareAttachment
      description: Delete a specific software attachment resource and file identified
        by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the software attachment to delete
        type: integer
        format: int64re
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SoftwareAttachment
  "/software/attachments/{id}/download":
    get:
      summary: Download the software attachments file
      operationId: downloadSoftwareAttachment
      description: Download the file of the software attachment with the original
        filename. Content-Transfer-Encoding header is set to binary
      parameters:
      - name: id
        in: path
        description: Id of the software attachment to fetch
        type: integer
        format: int64
        required: true
      - name: disposition
        in: query
        description: Disposition type the download should be returned with. Allowed
          values are "inline" and "attachment". Default is "attachment".
        type: string
      responses:
        '200':
          description: A file download stream
          headers:
            Content-Type:
              type: string
              description: the original files mime-type is used here (eg. application/zip)
            Content-Disposition:
              type: string
              description: contains the original files filename (eg. software attachment;
                filename="test_software.zip")
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SoftwareAttachment
  "/software/attachments/links":
    post:
      summary: Create a new link as software attachment
      operationId: createLinkSoftwareAttachment
      description: Create a software attachments that links to an external resource
      parameters:
      - name: Body
        in: body
        description: Software attachment object that needs to be created
        required: true
        schema:
          "$ref": "#/definitions/SoftwareAttachmentLinkRequestPost"
      responses:
        '201':
          description: The software attachment was created successful. The response
            body contains the software attachment representation
          schema:
            "$ref": "#/definitions/SoftwareAttachmentResponse"
          headers:
            Location:
              description: url of the created software attachment
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SoftwareAttachment
  "/software/attachments/links/{id}":
    patch:
      summary: Update a software attachment with a link
      operationId: updateLinkSoftwareAttachment
      description: update an software attachment that has a link
      parameters:
      - name: id
        in: path
        description: Id of the software attachment to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Software attachment object that needs to be updated
        required: true
        schema:
          "$ref": "#/definitions/SoftwareAttachmentLinkRequestPatch"
      responses:
        '201':
          description: The software attachment has been successfully updated. The
            response body contains the software attachment representation
          schema:
            "$ref": "#/definitions/SoftwareAttachmentResponse"
          headers:
            Location:
              description: url of the updated software attachment
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SoftwareAttachment
  "/spare_part/statuses":
    get:
      summary: Get a range of spare part statuses
      operationId: getSparePartStatuses
      description: |-
        Returns a list of all spare part statuses that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: spare_part_statuses
            type: object
            properties:
              spare_part_statuses:
                type: array
                items:
                  "$ref": "#/definitions/SparePartStatusResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePartStatus
  "/spare_part/statuses/{id}":
    get:
      summary: Get a single spare part status
      operationId: getSparePartStatusById
      description: |-
        Get a specific spare part status identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: Id of spare part status to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SparePartStatusResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePartStatus
  "/spare_part/types":
    get:
      summary: Get a range of spare part types
      operationId: getSparePartTypes
      description: |-
        Returns a list of all spare part types that are available in your scope.
        You can apply the query parameters listed below to get a filtered list.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/CodeFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/DefaultOrderBy"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            title: spare_part_types
            type: object
            properties:
              spare_part_types:
                type: array
                items:
                  "$ref": "#/definitions/SparePartTypeResponse"
              pagination:
                "$ref": "#/definitions/Pagination"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePartType
    post:
      summary: Create a new spare part type
      operationId: createSparePartType
      description: |-
        Code must be unique.
        Parameters supporting translation: ```name, description```. POST sets values in default language: en.
      parameters:
      - in: body
        name: Body
        description: Spare Part Type object to create.
        required: true
        schema:
          "$ref": "#/definitions/SparePartTypeRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/SparePartTypeResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePartType
  "/spare_part/types/{id}":
    get:
      summary: Get a single spare part type
      operationId: getSparePartTypeById
      description: |-
        Get a specific spare part type identified by the id in the URL.
        Parameters supporting translation: ```name, description```. To get a translation set Accept-Language.
      parameters:
      - name: id
        in: path
        description: Id of spare part type to fetch
        type: integer
        format: int64
        required: true
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/AcceptLanguageHeader"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SparePartTypeResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePartType
    patch:
      summary: Update a spare part type
      operationId: updateSparePartType
      description: |-
        Update accessible parameters of the requested resource.
        Parameters supporting translation: ```name, description```. To add a translation set Content-Language.
      parameters:
      - name: id
        in: path
        description: Id of the spare part type to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/SparePartTypeRequest"
      - "$ref": "#/parameters/ContentLanguageHeader"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePartType
    delete:
      summary: Delete a spare part type
      operationId: deleteSparePartType
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the system type to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - SparePartType
  "/subscription/seats":
    get:
      summary: Get a range of subscription seats
      operationId: getSubscriptionSeats
      description: "Returns a list of subscriptions seats.\n\nPossible include values:
        ```subscription, subscription.user``` "
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/EMailFilter"
      - "$ref": "#/parameters/UserIDFilter"
      - "$ref": "#/parameters/SubscriptionSeatStatusFilter"
      - name: client_application_id
        in: query
        description: Expected id format is integer
        type: integer
        format: int64
        required: false
      - "$ref": "#/parameters/DefaultOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SubscriptionSeatsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
  "/subscription/seats/{id}":
    patch:
      summary: Update a subscription seat
      operationId: updateSubscriptionSeat
      description: Update the status of a subscription seat
      parameters:
      - name: id
        in: path
        description: Id of the subscription seat to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/SubscriptionSeatPatch"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
    delete:
      summary: Delete a subscription seat
      operationId: deleteSubscriptionSeat
      description: |-
        Delete a specific subscription seat identified by the id in the URL.
        This operation does send notification emails to the subscription owner, so it should be used by the invited user.
      parameters:
      - name: id
        in: path
        description: Id of the subscription seat
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Subscription
  "/systems/{system_id}/specifications":
    get:
      summary: Get specifications of a system
      operationId: getSpecificationsOfSystem
      description: Returns the specification of an object in your accessible scope.
        If no specifications are defined, this is just an empty object. Specification
        must have the form below.
      parameters:
      - name: system_id
        in: path
        description: Id of the specified system
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        type: string
        required: false
        description: Filter accepts '*' as wildcard
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationsResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
    patch:
      summary: Update specifications of a system
      operationId: updateSpecificationsOfSystem
      description: Update the specification object of a system in your accessible
        scope. To add specifications, just add the key and set the value object with
        value, unit and source_timestamp. To mark an existing specification to be
        unknown, the value could be set to null. To delete keys, use the delete method.
        Multiple specification objects can be sent in the same request. Keys inside
        a specification are unique and can only be added once. Keys can only consist
        of [a-z A-Z 0-9 . - _ ]. All uppercase A-Z are converted to lower-case a-z.
        For a key that is send multiple times in the request body, only the last key-value
        is saved.
      parameters:
      - name: system_id
        in: path
        description: Id of the specified system
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications objects to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
    delete:
      summary: Delete specifications of a system
      operationId: removeSpecificationsFromSystem
      description: The specification keys in the body will be removed of the object
        in your accessible scope. Multiple specification keys can be sent in the same
        request. If a key does not exist it will be ignored.
      parameters:
      - name: system_id
        in: path
        description: Id of the specified system
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Array of keys to delete from specifications
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsDelete"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
  "/systems/{system_id}/specifications/{key}/history":
    get:
      summary: Get the history of one specification attribute of a system.
      operationId: getSpecificationHistoryOfSystem
      description: This might be useful for history data. The response contains a
        collection of historic values and when they`ve been updated. Since this can
        be a lot of data the service uses pagination. The history can be filtered
        by using a date range of source_timestamp and/or updated_at. Please consider
        that source_timestamp is not required and update on the attribute without
        giving a source_timestamp wont be included in the resulting response
      parameters:
      - name: system_id
        in: path
        description: Id of the specified system
        type: integer
        format: int64
        required: true
      - name: key
        in: path
        type: string
        required: true
        description: the exact key
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - name: source_timestamp_from
        in: query
        description: source_timestamp filter from. Starting with + will include the
          previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: source_timestamp_to
        in: query
        description: source_timestamp filter to. Ending with + will include the next
          value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: updated_at_from
        in: query
        description: updated_at filter from. Starting with + will include the previous
          value as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - name: updated_at_to
        in: query
        description: updated_at filter to. Ending with + will include the next value
          as well. Expected date format is YYYY-MM-DDThh:mm:ss
        type: string
        format: date-time
        required: false
      - "$ref": "#/parameters/SpecificationHistoryOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/SpecificationHistoryResponse"
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
  "/systems/{system_id}/specifications/rename":
    patch:
      summary: Rename a specification key
      operationId: renameSpecificationsOfSystem
      description: Rename one specification key of a system in your accessible scope.
        The key name allows [a-z A-Z 0-9 . - _ ] all uppercase letters will be converted
        to lower-case.
      parameters:
      - name: system_id
        in: path
        description: Id of the specified system
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: The specifications object to patch.
        required: true
        schema:
          "$ref": "#/definitions/SpecificationsRename"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Specification
  "/systems/{system_id}/thresholds":
    get:
      summary: Get system thresholds
      operationId: getSystemThresholds
      description: Get all thresholds of an system.
      parameters:
      - name: system_id
        in: path
        description: Id of the system
        type: integer
        format: int64
        required: true
      - name: key
        in: query
        description: filter by key
        type: string
      - name: threshold_type
        in: query
        description: filter by type
        type: string
      - "$ref": "#/parameters/ThresholdsOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ThresholdsResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Threshold
    post:
      summary: Create an system threshold
      operationId: CreateSystemThreshold
      description: |-
        Create a new system threshold.
        This action requires ```can_update``` permission on the system.
      parameters:
      - name: system_id
        in: path
        description: Id of the specified system
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object body that will be created.
        required: true
        schema:
          "$ref": "#/definitions/ThresholdRequest"
      responses:
        '201':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ThresholdResponse"
          headers:
            Location:
              description: Url of the created system threshold
              type: string
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Threshold
  "/systems/{system_id}/thresholds/{id}":
    get:
      summary: Get an system threshold
      operationId: getSystemThreshold
      description: Get a single threshold of an system.
      parameters:
      - name: system_id
        in: path
        description: Id of the system
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the system threshold
        type: integer
        format: int64
        required: true
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/ThresholdResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Threshold
    patch:
      summary: Update an system threshold
      operationId: updateSystemThreshold
      description: Replaces the threshold belonging to an system. This action requires
        `can_update` permission on the system.
      parameters:
      - name: system_id
        in: path
        description: Id of the system
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the system threshold
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Object body that will be updated.
        required: true
        schema:
          "$ref": "#/definitions/ThresholdRequest"
      responses:
        '204':
          description: The threshold was updated successfully.
          schema:
            "$ref": "#/definitions/ThresholdResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Threshold
    delete:
      summary: Delete an system threshold.
      operationId: deleteSystemThreshold
      description: Delete an system threshold.
      parameters:
      - name: system_id
        in: path
        description: Id of the system
        type: integer
        format: int64
        required: true
      - name: id
        in: path
        description: Id of the system threshold
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Threshold
  "/systems/{system_id}/values":
    get:
      summary: Get latest values for the system.
      operationId: getSystemValues
      description: |-
        Returns a collection of the latest values for all keys of the system.
        Possible include values: ```unit, asset```
      parameters:
      - "$ref": "#/parameters/SystemPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/UsePreferredUnitsInstrumentationParam"
      - "$ref": "#/parameters/KeyFilter"
      - "$ref": "#/parameters/KeyUnitIDFilter"
      - "$ref": "#/parameters/GroupFilter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetValuesResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Values
  "/systems/{system_id}/values/{key}":
    get:
      summary: Get system values for a specific key.
      operationId: getSystemValuesForKey
      description: |-
        Returns a collection of the history values of an values for the specified key.
        For a aggregated result of the values the filter parameters aggregation and interval are mandatory.
        Receiving the result in a specific unit please use the filter parameter unit. The allowed units can be found in the intro section.
        With the filter parameters from to it is possible to receive the history of a defined time period.
        Possible include values: ```unit```
      parameters:
      - "$ref": "#/parameters/SystemPathID"
      - "$ref": "#/parameters/SystemValuesKeyPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/AssetValuePagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/UsePreferredUnitsInstrumentationKeyParam"
      - "$ref": "#/parameters/IncludeTotalCountParam"
      - "$ref": "#/parameters/AssetValueFromFilter"
      - "$ref": "#/parameters/AssetValueToFilter"
      - "$ref": "#/parameters/UnitFilter"
      - "$ref": "#/parameters/AggregationFilter"
      - "$ref": "#/parameters/AggregationIntervalFilter"
      - "$ref": "#/parameters/AssetValueStatusFilter"
      - "$ref": "#/parameters/AssetValueHoldFilter"
      - "$ref": "#/parameters/AssetValueSimulatedFilter"
      - "$ref": "#/parameters/AssetValuesOrderByParameter"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/AssetKeyValuesResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - Values
  "/technical_users":
    get:
      summary: Get a range of technical users
      operationId: getTechnicalUsers
      description: 'Returns a list of technical users. If the query has no matches,
        the response is an empty list. Possible include values: ```userroles, usergroups```'
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/IncludeParam"
      - "$ref": "#/parameters/EMailFilter"
      - "$ref": "#/parameters/UserOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/TechnicalUsersResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
    post:
      summary: Create a new technical user
      operationId: createTechnicalUser
      description: 'Creates a new technical user. Password is automatically generated
        an can not be defined. The generated password is part of the response (but
        cannot be later received again) Technical users must not be confirmed via
        eMail link.

        '
      parameters:
      - in: body
        name: Body
        description: Technical User object that needs to be registered
        required: true
        schema:
          "$ref": "#/definitions/TechnicalUserRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/TechnicalUserCreateResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/technical_users/{id}":
    delete:
      summary: Delete a technical user
      operationId: deleteTechnicalUser
      description: Delete a technical user identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the technical user to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/technical_users/{id}/password_reset":
    post:
      summary: create a new password for a technical user
      operationId: resetPasswordTechnicalUser
      description: " Password is automatically generated an can not be defined. The
        generated password is part of the response (but cannot be later received again). "
      parameters:
      - name: id
        in: path
        description: Id of the technical user
        type: integer
        format: int64
        required: true
      responses:
        '201':
          description: new password was generated
          schema:
            "$ref": "#/definitions/TechnicalUserPasswordResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - User
  "/usergroups":
    get:
      summary: Get a range of user groups
      operationId: getUserGroups
      description: Returns a list of all user group that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.'
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/UserGroupOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UserGroupsWithUsers"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserGroup
    post:
      summary: Create a new user group
      operationId: createUserGroup
      description: A user group can have many users and users can belong to several
        groups.
      parameters:
      - name: Body
        in: body
        description: User group to create
        required: true
        schema:
          "$ref": "#/definitions/UserGroupRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/UserGroupResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserGroup
  "/usergroups/{id}":
    get:
      summary: Get a single user group
      operationId: getUserGroupById
      description: Get a specific user group identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the user group to fetch
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UserGroupResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserGroup
    patch:
      summary: Update a user group
      operationId: updateUserGroup
      description: Update accessible parameters of the requested resource.
      parameters:
      - name: id
        in: path
        description: Id of the user group to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/UserGroupRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserGroup
    delete:
      summary: Delete a user group
      operationId: deleteUserGroup
      description: Delete a specific resource identified by the id in the URL.
      parameters:
      - name: id
        in: path
        description: Id of the user group to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserGroup
  "/usergroups/{usergroup_id}/users":
    get:
      summary: Get the users of a user group
      operationId: getUsersOfUserGroup
      description: Returns a list of all users of a specific user group identified
        by id in the url. You can apply query parameters in the request to get a filtered
        list. If the query has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/UsergroupPathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/FirstNameFilter"
      - "$ref": "#/parameters/LastNameFilter"
      - "$ref": "#/parameters/UserOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UsersPublicResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserGroup
    post:
      summary: Add users to a user group
      operationId: addUsersToUserGroup
      description: Add one or more users to a user group.
      parameters:
      - name: usergroup_id
        in: path
        description: Id of the user group to which the users will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/UserIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserGroup
    patch:
      summary: Replace the users of a user group
      operationId: replaceUsersOfUserGroup
      description: Replaces all users belonging to a user group. You can send a list
        of resources that will replace all previous values.
      parameters:
      - name: usergroup_id
        in: path
        description: Id of the user group of which the users will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/UserIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserGroup
    delete:
      summary: Remove users from a user group
      operationId: removeUsersFromUserGroup
      description: Remove one or more users from a user group.
      parameters:
      - name: usergroup_id
        in: path
        description: Id of the user group from which the users will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/UserIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserGroup
  "/userroles":
    get:
      summary: Get a range of user roles
      operationId: getUserRoles
      description: Returns a list of all user roles that are available in your scope.
        You can apply query parameters in the request to get a filtered list. If the
        query has no matches, the response will show an empty array.' To work with
        roles, admin role is required.
      parameters:
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/NameFilter"
      - "$ref": "#/parameters/TenantIDFilter"
      - "$ref": "#/parameters/UserRoleOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UserRolesResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '402':
          "$ref": "#/responses/402"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserRole
    post:
      summary: Create a new user role
      operationId: createUserRole
      description: A user role can have many users and users can belong to several
        roles. To work with roles, admin role is required.
      parameters:
      - name: Body
        in: body
        description: User role to create
        required: true
        schema:
          "$ref": "#/definitions/UserRoleRequest"
      responses:
        '201':
          description: The new resource was successfully created. The response body
            contains its representation.
          schema:
            "$ref": "#/definitions/UserRoleResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserRole
  "/userroles/{id}":
    get:
      summary: Get a single user role
      operationId: getUserRoleById
      description: Get a specific user role identified by the id in the URL. To work
        with roles, admin role is required.
      parameters:
      - name: id
        in: path
        description: Id of the user role to fetch
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UserRoleResponse"
        '304':
          "$ref": "#/responses/304"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserRole
    patch:
      summary: Update a user role
      operationId: updateUserRole
      description: Update accessible parameters of the requested resource. To work
        with roles, admin role is required.
      parameters:
      - name: id
        in: path
        description: Id of the user role to update
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Parameters that shall be updated.
        required: true
        schema:
          "$ref": "#/definitions/UserRoleRequest"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserRole
    delete:
      summary: Delete a user role
      operationId: deleteUserRole
      description: Delete a specific resource identified by the id in the URL. To
        work with roles, admin role is required.
      parameters:
      - name: id
        in: path
        description: Id of the user role to delete
        type: integer
        format: int64
        required: true
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserRole
  "/userroles/{userrole_id}/users":
    get:
      summary: Get all users of one user role. To work with roles, admin role is required.
      operationId: getUsersOfUserRole
      description: Returns a list of all users that are available in your scope. You
        can apply query parameters in the request to get a filtered list. If the query
        has no matches, the response will show an empty array.
      parameters:
      - "$ref": "#/parameters/UserrolePathID"
      - "$ref": "#/parameters/Pagination_Page"
      - "$ref": "#/parameters/Pagination_Per_Page"
      - "$ref": "#/parameters/FirstNameFilter"
      - "$ref": "#/parameters/LastNameFilter"
      - "$ref": "#/parameters/UserOrderBy"
      responses:
        '200':
          description: The request was successful.
          schema:
            "$ref": "#/definitions/UsersPublicResponse"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '404':
          "$ref": "#/responses/404"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserRole
    post:
      summary: Add users to a user role
      operationId: addUsersToUserRole
      description: Add one or more users to a user role. To work with roles, admin
        role is required.
      parameters:
      - name: userrole_id
        in: path
        description: Id of the user role to which the users will be added
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be added.
        required: true
        schema:
          "$ref": "#/definitions/UserIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserRole
    patch:
      summary: Replace the users of a user role
      operationId: replaceUsersOfUserRole
      description: Replaces all users belonging to an user role. You can send a list
        of resources that will replace all previous values. To work with roles, admin
        role is required.
      parameters:
      - name: userrole_id
        in: path
        description: Id of the user role of which the users will be replaced
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be replaced
        required: true
        schema:
          "$ref": "#/definitions/UserIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserRole
    delete:
      summary: Remove users from a user role
      operationId: deleteUsersFromUserRole
      description: Remove one or more users from an user role. To work with roles,
        admin role is required.
      parameters:
      - name: userrole_id
        in: path
        description: Id of the user role from which the users will be removed
        type: integer
        format: int64
        required: true
      - name: Body
        in: body
        description: Resources that shall be removed.
        required: true
        schema:
          "$ref": "#/definitions/UserIDs"
      responses:
        '204':
          "$ref": "#/responses/204"
        '400':
          "$ref": "#/responses/400"
        '401':
          "$ref": "#/responses/401"
        '403':
          "$ref": "#/responses/403"
        '404':
          "$ref": "#/responses/404"
        '409':
          "$ref": "#/responses/409"
        '429':
          "$ref": "#/responses/429"
        '500':
          "$ref": "#/responses/500"
      tags:
      - UserRole
definitions:
  APIKeyBase:
    discriminator: apiKeyBaseType
    properties:
      valid_from:
        type: string
        format: dateTime
        description: Date must be in format '2016-01-01', cannot be set by non-admin
          users
      valid_until:
        type: string
        format: dateTime
        description: Date must be in format '2016-01-01', cannot be set by non-admin
          users
      disabled:
        type: boolean
        description: disabled api keys cannot be used for requests
        default: false
      authentication_type:
        type: string
        description: 'possible values are: any, oauth, basic_auth. Oauth is assigned
          per default'
      description:
        type: string
        description: Description of the APIKey
  APIKeyRequest:
    required:
    - valid_from
    - valid_until
    - client_application
    - authentication_type
    allOf:
    - "$ref": "#/definitions/APIKeyBase"
    - properties:
        client_application:
          "$ref": "#/definitions/Nested_ID"
  APIKeyResponse:
    required:
    - id
    - api_key
    - client_application
    allOf:
    - "$ref": "#/definitions/APIKeyBase"
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
        api_key:
          type: string
          description: the api_key value
        api_secret:
          type: string
          description: API Key api_secret (only for oauth authentication)
        client_application:
          "$ref": "#/definitions/Nested_ID_href"
  APIKeysResponse:
    type: object
    required:
    - api_keys
    - pagination
    properties:
      api_keys:
        type: array
        items:
          "$ref": "#/definitions/APIKeyResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  APISubscriptionBase:
    discriminator: apiSubscriptionBaseType
    properties:
      display_name:
        type: string
        description: Name of the api subscription
      description:
        type: string
        description: Description of the api subscription
      external_reference:
        type: string
        description: can be used to store id of external api subscription management
          system
      status:
        type: string
        description: status of the api subscription, can be  open, payment_required,
          confirmed, cancelled, scheduled_update and non_renewing
      notification_status:
        type: string
        description: status of the mail notification for the api subscription, can
          be no_notification, first_notification, second_notification or alert_notification
      subscription_type:
        type: string
        description: type of the api subscription, can be 's' or 'm'
      customer_purchase_order:
        type: string
        description: reference for customer system
      start_date:
        type: string
        format: dateTime
        description: start date of the api subscription
      end_date:
        type: string
        format: dateTime
        description: end date of the api subscription
      billed_until:
        type: string
        format: dateTime
        description: end date of the api subscription
      external_user_reference:
        type: string
        description: can be used to store user id of external api subscription management
          system
      external_plan_variant_reference:
        type: string
        description: can be used to store plan variant of external api subscription
          management system
      api_call_quota:
        type: integer
        description: number of bought api calls
      storage_quota:
        type: integer
        description: number of bought storage (in bytes)
      number_assigned_assets:
        type: integer
        description: number of assigned assets
      connected_assets_used:
        type: integer
        description: number of connected assets used
      upload_download_quota:
        type: integer
        description: traffic for up- and download of data (in bytes)
      connected_asset_quota:
        type: integer
        description: number of bought connected asset addons
      api_calls_used:
        type: integer
        description: number of api calls used
      storage_used:
        type: integer
        description: number of storage used (in bytes)
      upload_download_used:
        type: integer
        description: data up- and download used (in bytes)
  APISubscriptionRequest:
    required:
    - user
    - client_application
    allOf:
    - "$ref": "#/definitions/APISubscriptionBase"
    - type: object
      properties:
        user:
          "$ref": "#/definitions/Nested_ID"
        client_application:
          "$ref": "#/definitions/Nested_ID"
        billing_address:
          "$ref": "#/definitions/BillingAddressRequest"
        shipping_address:
          "$ref": "#/definitions/ShippingAddressRequest"
  APISubscriptionResponse:
    required:
    - id
    - user
    - client_application
    allOf:
    - "$ref": "#/definitions/APISubscriptionBase"
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
        created_at:
          type: string
          description: Timestamp at which the api subscription was created
        updated_at:
          type: string
          description: Timestamp at which the api subscription was last changed
        user:
          "$ref": "#/definitions/Nested_ID_href"
        client_application:
          "$ref": "#/definitions/Nested_ID_href_name"
        billing_address:
          "$ref": "#/definitions/BillingAddressResponse"
        shipping_address:
          "$ref": "#/definitions/ShippingAddressResponse"
        links:
          type: object
          title: links
          properties:
            edge_devices:
              "$ref": "#/definitions/Link"
            specifications:
              "$ref": "#/definitions/Link"
  APISubscriptionsResponse:
    type: object
    required:
    - api_subscriptions
    - pagination
    properties:
      api_subscriptions:
        type: array
        items:
          "$ref": "#/definitions/APISubscriptionResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  AccessRightsResponse:
    type: object
    properties:
      can_read:
        type: boolean
      can_update:
        type: boolean
      can_delete:
        type: boolean
      can_permit:
        type: boolean
  AddOnBase:
    discriminator: addOnBaseType
    required:
    - name
    properties:
      name:
        type: string
        description: Name of the Add On
      external_reference:
        type: string
        description: can be used to store id of external subscription management system
      quantity:
        type: integer
        description: number of bought add ons
      material_number:
        type: string
        description: material_number of add on
      product_code:
        type: string
        description: product code (for edge device related addons)
      add_on_type:
        type: string
        description: 'possible values are: connectivity, addon and outcome'
  AddOnIDs:
    type: object
    title: add_ons
    required:
    - add_ons
    properties:
      nodes:
        type: array
        title: add_ons
        items:
          "$ref": "#/definitions/Nested_ID"
  AddOnResponse:
    required:
    - id
    allOf:
    - "$ref": "#/definitions/AddOnBase"
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
  AddOnsResponse:
    type: object
    required:
    - add_ons
    - pagination
    properties:
      add_ons:
        type: array
        items:
          "$ref": "#/definitions/AddOnResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  AddressBase:
    discriminator: addressBaseType
    required:
    - street
    - city
    - zip_code
    - country_code
    properties:
      street:
        type: string
        description: street name
      street_number:
        type: string
        description: street number
      zip_code:
        type: string
        description: zip code of the city
      city:
        type: string
        description: city name
      region_code:
        type: string
        description: code of the region
      country_code:
        type: string
        description: abbreviation of the country conform to ISO-3166
      phone:
        type: string
        description: phone number
      company_name:
        type: string
        description: company name
  AdminIDs:
    type: object
    title: admins
    required:
    - admins
    properties:
      admins:
        type: array
        title: admins
        items:
          "$ref": "#/definitions/Nested_ID"
  AssetBase:
    discriminator: assetBaseType
    required:
    - serial_number
    properties:
      serial_number:
        type: string
        description: at least 4 characters long and unique within the manufacturers
          scope. Whitespaces are trimmed
        minLength: 4
        maxLength: 255
      description:
        type: string
        description: description text of the asset
      production_date:
        type: string
        description: Date of production of the asset
      last_seen_at:
        type: string
        format: dateTime
        description: last time this asset has been visited/seen/scanned by a person
          or edge device
  AssetHealthConditionResponse:
    required:
    - id
    allOf:
    - "$ref": "#/definitions/HealthConditionBase"
    - type: object
    properties:
      id:
        type: integer
        format: int64
        description: Id of health condition
      asset_status:
        "$ref": "#/definitions/Nested_ID_href"
      channel:
        type: string
        description: channel for the health condition
      module:
        type: string
        description: module for the health condition
      links:
        type: object
        title: links
        properties:
          causes:
            "$ref": "#/definitions/Link"
  AssetHealthConditionTimemachine:
    required:
    - health_condition
    - created_datetime
    - deleted_datetime
    properties:
      health_condition:
        "$ref": "#/definitions/AssetHealthCondition_nested"
      created_datetime:
        type: string
        format: date-time
        description: Date of the Create Event
      deleted_datetime:
        type: string
        format: date-time
        description: Date of the Destroy Event
  AssetHealthCondition_nested:
    type: object
    required:
    - id
    - diagnosis_code
    - asset_status
    - channel
    - module
    properties:
      id:
        type: integer
        format: int64
        description: ID of the nested resources
      diagnosis_code:
        type: string
        description: diagnosis_code of the nested resource
      asset_status:
        "$ref": "#/definitions/Nested_ID_href"
      channel:
        type: string
        description: channel of the nested resource
      module:
        type: string
        description: module of the nested resource
      links:
        type: object
        title: links
        properties:
          causes:
            "$ref": "#/definitions/Link"
  AssetHealthConditionsCalculateRequest:
    type: object
    title: asset_health_conditions_calculate
    required:
    - protocol
    - diagnosis_message
    properties:
      protocol:
        type: string
        description: 'possible values: HART, PROFIBUS, ETHERNETIP, MODBUS, OTHERS'
      protocol_version:
        type: string
        description: definition of the protocol version. For example 5, 6 or 7 for
          HART
      diagnosis_message:
        type: string
        description: diagnosis message to use for the calculation
      device_ident:
        type: string
        description: the protocol dependent device identifier, mandatory for HART
          and PROFIBUS protocol
      product_identifier:
        type: string
        description: the protocol dependent product identifier, mandatory for HART
          and PROFIBUS protocol
  AssetHealthConditionsRequest:
    type: object
    title: causes
    required:
    - health_conditions
    properties:
      health_conditions:
        type: array
        title: health_conditions
        items:
          type: object
          required:
          - id
          properties:
            id:
              type: integer
              format: int64
              description: Id of the health condition
            channel:
              type: string
              description: channel for the health condition
            module:
              type: string
              description: module for the health condition
  AssetHealthConditionsResponse:
    type: object
    properties:
      health_conditions:
        type: array
        items:
          "$ref": "#/definitions/AssetHealthConditionResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  AssetHealthConditionsTimemachineResponse:
    type: object
    required:
    - asset_health_condition_timemachine
    - pagination
    properties:
      asset_health_condition_timemachine:
        type: array
        items:
          "$ref": "#/definitions/AssetHealthConditionTimemachine"
      pagination:
        "$ref": "#/definitions/Pagination"
  AssetIDFilter:
    description: One or multiple ids (comma list). Expected id format is integer
    type: string
  AssetIDs:
    type: object
    title: assets
    required:
    - assets
    properties:
      assets:
        type: array
        title: assets
        items:
          "$ref": "#/definitions/Nested_ID"
  AssetInstrumentationHistory:
    required:
    - instrumentation
    - event
    - event_datetime
    properties:
      instrumentation:
        "$ref": "#/definitions/Nested_ID_href_tag"
      event:
        type: string
        description: Event type, can be create or destroy
      event_datetime:
        type: string
        format: date-time
        description: Date of the Event
  AssetInstrumentationsHistoryResponse:
    type: object
    required:
    - asset_instrumentation_history
    - pagination
    properties:
      asset_instrumentation_history:
        type: array
        items:
          "$ref": "#/definitions/AssetInstrumentationHistory"
      pagination:
        "$ref": "#/definitions/Pagination"
  AssetKeyValueObjectsData:
    properties:
      timestamp:
        type: string
        description: timestamp of the value
      value_object:
        type: object
        description: value / selected value
  AssetKeyValueObjectsResponse:
    type: object
    required:
    - key
    - pagination
    properties:
      key:
        type: string
        description: key of the asset value object
      data:
        type: array
        items:
          "$ref": "#/definitions/AssetKeyValueObjectsData"
      pagination:
        "$ref": "#/definitions/AssetValueObjectsPagination"
  AssetKeyValuesData:
    properties:
      timestamp:
        type: string
        description: timestamp of the value
      value:
        type: number
        description: value / aggregated value
      status:
        type: string
        description: Possible values are good, uncertain, bad.
      simulated:
        type: boolean
      hold:
        type: boolean
  AssetKeyValuesResponse:
    type: object
    required:
    - key
    - unit_id
    - pagination
    properties:
      key:
        type: string
        description: key of the asset values
      unit:
        "$ref": "#/definitions/Nested_ID"
      group:
        type: string
        description: group of the asset value. No wildcard-filter supported.
      latest:
        type: string
        description: the last written asset value
      max:
        type: string
        description: the maximum value for the requested time slot
      min:
        type: string
        description: the minimum value for the requested time slot
      mean:
        type: string
        description: the mean (average) value for the requested time slot
      data:
        type: array
        items:
          "$ref": "#/definitions/AssetKeyValuesData"
      pagination:
        "$ref": "#/definitions/AssetValuesPagination"
  AssetRequest:
    required:
    - product
    - status
    allOf:
    - "$ref": "#/definitions/AssetBase"
    - type: object
      properties:
        status:
          "$ref": "#/definitions/Nested_ID"
        product:
          "$ref": "#/definitions/Nested_ID"
        parent:
          "$ref": "#/definitions/Nested_ID"
        tenant:
          "$ref": "#/definitions/Nested_ID"
  AssetResponse:
    required:
    - id
    - product
    - status
    allOf:
    - "$ref": "#/definitions/AssetBase"
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
        ownership_claimed:
          type: boolean
          default: false
          description: flag if asset ownership was claimed by a user
        created_at:
          type: string
          description: Timestamp at which the asset was created
        updated_at:
          type: string
          description: Timestamp at which the asset was last changed
        product:
          "$ref": "#/definitions/Nested_ID_href"
        product_variant:
          "$ref": "#/definitions/Nested_ID_href"
        parent:
          "$ref": "#/definitions/Nested_ID_href"
        status:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          type: object
          title: links
          properties:
            documents:
              "$ref": "#/definitions/Link"
            events:
              "$ref": "#/definitions/Link"
            nodes:
              "$ref": "#/definitions/Link"
            instrumentations:
              "$ref": "#/definitions/Link"
            systems:
              "$ref": "#/definitions/Link"
            pictures:
              "$ref": "#/definitions/Link"
            specifications:
              "$ref": "#/definitions/Link"
            subscriptions:
              "$ref": "#/definitions/Link"
            api_subscriptions:
              "$ref": "#/definitions/Link"
            health_conditions:
              "$ref": "#/definitions/Link"
  AssetScheduleBase:
    discriminator: scheduleBaseType
    properties:
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
      schedule_type:
        type: string
        description: possible value is 'heartbeat_verification'
      start_date:
        type: string
        format: dateTime
        description: 'start date/time of the schedule: format example: 2016-01-01T18:30:00'
      interval:
        type: string
        description: 'interval of the schedule. Format amount+identifier. Allowed
          identifier: m = minutes, h = hours, d = days, w = weeks, M = months, y =
          years. Example: 2w for two weeks'
  AssetScheduleRequest:
    required:
    - schedule_type
    allOf:
    - "$ref": "#/definitions/AssetScheduleBase"
    - type: object
  AssetScheduleResponse:
    required:
    - id
    - schedule_type
    allOf:
    - "$ref": "#/definitions/AssetScheduleBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
        next_execution_date:
          type: string
          format: dateTime
  AssetSchedulesResponse:
    type: object
    properties:
      schedules:
        type: array
        items:
          "$ref": "#/definitions/AssetScheduleResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  AssetStatusBase:
    discriminator: assetStatusBaseType
    required:
    - code
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  AssetStatusHistoryEntryBase:
    required:
    - timestamp
    properties:
      timestamp:
        type: string
        format: date-time
        description: Date and time when the asset status was changed
  AssetStatusHistoryRequest:
    description: status history of of an asset.
    type: object
    properties:
      history:
        type: array
        description: the array of asset objects
        items:
          "$ref": "#/definitions/AssetStatusHistoryRequestEntry"
  AssetStatusHistoryRequestEntry:
    required:
    - timestamp
    allOf:
    - "$ref": "#/definitions/AssetStatusHistoryEntryBase"
    - properties:
        value:
          "$ref": "#/definitions/Nested_ID"
  AssetStatusHistoryResponse:
    description: the paginated status history of an asset.
    type: object
    properties:
      history:
        type: array
        description: the array of asset objects
        items:
          "$ref": "#/definitions/AssetStatusHistoryResponseEntry"
      pagination:
        "$ref": "#/definitions/Pagination"
  AssetStatusHistoryResponseEntry:
    required:
    - timestamp
    allOf:
    - "$ref": "#/definitions/AssetStatusHistoryEntryBase"
    - properties:
        value:
          type: object
          required:
          - id
          - href
          - code
          - name
          properties:
            id:
              type: integer
              format: int64
              description: ID of the nested resources
            code:
              type: string
              description: The value must be unique. Whitespaces are trimmed.
            name:
              type: string
              description: Supports translations. Whitespaces are trimmed.
            href:
              type: string
              description: href to the nested resource
  AssetStatusRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/AssetStatusBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  AssetStatusResponse:
    required:
    - id
    - name
    allOf:
    - "$ref": "#/definitions/AssetStatusBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  AssetValue:
    properties:
      key:
        type: string
        description: key of the asset value
      unit:
        "$ref": "#/definitions/Nested_ID"
      group:
        type: string
        description: group of the asset value.
      timestamp:
        type: string
        description: timestamp of the value
      value:
        type: number
        description: value / aggregated value
      status:
        type: string
        description: Possible values are good, uncertain, bad.
      simulated:
        type: boolean
      hold:
        type: boolean
  AssetValueObjectRequest:
    properties:
      key:
        type: string
      data:
        type: array
        title: data
        items:
          type: object
          properties:
            timestamp:
              type: string
              format: dateTime
            value_object:
              type: object
          required:
          - value_object
    required:
    - key
    - value_objects
  AssetValueObjectsPagination:
    type: object
    required:
    - total_count
    - page_count
    - per_page
    - page
    properties:
      total_count:
        type: integer
        description: data items in the result
      page_count:
        type: integer
        description: number of pages
      per_page:
        type: integer
        description: items per page
        minimum: 1
        maximum: 1000
      page:
        type: integer
        description: current page
      prev:
        type: string
        description: The link for the immediate previous page for the data.
      next:
        type: string
        description: The link for the immediate next page for the data.
      first:
        type: string
        description: The link for the first page for the data.
      last:
        type: string
        description: The link for the last page for the data.
  AssetValueObjectsRequest:
    properties:
      value_objects:
        type: array
        items:
          "$ref": "#/definitions/AssetValueObjectRequest"
  AssetValueRequest:
    properties:
      key:
        type: string
      unit:
        "$ref": "#/definitions/Nested_ID_code"
      group:
        type: string
      data:
        type: array
        title: data
        items:
          type: object
          properties:
            timestamp:
              type: string
              format: dateTime
            value:
              type: number
            status:
              type: string
              description: Possible values are good, uncertain, bad.
            simulated:
              type: boolean
            hold:
              type: boolean
          required:
          - value
    required:
    - key
    - unit
    - values
  AssetValuesPagination:
    type: object
    required:
    - page_count
    - per_page
    - page
    properties:
      total_count:
        type: integer
        description: data items in the result
      page_count:
        type: integer
        description: number of pages
      per_page:
        type: integer
        description: items per page
        minimum: 1
        maximum: 1000
      page:
        type: integer
        description: current page
      prev:
        type: string
        description: The link for the immediate previous page for the data.
      next:
        type: string
        description: The link for the immediate next page for the data.
      first:
        type: string
        description: The link for the first page for the data.
      last:
        type: string
        description: The link for the last page for the data.
  AssetValuesRequest:
    properties:
      values:
        type: array
        items:
          "$ref": "#/definitions/AssetValueRequest"
  AssetValuesResponse:
    type: object
    required:
    - values
    - pagination
    properties:
      values:
        type: array
        items:
          "$ref": "#/definitions/AssetValue"
  AssetsResponse:
    type: object
    required:
    - assets
    - pagination
    properties:
      assets:
        type: array
        items:
          "$ref": "#/definitions/AssetResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  AttachmentLinkRequest:
    required:
    - href
    - document
    properties:
      href:
        type: string
        description: the link, must be http or https link
      content_author:
        type: string
        description: the file authors name
      content_version:
        type: string
        description: the version of the attachment
      content_date:
        type: string
        format: dateTime
        description: last edit date of the file
      content_type:
        type: string
        description: content type of the file
      file_name:
        type: string
        description: the name of the file
      remarks:
        type: string
        description: remarks of the attachment
      document:
        "$ref": "#/definitions/Nested_ID"
      languages:
        type: string
        description: the languages of the files content
  AttachmentResponse:
    required:
    - id
    - type
    - document
    - download_href
    properties:
      id:
        type: integer
        format: int64
        description: Id of object
      type:
        type: string
        description: type of attachment, can be 'file' or 'link'
      file_name:
        type: string
        description: the original filename of the attachment
      fingerprint:
        type: string
        description: SHA256 checksum of the file
      content_author:
        type: string
        description: the file authors name
      content_version:
        type: string
        description: the version of the attachment
      content_date:
        type: string
        format: dateTime
        description: date of the content
      content_type:
        type: string
        description: content type of the file
      remarks:
        type: string
        description: remarks of the attachment
      document:
        "$ref": "#/definitions/Nested_ID_href"
      languages:
        type: array
        description: the languages of the files content
        items:
          type: string
          description: alpha2 language codes (eg. de, en, fr). Supported languages
            are defined in ISO639-1
      download_href:
        type: string
        description: the download link to the file of the attachment
      created_at:
        type: string
        description: Timestamp at which the attachment was created
      updated_at:
        type: string
        description: Timestamp at which the attachment was last changed
  AttachmentsResponse:
    type: object
    required:
    - attachments
    - pagination
    properties:
      attachments:
        type: array
        items:
          "$ref": "#/definitions/AttachmentResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  BillOfMaterialBase:
    discriminator: billOfMaterialBaseType
    properties:
      name:
        type: string
        description: Bill of material name
      description:
        type: string
        description: description text of the Instrumentation
      date:
        type: string
        format: dateTime
        description: Date must be in format '2016-01-01'
      author:
        type: string
        description: Author who created the bill of material
  BillOfMaterialIDs:
    type: object
    title: billOfMaterials
    required:
    - billOfMaterials
    properties:
      billOfMaterials:
        type: array
        title: billOfMaterials
        items:
          "$ref": "#/definitions/Nested_ID"
  BillOfMaterialRequest:
    required:
    - name
    - date
    allOf:
    - "$ref": "#/definitions/BillOfMaterialBase"
    - type: object
  BillOfMaterialResponse:
    required:
    - id
    - name
    allOf:
    - "$ref": "#/definitions/BillOfMaterialBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        links:
          type: object
          title: links
          properties:
            instrumentations:
              "$ref": "#/definitions/Link"
            request_for_quotations:
              "$ref": "#/definitions/Link"
            documents:
              "$ref": "#/definitions/Link"
  BillOfMaterialsResponse:
    type: object
    required:
    - bill_of_materials
    - pagination
    properties:
      bill_of_materials:
        type: array
        items:
          "$ref": "#/definitions/BillOfMaterialResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  BillingAddressRequest:
    allOf:
    - "$ref": "#/definitions/AddressBase"
    - type: object
      properties:
        first_name:
          type: string
          description: first_name
        last_name:
          type: string
          description: last_name
        email:
          type: string
          description: email
        vat_number:
          type: string
          description: value added tax identification number is mandatory for EU-Countries.
  BillingAddressResponse:
    allOf:
    - "$ref": "#/definitions/BillingAddressRequest"
    - type: object
      properties:
        country_name:
          type: string
          description: name of the country
  BillingContactRequest:
    allOf:
    - "$ref": "#/definitions/AddressBase"
    - type: object
      properties:
        first_name:
          type: string
          description: first_name
        last_name:
          type: string
          description: last_name
        email:
          type: string
          description: email
  BillingContactResponse:
    allOf:
    - "$ref": "#/definitions/AddressBase"
    - type: object
      properties:
        first_name:
          type: string
          description: first_name
        last_name:
          type: string
          description: last_name
        email:
          type: string
          description: email
        country_name:
          type: string
          description: name of the country
  CategoryIDs:
    type: object
    title: categories
    required:
    - categories
    properties:
      categories:
        type: array
        title: categories
        items:
          "$ref": "#/definitions/Nested_ID"
  ClientApplicationBase:
    discriminator: clientApplicationBaseType
    required:
    - name
    properties:
      name:
        type: string
        description: Name of the client application
      description:
        type: string
        description: Description of the client application
      redirect_uris:
        type: array
        title: redirect_uris
        items:
          type: string
        description: Redirect URIs array
      is_insider:
        type: boolean
        description: Endress+Hauser Application
      can_send_mails:
        type: boolean
        description: Is client application allowed to send mails?
  ClientApplicationIDs:
    type: object
    title: client_applications
    required:
    - client_applications
    properties:
      client_applications:
        type: array
        title: client_applications
        items:
          "$ref": "#/definitions/Nested_ID"
  ClientApplicationPublicResponse:
    required:
    - id
    allOf:
    - "$ref": "#/definitions/ClientApplicationBase"
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
  ClientApplicationRequest:
    required:
    - contact_person
    allOf:
    - "$ref": "#/definitions/ClientApplicationBase"
    - type: object
      properties:
        contact_person:
          "$ref": "#/definitions/Nested_ID"
        technical_user:
          "$ref": "#/definitions/Nested_ID"
        billing_contact:
          "$ref": "#/definitions/BillingContactRequest"
  ClientApplicationResponse:
    required:
    - id
    - contact_person
    allOf:
    - "$ref": "#/definitions/ClientApplicationBase"
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
        allow_edge_device_application:
          type: boolean
          description: Is the client application allowed to get assigned to an edge
            device application?
        contact_person:
          "$ref": "#/definitions/Nested_ID_href"
        technical_user:
          "$ref": "#/definitions/Nested_ID_href"
        billing_contact:
          "$ref": "#/definitions/BillingContactResponse"
        links:
          type: object
          title: links
          properties:
            api_keys:
              "$ref": "#/definitions/Link"
  ClientApplicationsResponse:
    type: object
    required:
    - client_applications
    - pagination
    properties:
      client_applications:
        type: array
        items:
          "$ref": "#/definitions/ClientApplicationResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  CompanyAddressRequest:
    allOf:
    - "$ref": "#/definitions/AddressBase"
    - type: object
      properties:
        first_name:
          type: string
          description: first_name
        last_name:
          type: string
          description: last_name
        email:
          type: string
          description: email
  CompanyAddressResponse:
    allOf:
    - "$ref": "#/definitions/AddressBase"
    - type: object
      properties:
        first_name:
          type: string
          description: first_name
        last_name:
          type: string
          description: last_name
        email:
          type: string
          description: email
        country_name:
          type: string
          description: name of the country
  CompanyBase:
    discriminator: companyBaseType
    required:
    - name
    properties:
      name:
        type: string
        description: Company name. Is unique in the API. Whitespaces are trimmed
      description:
        type: string
        description: description text of the Company
      parent:
        "$ref": "#/definitions/Nested_ID"
  CompanyRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/CompanyBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
        address:
          "$ref": "#/definitions/CompanyAddressRequest"
  CompanyResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/CompanyBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        parent:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        address:
          "$ref": "#/definitions/CompanyAddressResponse"
  Company_nested:
    type: object
    description: Company is part of queries
    required:
    - id
    - href
    properties:
      id:
        type: integer
        format: int64
        description: The Company Id will be included in the answer of query products
          / assets. For create products / assets it will be ignored.
      name:
        type: string
        description: company name
      href:
        type: string
        description: Link to get company information
        readOnly: true
  ContainerExportRequest:
    type: object
    required:
    - standard
    properties:
      language:
        type: string
        description: language in which the export should be made, default is 'en'
      standard:
        "$ref": "#/definitions/Nested_ID"
  CurrentUserDemoDataResponse:
    type: object
    properties:
      active:
        type: boolean
        description: demo data available for user
  CurrentUserResponse:
    required:
    - id
    - email
    allOf:
    - "$ref": "#/definitions/UserBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        disabled:
          type: boolean
        address:
          "$ref": "#/definitions/UserAddressResponse"
        links:
          type: object
          properties:
            usergroups:
              "$ref": "#/definitions/Link"
            userroles:
              "$ref": "#/definitions/Link"
            usage:
              "$ref": "#/definitions/Link"
  CustomerBase:
    discriminator: customerBaseType
    properties:
      number:
        type: string
        description: customer number
      name:
        type: string
        description: Name of the customer
  CustomerRequest:
    required:
    - number
    allOf:
    - "$ref": "#/definitions/CustomerBase"
    - properties:
        address:
          "$ref": "#/definitions/CompanyAddressRequest"
  CustomerResponse:
    required:
    - id
    - number
    allOf:
    - "$ref": "#/definitions/CustomerBase"
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
        address:
          "$ref": "#/definitions/CompanyAddressResponse"
  CustomersResponse:
    type: object
    required:
    - customers
    - pagination
    properties:
      customers:
        type: array
        items:
          "$ref": "#/definitions/CustomerResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  DataExportRequest:
    type: object
    required:
    - type
    properties:
      type:
        type: string
        description: can be complete, measurements, batch_values, instrumentation_values,
          asset_vdi_2770_documentation_container or system_vdi_2770_documentation_container
      start_date:
        type: string
        format: dateTime
        description: start of export date range
      end_date:
        type: string
        format: dateTime
        description: end of export date range, if not provided, current date will
          be used
      language:
        type: string
        description: language in which the export should be made (currently only applicable
          to vdi 2770 containers)
      asset:
        "$ref": "#/definitions/Nested_ID"
      instrumentation:
        "$ref": "#/definitions/Nested_ID"
      system:
        "$ref": "#/definitions/Nested_ID"
      batch:
        "$ref": "#/definitions/Nested_ID"
      keys:
        description: value keys to export (in case of type instrumentation_values)
        type: array
        items:
          type: string
  DataExportResponse:
    type: object
    required:
    - status
    - created_at
    - user
    - type
    properties:
      status:
        type: integer
      type:
        type: string
        description: can be complete, measurements, batch_values, instrumentation_values,
          asset_vdi_2770_documentation_container or system_vdi_2770_documentation_container
      start_date:
        type: string
        format: dateTime
      end_date:
        type: string
        format: dateTime
      created_at:
        type: string
        format: dateTime
      finished_at:
        type: string
        format: dateTime
      language:
        type: string
        description: language in which the export should be made (currently only applicable
          to vdi 2770 containers)
      export_file_name:
        type: string
      export_content_type:
        type: string
      export_file_size:
        type: string
      export_updated_at:
        type: string
        format: dateTime
      export_fingerprint:
        type: string
      user:
        "$ref": "#/definitions/Nested_ID_href"
      asset:
        "$ref": "#/definitions/Nested_ID_href_serialnumber"
      instrumentation:
        "$ref": "#/definitions/Nested_ID_href_tag"
      system:
        "$ref": "#/definitions/Nested_ID_href_name"
      batch:
        "$ref": "#/definitions/Nested_ID_href_name"
      download_href:
        type: string
        description: download link
      available_until:
        type: string
        format: dateTime
        description: date until the download is available, after that the download
          will automatically removed
      keys:
        description: value keys to export (in case of type instrumentation_values)
        type: array
        items:
          type: string
  DataExportsResponse:
    type: object
    properties:
      data_exports:
        type: array
        items:
          "$ref": "#/definitions/DataExportResponse"
  DeliveriesResponse:
    type: object
    required:
    - deliveries
    - pagination
    properties:
      deliveries:
        type: array
        items:
          "$ref": "#/definitions/DeliveryResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  DeliveryBase:
    discriminator: deliveryBaseType
    description: Deliveries during life cycle of assets
    required:
    - number
    properties:
      number:
        type: string
        description: Number of the delivery
      name:
        type: string
        description: Name of the delivery
      customer_number:
        type: string
        description: Customer number, the delivery was shipped to
      description:
        type: string
        description: description text of the delivery
      date_of_shipment:
        type: string
        format: dateTime
        description: 'date of the delivery: format example: 2016-01-01T18:30:00'
  DeliveryIDs:
    type: object
    title: deliveries
    required:
    - deliveries
    properties:
      deliveries:
        type: array
        title: deliveries
        items:
          "$ref": "#/definitions/Nested_ID"
  DeliveryProducts:
    required:
    - product_id
    - product_code
    - quantity
    - href
    properties:
      product_id:
        type: integer
        format: int64
        description: Id of the object
      product_code:
        type: string
        description: product code
      quantity:
        type: integer
        format: int64
        description: quantity of the product with this delivery
      href:
        type: string
        description: Link to get collection of related objects
        readOnly: true
      assets:
        type: array
        items:
          "$ref": "#/definitions/DeliveryProductsAssets"
  DeliveryProductsAssets:
    properties:
      asset_id:
        type: integer
        format: int64
        description: Id of the object
      serial_number:
        type: string
        description: serial number of the object
      href:
        type: string
        description: Link to get collection of related objects
        readOnly: true
  DeliveryRequest:
    required:
    - status
    allOf:
    - "$ref": "#/definitions/DeliveryBase"
    - type: object
      properties:
        sender:
          "$ref": "#/definitions/Nested_ID"
        receiver:
          "$ref": "#/definitions/Nested_ID"
        status:
          "$ref": "#/definitions/Nested_ID"
  DeliveryResponse:
    required:
    - id
    allOf:
    - "$ref": "#/definitions/DeliveryBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        sender:
          "$ref": "#/definitions/Nested_ID_href"
        receiver:
          "$ref": "#/definitions/Nested_ID_href"
        status:
          "$ref": "#/definitions/Nested_ID_href"
        products:
          type: array
          items:
            "$ref": "#/definitions/DeliveryProducts"
        links:
          type: object
          title: links
          properties:
            assets:
              "$ref": "#/definitions/Link"
            documents:
              "$ref": "#/definitions/Link"
            purchase_orders:
              "$ref": "#/definitions/Link"
  DeliveryStatusBase:
    discriminator: deliveryStatusBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  DeliveryStatusRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/DeliveryStatusBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  DeliveryStatusResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/DeliveryStatusBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  DocumentBase:
    discriminator: documentBaseType
    required:
    - name
    properties:
      name:
        type: string
        description: Supports translations.
      description:
        type: string
        description: Supports translations.
      number:
        type: string
        description: This attribute can be used as an additional identifier for documents
      document_version:
        type: string
      valid_from:
        type: string
        format: dateTime
        description: Date must be in format 'YYYY-MM-DD'
      valid_until:
        type: string
        format: dateTime
        description: Date must be in format 'YYYY-MM-DD'
  DocumentCategoriesResponse:
    required:
    - categories
    - pagination
    type: object
    properties:
      categories:
        type: array
        items:
          "$ref": "#/definitions/DocumentCategoryResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  DocumentCategoryBase:
    discriminator: documentCategoryBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  DocumentCategoryRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/DocumentCategoryBase"
    - type: object
      properties:
        parent:
          "$ref": "#/definitions/Nested_ID"
        tenant:
          "$ref": "#/definitions/Nested_ID"
  DocumentCategoryResponse:
    required:
    - id
    - tenant
    allOf:
    - "$ref": "#/definitions/DocumentCategoryBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        parent:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          type: object
          properties:
            documents:
              "$ref": "#/definitions/Link"
            standards:
              "$ref": "#/definitions/Link"
  DocumentClassificationBase:
    discriminator: documentClassificationBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  DocumentClassificationRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/DocumentClassificationBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  DocumentClassificationResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/DocumentClassificationBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  DocumentIDs:
    type: object
    title: documents
    required:
    - documents
    properties:
      documents:
        type: array
        title: documents
        items:
          "$ref": "#/definitions/Nested_ID"
  DocumentRequest:
    required:
    - name
    - status
    - classification
    allOf:
    - "$ref": "#/definitions/DocumentBase"
    - type: object
      properties:
        classification:
          "$ref": "#/definitions/Nested_ID"
        status:
          "$ref": "#/definitions/Nested_ID"
        tenant:
          "$ref": "#/definitions/Nested_ID"
  DocumentResponse:
    required:
    - id
    - classification
    - status
    - links
    allOf:
    - "$ref": "#/definitions/DocumentBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        source:
          type: string
          description: Source of the document
        classification:
          "$ref": "#/definitions/Nested_ID_href"
        status:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        download_href:
          type: string
          description: the download link
        links:
          type: object
          title: links
          properties:
            attachments:
              "$ref": "#/definitions/Link"
            categories:
              "$ref": "#/definitions/Link"
            assets:
              "$ref": "#/definitions/Link"
            bill_of_materials:
              "$ref": "#/definitions/Link"
            events:
              "$ref": "#/definitions/Link"
            deliveries:
              "$ref": "#/definitions/Link"
            products:
              "$ref": "#/definitions/Link"
            instrumentations:
              "$ref": "#/definitions/Link"
            nodes:
              "$ref": "#/definitions/Link"
            purchase_orders:
              "$ref": "#/definitions/Link"
            quotations:
              "$ref": "#/definitions/Link"
            request_for_quotations:
              "$ref": "#/definitions/Link"
  DocumentStatusBase:
    discriminator: documentStatusBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  DocumentStatusRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/DocumentStatusBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  DocumentStatusResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/DocumentStatusBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  DocumentsResponse:
    type: object
    properties:
      documents:
        type: array
        items:
          "$ref": "#/definitions/DocumentResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  EdgeDeviceApplicationBase:
    type: object
    discriminator: edgeDeviceApplicationBaseFeature
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations. Description of the edge device feature
  EdgeDeviceApplicationResponse:
    type: object
    required:
    - id
    - name
    allOf:
    - "$ref": "#/definitions/EdgeDeviceApplicationBase"
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
        links:
          type: object
          title: links
          properties:
            features:
              "$ref": "#/definitions/Link"
            edge_device_application_types:
              "$ref": "#/definitions/Link"
  EdgeDeviceApplicationsResponse:
    type: object
    required:
    - edge_device_applications
    - pagination
    properties:
      edge_device_applications:
        type: array
        items:
          "$ref": "#/definitions/EdgeDeviceApplicationResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  EdgeDeviceBase:
    type: object
    discriminator: edgeDeviceBaseType
    required:
    - serial_number
    properties:
      serial_number:
        type: string
        description: serial number of the edge device
      name:
        type: string
        description: name of the edge device
      description:
        type: string
        description: description of the edge device
      log_level:
        type: string
        description: 'log level the edge device should use (allowed values: trace,
          debug, info, warning, error, critical, off)'
      apply_timestamp:
        type: string
        format: dateTime
        description: timestamp when the current settings have been applied at in the
          edge device. Expected date format is YYYY-MM-DDThh:mm:ss
  EdgeDeviceFeatureBase:
    type: object
    discriminator: edgeDeviceFeatureBaseFeature
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations. Description of the edge device feature
  EdgeDeviceFeatureIDs:
    type: object
    title: edge_device_features
    required:
    - edge_device_features
    properties:
      edge_device_features:
        type: array
        title: edge_device_features
        items:
          "$ref": "#/definitions/Nested_ID"
  EdgeDeviceFeatureResponse:
    type: object
    required:
    - id
    - name
    allOf:
    - "$ref": "#/definitions/EdgeDeviceFeatureBase"
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
        links:
          type: object
          title: links
          properties:
            products:
              "$ref": "#/definitions/Link"
            software_versions:
              "$ref": "#/definitions/Link"
  EdgeDeviceFeaturesResponse:
    type: object
    required:
    - edge_device_features
    - pagination
    properties:
      edge_device_features:
        type: array
        items:
          "$ref": "#/definitions/EdgeDeviceFeatureResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  EdgeDeviceResponse:
    type: object
    required:
    - id
    - type
    - status
    - software_version
    - log_level
    allOf:
    - "$ref": "#/definitions/EdgeDeviceBase"
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
        type:
          "$ref": "#/definitions/Nested_ID_href"
        status:
          "$ref": "#/definitions/Nested_ID_href"
        software_version:
          "$ref": "#/definitions/Nested_ID_href"
        technical_user:
          "$ref": "#/definitions/Nested_ID_href"
        order_user:
          "$ref": "#/definitions/Nested_ID_href"
        api_subscription:
          type: object
          required:
          - id
          - client_application
          - href
          properties:
            id:
              type: integer
              format: int64
              description: ID of the nested resources
            client_application:
              "$ref": "#/definitions/Nested_ID_href_name"
            href:
              type: string
              description: href to the nested resource
        api_key:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        usergroup:
          "$ref": "#/definitions/Nested_ID_href"
        add_on:
          "$ref": "#/definitions/Nested_ID_href"
        last_seen_at:
          type: string
          format: dateTime
          description: timestamp when the edge_device itself has polled the hub the
            last time. Date format is YYYY-MM-DDThh:mm:ss
        links:
          type: object
          title: links
          properties:
            specifications:
              "$ref": "#/definitions/Link"
            network_interfaces:
              "$ref": "#/definitions/Link"
            field_gateways:
              "$ref": "#/definitions/Link"
            features:
              "$ref": "#/definitions/Link"
            applications:
              "$ref": "#/definitions/Link"
  EdgeDevicesIds:
    type: object
    title: assets
    required:
    - edge_devices
    properties:
      edge_devices:
        type: array
        title: edge_devices
        items:
          "$ref": "#/definitions/Nested_ID"
  Error:
    required:
    - type
    - message
    properties:
      type:
        type: string
        description: |-
          The type of the error that occurred. Possible types are
          * access_denied - access to the required resource denied
          * api_lockout - action would lead to an api lockout
          * assigned - resources has assigned resource
          * assigned_restriction - resource can't be deleted because of dependents
          * association_blank - mandatory association was blank
          * association_not_found - invalid reference used for relation field
          * association_tenant_conflict - tenant association mismatch
          * association_conflict - association mismatch
          * associations_already_added - duplicate association
          * associations_not_found - invalid references used for relation field
          * blank - mandatory field was not set
          * boolean_format - value is not a boolean
          * date_format - invalid date format for field
          * date_range - invalid date range
          * date_time_format - invalid date time format for field
          * date_year_month_format - invalid date/year month/year format
          * greater_than - value to high for numeric field
          * id_format - invalid format of an ID field
          * internal_server_error - unexpected error on server
          * invalid - format not allowed
          * invalid_input - invalid input data caused an error
          * invalid_enum_value - the given value is not a valid enum value
          * key_format - invalid key format
          * lockout - action would lead to a resource lockout
          * less_than - value to low for numeric field
          * missing_header - a mandatory request header is missing
          * missing_parameter - a mandatory request parameter is missing
          * not_a_number - for numerical fields
          * not_unique_in_scope - resource not unique in corresponding scope
          * number_format - wrong input for number
          * parameter_missing - required parameter for resource is missing
          * parent - resource can not be deleted cause its a parent to other resources
          * present - field that should not be set
          * quota_exceeded - file, image or asset could not be created because the subscription quota has exceeded
          * service_unavailable - service is currently not available
          * specification_not_found - specification for given key not found
          * specifications_not_found - specifications for given keys not found
          * taken - unique field is already taken
          * tenant_on_child - tenant parent/child conflict
          * too_long - length not in valid range
          * too_short - length not in valid range
          * unconfirmed - user is unconfirmed
          * wrong_format - invalid date format for field
          * wrong_length - does not match exact length
      message:
        type: string
        description: readable message about the error
      attribute:
        type: string
        description: the attribute on which the error occurred. This could be used
          to figure out which field was invalid. Is also set for relation attributes
          with faulty references
  ErrorResponse:
    properties:
      errors:
        type: array
        items:
          "$ref": "#/definitions/Error"
  EventBase:
    discriminator: eventBaseType
    description: Events during life cycle of assets
    required:
    - name
    properties:
      name:
        type: string
        description: Name of the event
      description:
        type: string
        description: description text of the event
      responsible:
        type: string
        description: responsible of the event
      start_datetime:
        type: string
        format: dateTime
        description: 'start date/time of the event: format example: 2016-01-01T18:30:00'
      end_datetime:
        type: string
        format: dateTime
        description: 'end date/time of the event: format example: 2016-01-01T18:30:00'
  EventRequest:
    required:
    - status
    - type
    - assets
    - instrumentations
    - nodes
    allOf:
    - "$ref": "#/definitions/EventBase"
    - type: object
      properties:
        status:
          "$ref": "#/definitions/Nested_ID"
        type:
          "$ref": "#/definitions/Nested_ID"
        tenant:
          "$ref": "#/definitions/Nested_ID"
        assets:
          type: array
          items:
            "$ref": "#/definitions/Nested_ID"
        instrumentations:
          type: array
          items:
            "$ref": "#/definitions/Nested_ID"
        nodes:
          type: array
          items:
            "$ref": "#/definitions/Nested_ID"
  EventRequestNoAssets:
    required:
    - status
    - type
    allOf:
    - "$ref": "#/definitions/EventBase"
    - type: object
      properties:
        status:
          "$ref": "#/definitions/Nested_ID"
        type:
          "$ref": "#/definitions/Nested_ID"
        tenant:
          "$ref": "#/definitions/Nested_ID"
  EventRequestNoInstrumentations:
    required:
    - status
    - type
    allOf:
    - "$ref": "#/definitions/EventBase"
    - type: object
      properties:
        status:
          "$ref": "#/definitions/Nested_ID"
        type:
          "$ref": "#/definitions/Nested_ID"
        tenant:
          "$ref": "#/definitions/Nested_ID"
  EventRequestNoNodes:
    required:
    - status
    - type
    allOf:
    - "$ref": "#/definitions/EventBase"
    - type: object
      properties:
        status:
          "$ref": "#/definitions/Nested_ID"
        type:
          "$ref": "#/definitions/Nested_ID"
        tenant:
          "$ref": "#/definitions/Nested_ID"
  EventResponse:
    required:
    - id
    - name
    - status
    - type
    - start_datetime
    allOf:
    - "$ref": "#/definitions/EventBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        status:
          "$ref": "#/definitions/Nested_ID_href"
        type:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          type: object
          title: links
          required:
          - assets
          properties:
            assets:
              "$ref": "#/definitions/Link"
            documents:
              "$ref": "#/definitions/Link"
            instrumentations:
              "$ref": "#/definitions/Link"
            nodes:
              "$ref": "#/definitions/Link"
            specifications:
              "$ref": "#/definitions/Link"
  EventStatusBase:
    discriminator: eventStatusBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  EventStatusRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/EventStatusBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  EventStatusResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/EventStatusBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  EventTypeBase:
    discriminator: eventTypeBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
      deletable:
        type: boolean
        description: Events with deletable types can be deleted.
  EventTypeRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/EventTypeBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  EventTypeResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/EventTypeBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  EventsResponse:
    type: object
    properties:
      events:
        type: array
        items:
          "$ref": "#/definitions/EventResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  ExtendedOrderCode:
    type: object
    properties:
      extended_order_code:
        type: string
        description: Extended order code
  HealthConditionBase:
    type: object
    discriminator: healthConditionBaseType
    required:
    - diagnosis_code
    - protocol
    - protocol_version
    - asset_status
    properties:
      diagnosis_code:
        type: string
        description: Diagnosis code of the health condition. Whitespaces are trimmed
  HealthConditionCauseBase:
    discriminator: healthConditionCauseBaseType
    required:
    - code
    - description
    properties:
      code:
        type: string
        description: code of the cause
      description:
        type: string
        description: description of the cause
  HealthConditionCauseIDs:
    type: object
    title: causes
    required:
    - causes
    properties:
      causes:
        type: array
        title: causes
        items:
          "$ref": "#/definitions/Nested_ID"
  HealthConditionCauseRequest:
    required:
    - code
    - health_condition
    - protocol
    allOf:
    - "$ref": "#/definitions/HealthConditionCauseBase"
    - type: object
  HealthConditionCauseResponse:
    required:
    - id
    - code
    allOf:
    - "$ref": "#/definitions/HealthConditionCauseBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        links:
          type: object
          title: links
          properties:
            remedies:
              "$ref": "#/definitions/Link"
  HealthConditionExtended:
    type: object
    required:
    - code
    allOf:
    - "$ref": "#/definitions/HealthConditionBase"
    - type: object
    properties:
      protocol:
        type: string
        description: 'Possible values are: ''PROFIBUS'', ''HART'' and ''MODBUS''.'
      protocol_version:
        type: string
        description: version number of the protocol
      device_ident:
        type: string
        description: protocol specific device_ident
      product_identifier:
        type: string
        description: protocol specific product_identifier
      hidden:
        type: boolean
        description: should be hidden in frontend
        default: false
      rules:
        type: array
        description: Health condition rules.
        items:
          type: object
          required:
          - type
          properties:
            type:
              type: string
              description: type of the rule, possible values are 'bit', 'bitarea',
                'channel' and 'integer'
            bit:
              type: integer
              format: int64
              description: needed for rule of type 'bit'
            start_bit:
              type: integer
              format: int64
              description: needed for rule of type 'bitarea'
            end_bit:
              type: integer
              format: int64
              description: needed for rule of type 'bitarea'
            value:
              type: integer
              format: int64
              description: needed for rules of type 'bitarea', 'channel', 'integer'
  HealthConditionRemedyBase:
    discriminator: healthConditionRemedyBaseType
    required:
    - code
    - description
    properties:
      code:
        type: string
        description: code of the remedy
      description:
        type: string
        description: description of the remedy
  HealthConditionRemedyRequest:
    required:
    - code
    - health_condition
    - device_ident
    - protocol
    allOf:
    - "$ref": "#/definitions/HealthConditionRemedyBase"
    - type: object
  HealthConditionRemedyResponse:
    required:
    - id
    - code
    allOf:
    - "$ref": "#/definitions/HealthConditionRemedyBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
  HealthConditionRequest:
    type: object
    allOf:
    - "$ref": "#/definitions/HealthConditionExtended"
    - type: object
    properties:
      asset_status:
        "$ref": "#/definitions/Nested_ID"
      tenant:
        "$ref": "#/definitions/Nested_ID"
  HealthConditionResponse:
    required:
    - id
    allOf:
    - "$ref": "#/definitions/HealthConditionRequest"
    - type: object
    properties:
      id:
        type: integer
        format: int64
        description: Id of object
      asset_status:
        "$ref": "#/definitions/Nested_ID_href"
      tenant:
        "$ref": "#/definitions/Nested_ID_href"
      links:
        type: object
        title: links
        properties:
          causes:
            "$ref": "#/definitions/Link"
  HealthConditionsRequest:
    type: object
    title: causes
    required:
    - health_conditions
    properties:
      health_conditions:
        type: array
        title: health_conditions
        items:
          type: object
          required:
          - id
          properties:
            id:
              type: integer
              format: int64
              description: Id of the cause
  HealthConditionsResponse:
    type: object
    properties:
      health_conditions:
        type: array
        items:
          "$ref": "#/definitions/HealthConditionResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  InstrumentationAssetHistory:
    required:
    - asset
    - event
    - event_datetime
    properties:
      asset:
        "$ref": "#/definitions/Nested_ID_href_serialnumber"
      event:
        type: string
        description: Event type, can be create or destroy
      event_datetime:
        type: string
        format: date-time
        description: Date of the Event
  InstrumentationAssetsHistoryResponse:
    type: object
    required:
    - instrumentation_asset_history
    - pagination
    properties:
      instrumentation_asset_history:
        type: array
        items:
          "$ref": "#/definitions/InstrumentationAssetHistory"
      pagination:
        "$ref": "#/definitions/Pagination"
  InstrumentationBase:
    discriminator: instrumentationBaseType
    properties:
      tag:
        type: string
        description: Instrumentation tag. The value must be unique if under a parent
          instrumentation
      description:
        type: string
        description: description text of the Instrumentation
      criticality:
        type: string
        description: 'possible values are: undefined, low, medium and high. Undefined
          is assigned per default'
      accessibility:
        type: string
        description: 'possible values are: undefined, easy, moderate and difficult.
          Undefined is assigned per default'
  InstrumentationIDs:
    type: object
    title: instrumentations
    required:
    - instrumentations
    properties:
      instrumentations:
        type: array
        title: instrumentations
        items:
          "$ref": "#/definitions/Nested_ID"
  InstrumentationRequest:
    required:
    - tag
    - status
    - type
    allOf:
    - "$ref": "#/definitions/InstrumentationBase"
    - type: object
      properties:
        status:
          "$ref": "#/definitions/Nested_ID"
        type:
          "$ref": "#/definitions/Nested_ID"
        parent:
          "$ref": "#/definitions/Nested_ID"
        tenant:
          "$ref": "#/definitions/Nested_ID"
  InstrumentationResponse:
    required:
    - id
    - tag
    - status
    - type
    allOf:
    - "$ref": "#/definitions/InstrumentationBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        status:
          "$ref": "#/definitions/Nested_ID_href"
        type:
          "$ref": "#/definitions/Nested_ID_href"
        parent:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          type: object
          title: links
          properties:
            assets:
              "$ref": "#/definitions/Link"
            bill_of_materials:
              "$ref": "#/definitions/Link"
            documents:
              "$ref": "#/definitions/Link"
            nodes:
              "$ref": "#/definitions/Link"
            pictures:
              "$ref": "#/definitions/Link"
            specifications:
              "$ref": "#/definitions/Link"
            thresholds:
              "$ref": "#/definitions/Link"
  InstrumentationStatusBase:
    discriminator: instrumentationStatusBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  InstrumentationStatusRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/InstrumentationStatusBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  InstrumentationStatusResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/InstrumentationStatusBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  InstrumentationTypeBase:
    discriminator: instrumentationTypeBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  InstrumentationTypeRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/InstrumentationTypeBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
        parent:
          "$ref": "#/definitions/Nested_ID"
  InstrumentationTypeResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/InstrumentationTypeBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        parent:
          "$ref": "#/definitions/Nested_ID_href"
  InstrumentationsResponse:
    type: object
    properties:
      instrumentations:
        type: array
        items:
          "$ref": "#/definitions/InstrumentationResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  Link:
    type: object
    required:
    - href
    properties:
      href:
        type: string
        description: Link to get collection of related objects
        readOnly: true
  Nested_ID:
    type: object
    required:
    - id
    properties:
      id:
        type: integer
        format: int64
        description: Id of the nested resource
  Nested_ID_Email:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: ID of the nested resources
      email:
        type: string
        description: email to the nested resource
  Nested_ID_code:
    type: object
    required:
    - id
    - code
    properties:
      id:
        type: integer
        format: int64
        description: ID of the nested resources
      code:
        type: string
        description: code of the nested resource
  Nested_ID_href:
    type: object
    required:
    - id
    - href
    properties:
      id:
        type: integer
        format: int64
        description: ID of the nested resources
      href:
        type: string
        description: href to the nested resource
  Nested_ID_href_name:
    type: object
    required:
    - id
    - href
    properties:
      id:
        type: integer
        format: int64
        description: ID of the nested resources
      href:
        type: string
        description: href to the nested resource
      name:
        type: string
        description: name of the nested resource
  Nested_ID_href_serialnumber:
    type: object
    required:
    - id
    - href
    - serial_number
    properties:
      id:
        type: integer
        format: int64
        description: ID of the nested resources
      href:
        type: string
        description: href to the nested resource
      serial_number:
        type: string
        description: serial number of the nested resource
  Nested_ID_href_tag:
    type: object
    required:
    - id
    - href
    - tag
    properties:
      id:
        type: integer
        format: int64
        description: ID of the nested resources
      href:
        type: string
        description: href to the nested resource
      tag:
        type: string
        description: tag of the nested resource
  Nested_ID_user_name_href:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: ID of the nested resources
      first_name:
        type: string
        description: email to the user
      last_name:
        type: string
        description: email to the user
      href:
        type: string
        description: href to the nested resource
  NodeBase:
    discriminator: nodeBaseType
    properties:
      name:
        type: string
        description: Node name. The value must be unique. Whitespaces are trimmed
      description:
        type: string
        description: description text of the Instrumentation
      hidden:
        type: boolean
        description: marks a node as hidden node (e.g for nodes that should not be
          visible in a UI)
  NodeIDs:
    type: object
    title: nodes
    required:
    - nodes
    properties:
      nodes:
        type: array
        title: nodes
        items:
          "$ref": "#/definitions/Nested_ID"
  NodeRequest:
    required:
    - name
    - type
    allOf:
    - "$ref": "#/definitions/NodeBase"
    - type: object
      properties:
        type:
          "$ref": "#/definitions/Nested_ID"
        parent:
          "$ref": "#/definitions/Nested_ID"
        tenant:
          "$ref": "#/definitions/Nested_ID"
  NodeResponse:
    required:
    - id
    - name
    - type
    - hidden
    allOf:
    - "$ref": "#/definitions/NodeBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        type:
          "$ref": "#/definitions/Nested_ID_href"
        parent:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          type: object
          title: links
          properties:
            instrumentations:
              "$ref": "#/definitions/Link"
            assets:
              "$ref": "#/definitions/Link"
            documents:
              "$ref": "#/definitions/Link"
            pictures:
              "$ref": "#/definitions/Link"
            specifications:
              "$ref": "#/definitions/Link"
            recipes:
              "$ref": "#/definitions/Link"
  NodeTypeBase:
    discriminator: nodeTypeBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  NodeTypeRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/NodeTypeBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
    - type: object
      properties:
        parent:
          "$ref": "#/definitions/Nested_ID"
  NodeTypeResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/NodeTypeBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        parent:
          "$ref": "#/definitions/Nested_ID_href"
  NodesResponse:
    type: object
    properties:
      nodes:
        type: array
        items:
          "$ref": "#/definitions/NodeResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  NotificationBase:
    discriminator: notificationBaseType
    required:
    - name
    - content
    - start_datetime
    properties:
      name:
        type: string
        description: The name of the notification
      content:
        type: string
        description: Supports translations.
      start_datetime:
        type: string
        format: dateTime
        description: 'start date/time of the notification: format example: 2016-01-01T18:30:00'
      end_datetime:
        type: string
        format: dateTime
        description: 'end date/time of the notification: format example: 2016-01-01T18:30:00'
  NotificationResponse:
    allOf:
    - "$ref": "#/definitions/NotificationBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        links:
          type: object
          title: links
          required:
          - assets
          properties:
            client_applications:
              "$ref": "#/definitions/Link"
  Pagination:
    type: object
    required:
    - total_count
    - page_count
    - per_page
    - page
    properties:
      total_count:
        type: integer
        description: items in the result
      page_count:
        type: integer
        description: number of pages
      per_page:
        type: integer
        description: items per page
        minimum: 1
        maximum: 100
      page:
        type: integer
        description: current page
      prev:
        type: string
        description: The link for the immediate previous page of results.
      next:
        type: string
        description: The link for the immediate next page of results.
      first:
        type: string
        description: The link for the first page of results.
      last:
        type: string
        description: The link for the last page of results.
  PermissionBase:
    discriminator: permissionBaseType
    properties:
      permission_type:
        type: string
        description: 'possible values are: ''can_read'', ''can_update'', ''can_delete''
          and ''can_permit'''
      assignable:
        type: object
        title: assignable
        required:
        - id
        - type
        properties:
          id:
            type: integer
            description: id of the assignable
          type:
            type: string
            description: object type of the assignable with uppercase, can be 'User'
              or 'Usergroup'
      permitable:
        type: object
        title: permitable
        required:
        - id
        - type
        properties:
          id:
            type: integer
            description: id of the permitable
          type:
            type: string
            description: object type of the permitable with uppercase, eg. 'Asset'
              or 'Node'
  PermissionInheritanceBase:
    discriminator: permissionInheritanceBaseType
    properties:
      permission_type:
        type: string
        description: 'possible values are: ''can_read'', ''can_update'', ''can_delete''
          and ''can_permit'''
      inheritance:
        type: boolean
        description: define if permission should be inherited or not
      permission_inheritable:
        type: object
        title: permission_inheritable
        required:
        - id
        - type
        properties:
          id:
            type: integer
            description: id of the permission_inheritable
          type:
            type: string
            description: object type of the source permission_inheritable with uppercase,
              eg. 'Event'
  PermissionInheritanceRequest:
    required:
    - permission_type
    - permission_inheritable
    - inheritance
    allOf:
    - "$ref": "#/definitions/PermissionInheritanceBase"
    - type: object
  PermissionInheritanceResponse:
    required:
    - id
    - permission_type
    - permission_inheritable
    - inheritance
    allOf:
    - "$ref": "#/definitions/PermissionInheritanceBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
  PermissionRequest:
    required:
    - permission_type
    - assignable
    - permitable
    allOf:
    - "$ref": "#/definitions/PermissionBase"
    - type: object
  PermissionRequestCreateRequest:
    required:
    - asset
    properties:
      request_message:
        type: string
        description: message to the owners
      asset:
        type: object
        properties:
          serial_number:
            type: string
            description: serial number of the asset user wants to access to
          manufacturer:
            type: object
            properties:
              id:
                type: integer
                format: int64
                description: id of the manufacturer
  PermissionRequestResponse:
    required:
    - status
    - id
    - permitable
    - request_user
    properties:
      id:
        type: integer
        format: int64
      status:
        type: string
        description: 'possible values are: open, accepted, rejected'
      request_message:
        type: string
        description: message of the requester to the owner
      response_message:
        type: string
        description: message of the owner to the requester
      permitable:
        type: object
        title: permitable
        required:
        - id
        - type
        properties:
          id:
            type: integer
            description: id of the permitable
          type:
            type: string
            description: object type of the permitable with uppercase, eg. Asset
      request_user:
        type: object
        title: request_user
        required:
        - id
        - href
        - email
        properties:
          id:
            type: integer
            description: id of the request user
          href:
            type: string
            description: href to the request user
          email:
            type: string
            description: email of the request user
          first_name:
            type: string
            description: first_name of the request user
          last_name:
            type: string
            description: last_name of the request user
      response_user:
        type: object
        title: response_user
        required:
        - id
        - href
        - email
        properties:
          id:
            type: integer
            description: id of the response user
          href:
            type: string
            description: href to the response user
          email:
            type: string
            description: email of the response user
          first_name:
            type: string
            description: first_name of the response user
          last_name:
            type: string
            description: last_name of the response user
  PermissionRequestUpdateRequest:
    properties:
      response_message:
        type: string
        description: message to the requester
      status:
        type: string
        description: 'possible values are: open, accepted, rejected'
  PermissionResponse:
    required:
    - id
    - permission_type
    - assignable
    - permitable
    allOf:
    - "$ref": "#/definitions/PermissionBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
  PictureLinkRequest:
    required:
    - href
    properties:
      href:
        type: string
        description: the link, must be http or https link
      width:
        type: integer
        description: width of picture
      height:
        type: integer
        description: height of picture
  PictureResponse:
    required:
    - id
    - type
    - download_href
    properties:
      id:
        type: integer
        format: int64
        description: Id of object
      type:
        type: string
        description: type of attachment, can be 'file' or 'link'
      file_name:
        type: string
        description: the original filename of the attachment
      fingerprint:
        type: string
        description: SHA256 checksum of the file
      width:
        type: integer
        description: width of picture
      height:
        type: integer
        description: height of picture
      download_href:
        type: string
        description: the download link to the file of the attachment
  PicturesResponse:
    type: object
    required:
    - pictures
    - pagination
    properties:
      pictures:
        type: array
        items:
          "$ref": "#/definitions/PictureResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  ProductBase:
    discriminator: productBaseType
    properties:
      product_code:
        type: string
        description: Product code must be unique within the manufacturers scope. Whitespaces
          are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
      phase_out_date:
        type: string
        format: date
        description: Date of product phase out
      order_stop_date:
        type: string
        format: date
        description: Date of order stop
      spare_parts_until:
        type: string
        format: date
        description: Date until spare parts are available
      spare_sensors_until:
        type: string
        format: date
        description: Date until spare sensors are available
      repair_until:
        type: string
        format: date
        description: Date until repair of product is offered
      calibration_until:
        type: string
        format: date
        description: Date until calibration of product is offered
  ProductCategoriesResponse:
    type: object
    properties:
      categories:
        type: array
        items:
          "$ref": "#/definitions/ProductCategoryResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  ProductCategoryBase:
    discriminator: productCategoryBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
      source_ref:
        type: string
        description: Source_ref of the product category
  ProductCategoryRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/ProductCategoryBase"
    - type: object
      properties:
        parent:
          "$ref": "#/definitions/Nested_ID"
        tenant:
          "$ref": "#/definitions/Nested_ID"
  ProductCategoryResponse:
    required:
    - id
    allOf:
    - "$ref": "#/definitions/ProductCategoryBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        parent:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          type: object
          properties:
            products:
              "$ref": "#/definitions/Link"
  ProductFeatureBase:
    discriminator: productFeatureBaseType
    properties:
      feature_key:
        type: string
        description: natural identifier of the product feature (also used to order
          result)
      description:
        type: string
        description: description text of the product feature
  ProductFeatureRequest:
    required:
    - feature_key
    - product
    allOf:
    - "$ref": "#/definitions/ProductFeatureBase"
    - type: object
      properties:
        product:
          "$ref": "#/definitions/Nested_ID"
  ProductFeatureResponse:
    required:
    - id
    - feature_key
    - product
    allOf:
    - "$ref": "#/definitions/ProductFeatureBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        product:
          "$ref": "#/definitions/Nested_ID_href"
  ProductFeaturesResponse:
    type: object
    properties:
      product_features:
        type: array
        items:
          "$ref": "#/definitions/ProductFeatureResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  ProductIDs:
    type: object
    title: products
    required:
    - products
    properties:
      products:
        type: array
        title: products
        items:
          "$ref": "#/definitions/Nested_ID"
  ProductIdentifierBase:
    discriminator: productIdentifierBaseType
    description: Product identifiers
    required:
    - product_identifier
    - organization_name
    properties:
      product_identifier:
        type: string
        description: Product identifiers are HEX codes registered by the defined organization.
      organization_name:
        type: string
        description: Possible values are 'FIELDCOMM_GROUP', 'PROFIBUS_PROFINET, 'ODVA',
          'MODBUS_ORGANIZATION', 'OTHER_ORGANIZATION'
      protocol:
        type: string
        description: Possible values are 'HART', 'PROFIBUS', 'ETHERNETIP', 'MODBUS',
          'OTHERS'
      protocol_version:
        type: string
        description: For certain protocols the version needs to be defined as well.
  ProductIdentifierRequest:
    required:
    - tenant
    - products
    allOf:
    - "$ref": "#/definitions/ProductIdentifierBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
        products:
          type: array
          items:
            "$ref": "#/definitions/Nested_ID"
  ProductIdentifierRequestNoProducts:
    required:
    - tenant
    allOf:
    - "$ref": "#/definitions/ProductIdentifierBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  ProductIdentifierResponse:
    required:
    - id
    allOf:
    - "$ref": "#/definitions/ProductIdentifierBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          type: object
          title: links
          required:
          - products
          properties:
            products:
              "$ref": "#/definitions/Link"
  ProductIdentifiersResponse:
    type: object
    properties:
      product_identifiers:
        type: array
        items:
          "$ref": "#/definitions/ProductIdentifierResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  ProductLineItem:
    type: object
    properties:
      product_id:
        type: integer
        format: int64
        description: Id of the product for the requested object
        readOnly: true
      product_code:
        type: string
        description: product code for the requested object
        readOnly: true
      quantity:
        type: integer
        format: int64
        description: Quantity of the product for the requested object
        readOnly: true
      href:
        type: string
        description: Link to product
        readOnly: true
  ProductOptionBase:
    discriminator: productOptionBaseType
    properties:
      option_key:
        type: string
        description: natural identifier of the product option (unique per product_feature)
      description:
        type: string
        description: description text of the product option
  ProductOptionRequest:
    required:
    - option_key
    - product_feature
    allOf:
    - "$ref": "#/definitions/ProductOptionBase"
    - type: object
      properties:
        product_feature:
          "$ref": "#/definitions/Nested_ID"
  ProductOptionResponse:
    required:
    - id
    - option_key
    - product_feature
    allOf:
    - "$ref": "#/definitions/ProductOptionBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        product_feature:
          "$ref": "#/definitions/Nested_ID_href"
  ProductOptionsResponse:
    type: object
    properties:
      product_options:
        type: array
        items:
          "$ref": "#/definitions/ProductOptionResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  ProductQuantity:
    type: object
    title: products
    required:
    - product
    properties:
      product:
        "$ref": "#/definitions/Quantity"
  ProductRequest:
    required:
    - product_code
    - manufacturer
    - status
    - tenant
    allOf:
    - "$ref": "#/definitions/ProductBase"
    - type: object
      properties:
        manufacturer:
          "$ref": "#/definitions/Nested_ID"
        status:
          "$ref": "#/definitions/Nested_ID"
        parent:
          "$ref": "#/definitions/Nested_ID"
        tenant:
          "$ref": "#/definitions/Nested_ID"
  ProductResponse:
    required:
    - id
    - product_code
    - manufacturer
    - status
    allOf:
    - "$ref": "#/definitions/ProductBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        status:
          "$ref": "#/definitions/Nested_ID_href"
        manufacturer:
          "$ref": "#/definitions/Nested_ID_href"
        parent:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        maintenance_advices:
          type: array
          description: Maintenance advices for the product
          items:
          - type: string
        links:
          type: object
          properties:
            purchase_orders:
              "$ref": "#/definitions/Link"
            quotations:
              "$ref": "#/definitions/Link"
            categories:
              "$ref": "#/definitions/Link"
            documents:
              "$ref": "#/definitions/Link"
            pictures:
              "$ref": "#/definitions/Link"
            specifications:
              "$ref": "#/definitions/Link"
            health_conditions:
              "$ref": "#/definitions/Link"
            softwares:
              "$ref": "#/definitions/Link"
            spare_parts:
              "$ref": "#/definitions/Link"
  ProductStatusBase:
    discriminator: productStatusBaseType
    required:
    - name
    - code
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  ProductStatusRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/ProductStatusBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  ProductStatusResponse:
    required:
    - id
    - name
    allOf:
    - "$ref": "#/definitions/ProductStatusBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  ProductVariantBase:
    discriminator: productVariantBaseType
    properties:
      variant_code:
        type: string
        description: product variant code (unique per product)
  ProductVariantConfigurationRequest:
    type: object
    properties:
      configurations:
        type: array
        items:
          type: object
          required:
          - feature_key
          title: features
          properties:
            feature_key:
              type: string
              description: feature_key of product feature
            options:
              type: array
              items:
                type: object
                title: options
                required:
                - option_key
                properties:
                  option_key:
                    type: string
                    description: option key
  ProductVariantConfigurationResponse:
    type: object
    required:
    - configurations
    properties:
      configurations:
        type: array
        items:
          type: object
          title: features
          required:
          - id
          - href
          - feature_key
          properties:
            id:
              type: integer
              format: int64
              description: Id of the feature
            href:
              type: string
              description: URL of feature
            feature_key:
              type: string
              description: feature_key of product feature
            description:
              type: string
              description: description text of the product feature
            options:
              type: array
              items:
                type: object
                title: options
                required:
                - id
                - href
                - option_key
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Id of thr option
                  href:
                    type: string
                    description: URL of the option
                  option_key:
                    type: string
                    description: option key
                  description:
                    type: string
                    description: description text of the option
  ProductVariantRequest:
    required:
    - variant_code
    - product
    allOf:
    - "$ref": "#/definitions/ProductVariantBase"
    - type: object
      properties:
        product:
          "$ref": "#/definitions/Nested_ID"
  ProductVariantResponse:
    required:
    - id
    - variant_code
    - product
    allOf:
    - "$ref": "#/definitions/ProductVariantBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        product:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          type: object
          properties:
            configurations:
              "$ref": "#/definitions/Link"
  ProductVariantsResponse:
    type: object
    properties:
      product_variants:
        type: array
        items:
          "$ref": "#/definitions/ProductVariantResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  Product_nested:
    type: object
    required:
    - id
    - href
    - manufacturer
    properties:
      id:
        type: integer
        format: int64
        description: Id of object
      name:
        type: string
        description: product name
      product_code:
        type: string
        description: product code
      href:
        type: string
        description: Link to get product information
        readOnly: true
      manufacturer:
        "$ref": "#/definitions/Company_nested"
  ProductsResponse:
    type: object
    properties:
      products:
        type: array
        items:
          "$ref": "#/definitions/ProductResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  PurchaseOrderBase:
    required:
    - number
    discriminator: purchaseOrderBaseType
    properties:
      number:
        type: string
      customer_number:
        type: string
        description: customer number the purchase order was sold to
      customer_purchase_order_number:
        type: string
      name:
        type: string
      date:
        type: string
        format: dateTime
        description: Date must be in format '2016-01-01'
      description:
        type: string
      status:
        "$ref": "#/definitions/Nested_ID"
      sender:
        "$ref": "#/definitions/Nested_ID"
      receiver:
        "$ref": "#/definitions/Nested_ID"
      quotation:
        "$ref": "#/definitions/Nested_ID"
  PurchaseOrderIDs:
    type: object
    title: purchase_orders
    required:
    - purchase_orders
    properties:
      purchase_orders:
        type: array
        title: purchase_orders
        items:
          "$ref": "#/definitions/Nested_ID"
  PurchaseOrderRequest:
    required:
    - number
    - status
    allOf:
    - "$ref": "#/definitions/PurchaseOrderBase"
    - type: object
  PurchaseOrderResponse:
    required:
    - id
    - status
    allOf:
    - "$ref": "#/definitions/PurchaseOrderBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        status:
          "$ref": "#/definitions/Nested_ID_href"
        sender:
          "$ref": "#/definitions/Nested_ID_href"
        receiver:
          "$ref": "#/definitions/Nested_ID_href"
        quotation:
          "$ref": "#/definitions/Nested_ID_href"
        line_items:
          type: array
          items:
            "$ref": "#/definitions/ProductLineItem"
        links:
          type: object
          title: links
          properties:
            products:
              "$ref": "#/definitions/Link"
            deliveries:
              "$ref": "#/definitions/Link"
            documents:
              "$ref": "#/definitions/Link"
  PurchaseOrderStatusBase:
    discriminator: purchaseOrderStatusBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  PurchaseOrderStatusRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/PurchaseOrderStatusBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  PurchaseOrderStatusResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/PurchaseOrderStatusBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  PurchaseOrdersResponse:
    type: object
    properties:
      purchase_orders:
        type: array
        items:
          "$ref": "#/definitions/PurchaseOrderResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  Quantity:
    type: object
    required:
    - id
    - quantity
    properties:
      id:
        type: integer
        format: int64
        description: Id of the nested resource
      quantity:
        type: integer
        format: int64
        description: Quantity of the nested resource
  QuotationBase:
    required:
    - name
    - number
    discriminator: quotationBaseType
    properties:
      number:
        type: string
      name:
        type: string
      date:
        type: string
        format: dateTime
        description: Date must be in format '2016-01-01'
      description:
        type: string
        description: Description
  QuotationIDs:
    type: object
    title: quotations
    required:
    - quotations
    properties:
      quotations:
        type: array
        title: quotations
        items:
          "$ref": "#/definitions/Nested_ID"
  QuotationRequest:
    required:
    - sender
    - receiver
    - status
    allOf:
    - "$ref": "#/definitions/QuotationBase"
    - type: object
      properties:
        status:
          "$ref": "#/definitions/Nested_ID"
        sender:
          "$ref": "#/definitions/Nested_ID"
        receiver:
          "$ref": "#/definitions/Nested_ID"
        request_for_quotation:
          "$ref": "#/definitions/Nested_ID"
  QuotationResponse:
    required:
    - id
    - sender
    - receiver
    - status
    allOf:
    - "$ref": "#/definitions/QuotationBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        status:
          "$ref": "#/definitions/Nested_ID_href"
        sender:
          "$ref": "#/definitions/Nested_ID_href"
        receiver:
          "$ref": "#/definitions/Nested_ID_href"
        line_items:
          type: array
          title: line_items
          items:
            "$ref": "#/definitions/ProductLineItem"
        links:
          type: object
          title: links
          properties:
            products:
              "$ref": "#/definitions/Link"
            purchase_orders:
              "$ref": "#/definitions/Link"
            documents:
              "$ref": "#/definitions/Link"
  QuotationStatusBase:
    discriminator: quotationStatusBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  QuotationStatusRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/QuotationStatusBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  QuotationStatusResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/QuotationStatusBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  QuotationsResponse:
    type: object
    properties:
      quotations:
        type: array
        items:
          "$ref": "#/definitions/QuotationResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  RecipeBase:
    discriminator: RecipeBaseType
    properties:
      name:
        type: string
        description: Recipe name. Recipe
      description:
        type: string
        description: description text of the Recipe
  RecipeIDs:
    type: object
    title: recipes
    required:
    - recipes
    properties:
      recipes:
        type: array
        title: recipes
        items:
          "$ref": "#/definitions/Nested_ID"
  RecipeResponse:
    required:
    - id
    - tag
    - status
    - type
    allOf:
    - "$ref": "#/definitions/RecipeBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        status:
          "$ref": "#/definitions/Nested_ID_href"
        type:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          type: object
          title: links
          properties:
            nodes:
              "$ref": "#/definitions/Link"
            pictures:
              "$ref": "#/definitions/Link"
            specifications:
              "$ref": "#/definitions/Link"
  RecipesResponse:
    type: object
    properties:
      recipes:
        type: array
        items:
          "$ref": "#/definitions/RecipeResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  RequestForQuotationBase:
    discriminator: requestForQuotationBaseType
    properties:
      number:
        type: string
      name:
        type: string
      date:
        type: string
        format: dateTime
        description: Date must be in format '2016-01-01'
      author:
        type: string
        description: Author Author who created the request for quotation
      description:
        type: string
        description: Description
      status:
        "$ref": "#/definitions/Nested_ID"
      sender:
        "$ref": "#/definitions/Nested_ID"
      receiver:
        "$ref": "#/definitions/Nested_ID"
  RequestForQuotationIDs:
    type: object
    title: request_for_quotations
    required:
    - request_for_quotations
    properties:
      request_for_quotations:
        type: array
        title: request_for_quotations
        items:
          "$ref": "#/definitions/Nested_ID"
  RequestForQuotationRequest:
    required:
    - name
    - number
    - sender
    - receiver
    - status
    allOf:
    - "$ref": "#/definitions/RequestForQuotationBase"
    - type: object
  RequestForQuotationResponse:
    required:
    - id
    - status
    - sender
    - receiver
    - name
    - number
    allOf:
    - "$ref": "#/definitions/RequestForQuotationBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        status:
          "$ref": "#/definitions/Nested_ID_href"
        sender:
          "$ref": "#/definitions/Nested_ID_href"
        receiver:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          type: object
          title: links
          properties:
            bill_of_materials:
              "$ref": "#/definitions/Link"
            documents:
              "$ref": "#/definitions/Link"
  RequestForQuotationStatusBase:
    discriminator: requestForQuotationStatusBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  RequestForQuotationStatusRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/RequestForQuotationStatusBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  RequestForQuotationStatusResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/RequestForQuotationStatusBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  RequestForQuotationsResponse:
    type: object
    properties:
      request_for_quotations:
        type: array
        items:
          "$ref": "#/definitions/RequestForQuotationResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  ResourceNotificationBase:
    discriminator: resourceNotificationBaseType
    required:
    - event_type
    - value
    properties:
      enabled:
        type: boolean
        description: Whether the notification is enabled or not (default true).
      event_type:
        type: string
        description: 'possible values are: ''health_status'''
      asset_statuses:
        type: array
        description: 'An array of asset status code strings. Example: [''out_of_specification'']'
        items:
          type: string
      diagnosis_codes:
        type: array
        description: 'An array of diagnosis code strings. Example: [''F123'']'
        items:
          type: string
  ResourceNotificationRequest:
    allOf:
    - "$ref": "#/definitions/ResourceNotificationBase"
  ResourceNotificationResponse:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Id of notification
    allOf:
    - "$ref": "#/definitions/ResourceNotificationBase"
  ResourceNotificationsResponse:
    type: object
    properties:
      notifications:
        type: array
        items:
          "$ref": "#/definitions/ResourceNotificationResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  SearchItemResponse:
    required:
    - id
    - type
    - title
    - description
    properties:
      id:
        type: integer
        format: int64
        description: Id of object
      type:
        type: string
        description: type of object. Possible value asset, instrumentation, node.
      title:
        type: string
        description: title of object
      description:
        type: string
        description: description of object
  SearchItemsResponse:
    type: object
    properties:
      results:
        type: array
        items:
          "$ref": "#/definitions/SearchItemResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  ShippingAddressRequest:
    allOf:
    - "$ref": "#/definitions/AddressBase"
    - type: object
      properties:
        first_name:
          type: string
          description: first_name
        last_name:
          type: string
          description: last_name
  ShippingAddressResponse:
    allOf:
    - "$ref": "#/definitions/ShippingAddressRequest"
    - type: object
      properties:
        country_name:
          type: string
          description: name of the country
  SignInResponse:
    required:
    - time
    - application
    - ip
    properties:
      time:
        type: string
        format: dateTime
        description: time at which the user signed in
      application:
        type: string
        description: name of the application the user signed in
      ip:
        type: string
        description: remote ip used by the user
      browser_name:
        type: string
        description: name of the used browser
      browser_version:
        type: string
        description: version of the used browser
      device_type:
        type: string
        description: type of the used device (desktop, tablet or mobile)
      platform_name:
        type: string
        description: name of the used platform
      platform_version:
        type: string
        description: version of the used platform
      client_application:
        "$ref": "#/definitions/Nested_ID_href_name"
  SignInsResponse:
    type: object
    properties:
      sign_ins:
        type: array
        items:
          "$ref": "#/definitions/SignInResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  SoftwareAttachmentLinkRequestPatch:
    required:
    - href
    properties:
      href:
        type: string
        description: the link, must be http or https link
      content_date:
        type: string
        format: dateTime
        description: Last edit date of the file
      remarks:
        type: string
        description: remarks of the software attachment
      software:
        "$ref": "#/definitions/Nested_ID"
  SoftwareAttachmentLinkRequestPost:
    required:
    - href
    - software
    properties:
      href:
        type: string
        description: the link, must be http or https link
      content_date:
        type: string
        format: dateTime
        description: Last edit date of the file
      remarks:
        type: string
        description: remarks of the software attachment
      software:
        "$ref": "#/definitions/Nested_ID"
  SoftwareAttachmentResponse:
    required:
    - id
    - type
    - software
    - download_href
    properties:
      id:
        type: integer
        format: int64
        description: Id of object
      type:
        type: string
        description: type of software attachment, can be 'file' or 'link'
      file_name:
        type: string
        description: the original filename of the software attachment
      fingerprint:
        type: string
        description: SHA256 checksum of the file
      content_date:
        type: string
        format: dateTime
        description: last edit date of the file
      remarks:
        type: string
        description: remarks of the software attachment
      software:
        "$ref": "#/definitions/Nested_ID_href"
      download_href:
        type: string
        description: the download link to the file of the software attachment
  SoftwareAttachmentsResponse:
    type: object
    required:
    - software_attachments
    - pagination
    properties:
      software_attachments:
        type: array
        items:
          "$ref": "#/definitions/SoftwareAttachmentResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  SoftwareIDs:
    type: object
    title: softwares
    required:
    - softwares
    properties:
      softwares:
        type: array
        title: softwares
        items:
          "$ref": "#/definitions/Nested_ID"
  SoftwareRequestPatch:
    properties:
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
      version_number:
        type: string
        description: Version number of the software
      tenant:
        "$ref": "#/definitions/Nested_ID"
      type:
        "$ref": "#/definitions/Nested_ID"
  SoftwareRequestPost:
    required:
    - version_number
    - tenant
    properties:
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
      version_number:
        type: string
        description: Version number of the software
      tenant:
        "$ref": "#/definitions/Nested_ID"
      type:
        "$ref": "#/definitions/Nested_ID"
  SoftwareResponse:
    required:
    - id
    - version_number
    - tenant
    - software_type
    - links
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Id of object
      version_number:
        type: string
      name:
        type: string
      description:
        type: string
      tenant:
        "$ref": "#/definitions/Nested_ID_href"
      software_type:
        type: object
        properties:
          id:
            type: integer
            format: int64
            description: ID of the nested resources
      links:
        type: object
        title: links
        properties:
          software_attachments:
            "$ref": "#/definitions/Link"
  SoftwaresResponse:
    type: object
    properties:
      softwares:
        type: array
        items:
          "$ref": "#/definitions/SoftwareResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  SparePartBase:
    discriminator: sparePartBaseType
    properties:
      order_code:
        type: string
        description: order code of the spare part, must be unique within the tenant
          scope. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations.
      description:
        type: string
        description: Supports translations.
  SparePartIDs:
    type: object
    title: spare_parts
    required:
    - spare_parts
    properties:
      spare_parts:
        type: array
        title: spare_parts
        items:
          "$ref": "#/definitions/Nested_ID"
  SparePartRequest:
    required:
    - order_code
    - status
    - type
    - tenant
    allOf:
    - "$ref": "#/definitions/SparePartBase"
    - type: object
      properties:
        status:
          "$ref": "#/definitions/Nested_ID"
        type:
          "$ref": "#/definitions/Nested_ID"
        tenant:
          "$ref": "#/definitions/Nested_ID"
  SparePartResponse:
    required:
    - id
    - order_code
    - name
    - status
    - type
    - tenant
    allOf:
    - "$ref": "#/definitions/SparePartBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        status:
          "$ref": "#/definitions/Nested_ID_href"
        type:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          type: object
          properties:
            documents:
              "$ref": "#/definitions/Link"
  SparePartStatusResponse:
    required:
    - id
    - name
    allOf:
    - "$ref": "#/definitions/SparePartBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  SparePartTypeBase:
    discriminator: SparePartTypeBaseType
    required:
    - name
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  SparePartTypeRequest:
    required:
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/SparePartTypeBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID"
  SparePartTypeResponse:
    required:
    - id
    - name
    - tenant
    allOf:
    - "$ref": "#/definitions/SparePartTypeBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        parent:
          "$ref": "#/definitions/Nested_ID_href"
  SparePartsResponse:
    type: object
    properties:
      spare_parts:
        type: array
        items:
          "$ref": "#/definitions/SparePartResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  SpecificationBase:
    discriminator: specificationBaseType
    properties:
      value:
        type: string
      unit:
        type: string
      source_timestamp:
        type: string
        format: dateTime
        description: source time stamp of the value
  SpecificationHistoryResponse:
    description: the paginated history of the specification attributes values
    type: object
    properties:
      key:
        type: array
        description: the array of historic values is named with the specification
          attributes key
        items:
          "$ref": "#/definitions/SpecificationResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  SpecificationKeys:
    description: Array of specification keys
    type: object
    required:
    - specification_keys
    properties:
      specification_keys:
        type: array
        items:
          type: string
  SpecificationRequest:
    allOf:
    - "$ref": "#/definitions/SpecificationBase"
  SpecificationResponse:
    required:
    - updated_at
    - value
    allOf:
    - "$ref": "#/definitions/SpecificationBase"
    - type: object
      properties:
        updated_at:
          type: string
          format: dateTime
          description: date of the last modification
          readOnly: true
  SpecificationUIVisibleRequest:
    required:
    - value
    allOf:
    - "$ref": "#/definitions/SpecificationRequest"
    - type: object
      properties:
        ui_visible:
          type: boolean
          default: false
          description: specification should be visible in ui
  SpecificationUIVisibleResponse:
    required:
    - updated_at
    - value
    allOf:
    - "$ref": "#/definitions/SpecificationBase"
    - type: object
      properties:
        updated_at:
          type: string
          format: dateTime
          description: date of the last modification
          readOnly: true
        ui_visible:
          type: boolean
          description: specification should be visible in ui
  SpecificationsUIVisibleResponse:
    description: |-
      is a map of keys and values in which the values are of the from defined
                                  in #/definitions/Specification. 
    type: object
    additionalProperties:
      "$ref": "#/definitions/SpecificationUIVisibleResponse"
  SpecificationsDelete:
    description: An array that contains the keys to delete entirely from the specification
      object
    type: array
    items:
      type: string
  SpecificationsRename:
    required:
    - old_key
    description: the old key with the value being the new key name
    type: object
    properties:
      old_key:
        type: string
        description: the value is the old_keys' new name
  SpecificationsRequest:
    description: |-
      is a map of keys and values in which the values are of the from defined
                                  in #/definitions/Specification. The given "key" entry is just an example and can be replaced
                                  by the keys to specify
    type: object
    required:
    - key
    properties:
      key:
        "$ref": "#/definitions/SpecificationRequest"
    additionalProperties:
      "$ref": "#/definitions/SpecificationRequest"
  SpecificationsResponse:
    description: |-
      is a map of keys and values in which the values are of the from defined
                                  in #/definitions/Specification. The given "key" entry is just an example and can be replaced
                                  by the keys to specify
    type: object
    required:
    - key
    properties:
      key:
        "$ref": "#/definitions/SpecificationResponse"
    additionalProperties:
      "$ref": "#/definitions/SpecificationResponse"
  SpecificationsUIVisibleRequest:
    description: |-
      is a map of keys and values in which the values are of the from defined
                                  in #/definitions/Specification. The given "key" entry is just an example and can be replaced
                                  by the keys to specify
    type: object
    required:
    - key
    properties:
      key:
        "$ref": "#/definitions/SpecificationUIVisibleRequest"
    additionalProperties:
      "$ref": "#/definitions/SpecificationUIVisibleRequest"
  SubscriptionAssetAssignmentRequest:
    allOf:
    - type: object
      properties:
        object_id:
          type: integer
          format: int64
          description: Id of object
        object_type:
          type: string
          description: type of object, can only be node,system or instrumentation.
        asset_search_query:
          type: string
          description: Index search query to search for assets (like in the /search
            endpoint)
  SubscriptionBase:
    discriminator: subscriptionBaseType
    properties:
      display_name:
        type: string
        description: Name of the subscription
      description:
        type: string
        description: Description of the subscription
      external_reference:
        type: string
        description: can be used to store id of external subscription management system
      status:
        type: string
        description: status of the subscription, can be  open, payment_required, confirmed,
          cancelled, scheduled_update and non_renewing
      notification_status:
        type: string
        description: status of the mail notification for the subscription, can be
          no_notification, first_notification, second_notification or alert_notification
      asset_notification_status:
        type: string
        description: specific status of the mail notification for the asset limitation
          in the subscription, can be no_notification, first_notification, second_notification
          or alert_notification
      file_storage_notification_status:
        type: string
        description: specific status of the mail notification for the file storage
          limitation in the subscription, can be no_notification, first_notification,
          second_notification or alert_notification
      data_storage_notification_status:
        type: string
        description: status of the mail notification for the data storage limitation
          in the subscription, can be no_notification, first_notification, second_notification
          or alert_notification
      data_storage_notification_status_updated_at:
        type: string
        format: dateTime
        description: last date when data_storage_notification_status was changed
      file_storage_notification_status_updated_at:
        type: string
        format: dateTime
        description: last date when file_storage_notification_status was changed
      customer_purchase_order:
        type: string
        description: reference for customer system
      start_date:
        type: string
        format: dateTime
        description: start date of the subscription
      end_date:
        type: string
        format: dateTime
        description: end date of the subscription
      billed_until:
        type: string
        format: dateTime
        description: end date of the subscription
      trial_end_date:
        type: string
        format: dateTime
        description: end date of the subscription's trial period
      cancelled_at:
        type: string
        format: dateTime
        description: date when subscription was cancelled
      external_user_reference:
        type: string
        description: can be used to store user id of external subscription management
          system
      external_plan_variant_reference:
        type: string
        description: can be used to store plan variant of external subscription management
          system
      number_assigned_assets:
        type: integer
        description: number of assigned assets
      asset_quota:
        type: integer
        description: number of bought assets
      storage_quota:
        type: integer
        description: size of bought file storage (in bytes)
      data_storage_quota:
        type: integer
        description: size of bought data storage (in bytes)
      seat_quota:
        type: integer
        description: number of bought seats
      force_mfa:
        type: boolean
        description: will force MFA for the users using this subscription including
          owner and seat users
      reseller_label:
        type: string
        description: Custom label given to the subscription by the reseller user
  SubscriptionRequest:
    required:
    - user
    - client_application
    allOf:
    - "$ref": "#/definitions/SubscriptionBase"
    - type: object
      properties:
        user:
          "$ref": "#/definitions/Nested_ID"
        client_application:
          "$ref": "#/definitions/Nested_ID"
        billing_address:
          "$ref": "#/definitions/BillingAddressRequest"
        shipping_address:
          "$ref": "#/definitions/ShippingAddressRequest"
        successor:
          "$ref": "#/definitions/Nested_ID"
        predecessor:
          "$ref": "#/definitions/Nested_ID"
        customer:
          "$ref": "#/definitions/Nested_ID"
  SubscriptionResponse:
    required:
    - id
    - user
    - client_application
    allOf:
    - "$ref": "#/definitions/SubscriptionBase"
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
        created_at:
          type: string
          description: Timestamp at which the subscription was created
        updated_at:
          type: string
          description: Timestamp at which the subscription was last changed
        user:
          "$ref": "#/definitions/Nested_ID_href"
        client_application:
          "$ref": "#/definitions/Nested_ID_href_name"
        billing_address:
          "$ref": "#/definitions/BillingAddressResponse"
        shipping_address:
          "$ref": "#/definitions/ShippingAddressResponse"
        successor:
          "$ref": "#/definitions/Nested_ID_href"
        predecessor:
          "$ref": "#/definitions/Nested_ID_href"
        customer:
          "$ref": "#/definitions/Nested_ID_href"
        usable:
          type: boolean
          description: indicates whether the subscription can be used as a user subscription
            (user is owner or a seat user) in our service applications e.g. Analytics.
            This information will only be part of the response if scope with value
            'USER' is used.
        links:
          type: object
          title: links
          properties:
            assets:
              "$ref": "#/definitions/Link"
            specifications:
              "$ref": "#/definitions/Link"
  SubscriptionSeatBase:
    discriminator: subscriptionSeatBaseType
    properties:
      status:
        type: string
        description: status of the subscription seat, can be invited, pending, accepted
      email:
        type: string
        description: email of users to be invited as new netilion user
  SubscriptionSeatPatch:
    type: object
    required:
    - status
    properties:
      status:
        type: string
        description: status of the subscription seat, can be invited, pending, accepted
  SubscriptionSeatResponse:
    required:
    - id
    allOf:
    - "$ref": "#/definitions/SubscriptionSeatBase"
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
        subscription:
          "$ref": "#/definitions/Nested_ID_href"
        user:
          "$ref": "#/definitions/Nested_ID_user_name_href"
  SubscriptionSeatsResponse:
    type: object
    required:
    - subscription_seats
    - pagination
    properties:
      subscription_seats:
        type: array
        items:
          "$ref": "#/definitions/SubscriptionSeatResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  SubscriptionsResponse:
    type: object
    required:
    - subscriptions
    - pagination
    properties:
      subscriptions:
        type: array
        items:
          "$ref": "#/definitions/SubscriptionResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  SuccessorResponse:
    type: object
    properties:
      order_code:
        type: string
        description: order code of the successor
      product:
        "$ref": "#/definitions/Product_nested"
  SuccessorsResponse:
    type: object
    properties:
      successors:
        type: array
        items:
          "$ref": "#/definitions/SuccessorResponse"
  SystemBase:
    discriminator: SystemBaseType
    properties:
      name:
        type: string
        description: System name. System
      description:
        type: string
        description: description text of the System
  SystemIDs:
    type: object
    title: systems
    required:
    - systems
    properties:
      systems:
        type: array
        title: systems
        items:
          "$ref": "#/definitions/Nested_ID"
  SystemResponse:
    required:
    - id
    - name
    allOf:
    - "$ref": "#/definitions/SystemBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        status:
          "$ref": "#/definitions/Nested_ID_href"
        type:
          "$ref": "#/definitions/Nested_ID_href"
        parent:
          "$ref": "#/definitions/Nested_ID_href"
        recipe:
          "$ref": "#/definitions/Nested_ID_href"
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          type: object
          title: links
          properties:
            nodes:
              "$ref": "#/definitions/Link"
            pictures:
              "$ref": "#/definitions/Link"
            specifications:
              "$ref": "#/definitions/Link"
  SystemsResponse:
    type: object
    properties:
      systems:
        type: array
        items:
          "$ref": "#/definitions/SystemResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  TechnicalUserBase:
    discriminator: technicalUserBaseType
    required:
    - email
    properties:
      email:
        type: string
        description: needs to be a valid email address
      disabled:
        type: boolean
        default: false
        description: Disables user from access. Can be set by the user, but cannot
          be undone without an administrator.
  TechnicalUserCreateResponse:
    required:
    - id
    - email
    - password
    allOf:
    - "$ref": "#/definitions/TechnicalUserBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        password:
          type: string
          description: generated password
        links:
          type: object
          properties:
            usergroups:
              "$ref": "#/definitions/Link"
            userroles:
              "$ref": "#/definitions/Link"
  TechnicalUserPasswordResponse:
    required:
    - password
    properties:
      password:
        type: string
        description: generated password
  TechnicalUserRequest:
    allOf:
    - "$ref": "#/definitions/TechnicalUserBase"
  TechnicalUserResponse:
    required:
    - id
    - email
    allOf:
    - "$ref": "#/definitions/TechnicalUserBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        links:
          type: object
          properties:
            usergroups:
              "$ref": "#/definitions/Link"
            userroles:
              "$ref": "#/definitions/Link"
  TechnicalUsersResponse:
    type: object
    properties:
      technical_users:
        type: array
        items:
          "$ref": "#/definitions/TechnicalUserResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  TenantBase:
    discriminator: tenantBaseType
    properties:
      name:
        type: string
        description: Tenant name. The value must be unique
      description:
        type: string
        description: description text of the tenant
  TenantRequest:
    required:
    - name
    allOf:
    - "$ref": "#/definitions/TenantBase"
    - type: object
  TenantResponse:
    required:
    - id
    - name
    - description
    - public
    allOf:
    - "$ref": "#/definitions/TenantBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        public:
          type: boolean
          description: Indicates if the tenant is public
  TenantsResponse:
    type: object
    properties:
      tenants:
        type: array
        items:
          "$ref": "#/definitions/TenantResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  ThresholdBase:
    discriminator: ThresholdBaseType
    properties:
      name:
        type: string
        description: name of the threshold. The name of the threshold.
      description:
        type: string
        description: description of the threshold. The description of the threshold.
      key:
        type: string
        description: key of the threshold. This key is related to the keys set in
          asset values.
      unit_id:
        type: integer
        format: int64
        description: Id of the unit used for the threshold value property.
      value:
        type: number
        format: float
        description: the threshold value
      tolerance:
        type: number
        format: float
        description: the threshold tolerance, should be a positive value
      threshold_type:
        type: string
        description: the threshold type, tree values can be given for now, 'low' if
          the it is a lower threshold, 'high' if it is an upper threshold and 'deviation'
          if it is as deviation from reference values
      notification:
        type: boolean
        description: Whether the threshold should send notifications when exceeded
  ThresholdRequest:
    required:
    - name
    - key
    - unit_id
    - value
    - tolerance
    - threshold_type
    - notification
    allOf:
    - "$ref": "#/definitions/ThresholdBase"
  ThresholdResponse:
    required:
    - id
    - name
    - key
    - value
    - tolerance
    - threshold_type
    - notification
    properties:
      id:
        type: integer
        format: int64
        description: Id of object
      name:
        type: string
        description: name of the threshold. The name of the threshold.
      description:
        type: string
        description: description of the threshold. The description of the threshold.
      key:
        type: string
        description: key of the threshold. This key is related to the keys set in
          asset values.
      unit_id:
        type: integer
        format: int64
        description: Id of the unit used for the threshold value property.
      value:
        type: number
        format: float
        description: the threshold value
      tolerance:
        type: number
        format: float
        description: the threshold tolerance, should be a positive value
      threshold_type:
        type: string
        description: the threshold type, tree values can be given for now, 'low' if
          the it is a lower threshold, 'high' if it is an upper threshold and 'deviation'
          if it is as deviation from reference values
      notification:
        type: boolean
        description: Whether the threshold should send notifications when exceeded
  ThresholdsResponse:
    type: object
    required:
    - thresholds
    - pagination
    properties:
      thresholds:
        type: array
        items:
          "$ref": "#/definitions/ThresholdResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  UnitBase:
    discriminator: unitBaseType
    required:
    - name
    - code
    properties:
      code:
        type: string
        description: The value must be unique. Whitespaces are trimmed.
      symbol:
        type: string
        description: Symbol of the unit.
      name:
        type: string
        description: Supports translations. Whitespaces are trimmed.
      description:
        type: string
        description: Supports translations.
  UnitResponse:
    required:
    - id
    - name
    allOf:
    - "$ref": "#/definitions/UnitBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        base_unit:
          "$ref": "#/definitions/Nested_ID_href"
  UnitsResponse:
    type: object
    properties:
      units:
        type: array
        items:
          "$ref": "#/definitions/UnitResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  UsageResponse:
    type: object
    properties:
      asset_count:
        type: integer
        format: int64
        description: Number of assets assigned to this user's active subscription
      file_storage:
        type: integer
        format: int64
        description: Use of file storage for this user (in bytes)
      data_storage:
        type: integer
        format: int64
        description: Use of data storage for this user (in bytes)
  UserAddressRequest:
    properties:
      first_name:
        type: string
        description: first_name
      last_name:
        type: string
        description: last_name
      email:
        type: string
        description: email
      vat_number:
        type: string
        description: value added tax identification number.
    allOf:
    - "$ref": "#/definitions/AddressBase"
    - type: object
  UserAddressResponse:
    allOf:
    - "$ref": "#/definitions/AddressBase"
    - type: object
      properties:
        country_name:
          type: string
          description: name of the country
        email:
          type: string
          description: email
        vat_number:
          type: string
          description: value added tax identification number.
  UserBase:
    discriminator: userBaseType
    required:
    - email
    properties:
      email:
        type: string
        description: needs to be a valid email address
      first_name:
        type: string
      last_name:
        type: string
  UserChangeRequest:
    discriminator: userChangeRequest
    properties:
      first_name:
        type: string
      last_name:
        type: string
      disabled:
        type: boolean
        default: false
        description: Disables user from access. Can be set by the user, but cannot
          be undone without an administrator.
      address:
        "$ref": "#/definitions/UserAddressRequest"
  UserGroupBase:
    discriminator: userGroupBaseType
    required:
    - name
    properties:
      name:
        type: string
        description: Name must be unique. Max length is 60 characters. Whitespaces
          are trimmed.
      description:
        type: string
        description: Details about the user group.
  UserGroupIDs:
    type: object
    title: usergroups
    required:
    - usergroups
    properties:
      usergroups:
        type: array
        title: usergroups
        items:
          "$ref": "#/definitions/Nested_ID"
  UserGroupRequest:
    required:
    - name
    allOf:
    - "$ref": "#/definitions/UserGroupBase"
    - type: object
  UserGroupResponse:
    required:
    - id
    - name
    allOf:
    - "$ref": "#/definitions/UserGroupBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        links:
          properties:
            users:
              "$ref": "#/definitions/Link"
  UserGroupWithUsers:
    allOf:
    - "$ref": "#/definitions/UserGroupResponse"
  UserGroupsWithUsers:
    type: object
    properties:
      usergroups:
        type: array
        items:
          "$ref": "#/definitions/UserGroupWithUsers"
      pagination:
        "$ref": "#/definitions/Pagination"
  UserIDorEmails:
    type: object
    title: users
    required:
    - users
    properties:
      users:
        type: array
        title: users
        items:
          "$ref": "#/definitions/Nested_ID_Email"
  UserIDs:
    type: object
    title: users
    required:
    - users
    properties:
      users:
        type: array
        title: users
        items:
          "$ref": "#/definitions/Nested_ID"
  UserPublicResponse:
    required:
    - id
    properties:
      id:
        type: integer
        format: int64
        description: Id of object
      first_name:
        type: string
      last_name:
        type: string
      links:
        type: object
        properties:
          usergroups:
            "$ref": "#/definitions/Link"
          userroles:
            "$ref": "#/definitions/Link"
  UserResponse:
    required:
    - id
    - email
    allOf:
    - "$ref": "#/definitions/UserBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        confirmed_at:
          type: string
          description: Timestamp at which the user was confirmed
        confirmation_sent_at:
          type: string
          description: Timestamp at which the confirmation mail was sent to the user
        created_at:
          type: string
          description: Timestamp at which the user was created
        updated_at:
          type: string
          description: Timestamp at which the user was last changed
        disabled:
          type: boolean
        address:
          "$ref": "#/definitions/UserAddressResponse"
        links:
          type: object
          properties:
            usergroups:
              "$ref": "#/definitions/Link"
            userroles:
              "$ref": "#/definitions/Link"
            specifications:
              "$ref": "#/definitions/Link"
  UserRoleBase:
    discriminator: userRoleBaseType
    required:
    - name
    properties:
      name:
        type: string
        description: Userroles' name. The value must be unique. Whitespaces are trimmed
      description:
        type: string
        description: description text of the Role
  UserRoleIDs:
    type: object
    title: userroles
    required:
    - userroles
    properties:
      userroles:
        type: array
        title: userroles
        items:
          "$ref": "#/definitions/Nested_ID"
  UserRoleRequest:
    required:
    - name
    allOf:
    - "$ref": "#/definitions/UserRoleBase"
    - type: object
      properties:
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
  UserRoleResponse:
    required:
    - id
    - name
    allOf:
    - "$ref": "#/definitions/UserRoleBase"
    - type: object
      properties:
        id:
          type: integer
          format: int64
          description: Id of object
        tenant:
          "$ref": "#/definitions/Nested_ID_href"
        links:
          properties:
            users:
              "$ref": "#/definitions/Link"
  UserRolesResponse:
    type: object
    properties:
      userroles:
        type: array
        items:
          "$ref": "#/definitions/UserRoleResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  UsersPublicResponse:
    type: object
    properties:
      users:
        type: array
        items:
          "$ref": "#/definitions/UserPublicResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  UsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          "$ref": "#/definitions/UserResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  WebhookBase:
    discriminator: webhookBaseType
    required:
    - url
    - event_types
    properties:
      url:
        type: string
        description: url of the webhook
      event_types:
        type: array
        description: Array of event types to be subscribed.
        items:
          type: string
          format: string
          description: Name of the event type. See https://developer.netilion.endress.com/support/webhooks
            for possible types and details
      properties:
        type: object
        description: Event types which user needs to subscribe with attributes of
          each event type as an array
        required:
        - event_type
        properties:
          event_type:
            type: array
            description: event type to configure
            items:
              type: string
              format: string
              description: Properties to limit the trigger of the webhook to certain
                cases. See https://developer.netilion.endress.com/support/webhooks
                for details
      disabled:
        type: boolean
        default: false
        description: webhook is disabled and does not receive any events
      force_sorted_delivery:
        type: boolean
        default: false
        description: 'Send webhooks in the order the data arrives in netilion. Caution:
          this slows down the delivery of the data because it can no longer be processed
          in parallel.'
  WebhookCreateResponse:
    allOf:
    - "$ref": "#/definitions/WebhookResponse"
    - "$ref": "#/definitions/WebhookSecretResponse"
  WebhookEventIDs:
    type: object
    title: webhook_events
    required:
    - webhook_events
    properties:
      webhook_events:
        type: array
        title: webhook_events
        items:
          "$ref": "#/definitions/Nested_ID"
  WebhookEventResponse:
    required:
    - id
    properties:
      id:
        type: integer
        format: int64
        description: Id of webhook event
      status:
        type: string
        description: status of the event, possible values are pending, delivered,
          cancelled and failed
      payload:
        type: object
        description: payload of the webhook event
      last_send_at:
        type: string
        description: date when webhook event was last send
      retries:
        type: integer
        description: number of retries to send the event
  WebhookEventResponses:
    type: object
    required:
    - webhook_events
    - pagination
    properties:
      webhook_events:
        type: array
        items:
          "$ref": "#/definitions/WebhookEventResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  WebhookRequest:
    allOf:
    - "$ref": "#/definitions/WebhookBase"
  WebhookResponse:
    required:
    - id
    allOf:
    - properties:
        id:
          type: integer
          format: int64
          description: Id of object
    - "$ref": "#/definitions/WebhookBase"
  WebhookResponses:
    type: object
    required:
    - webhooks
    - pagination
    properties:
      webhooks:
        type: array
        items:
          "$ref": "#/definitions/WebhookResponse"
      pagination:
        "$ref": "#/definitions/Pagination"
  WebhookSecretResponse:
    required:
    - secret
    allOf:
    - properties:
        secret:
          type: string
          format: string
          description: Secret key of the webhook used to sign the payload
parameters:
  AcceptLanguageHeader:
    name: Accept-Language
    in: header
    description: The client's accepted languages. One or several (e.g. fr,de,en)
    type: string
    required: false
  AccessibilityFilter:
    name: accessibility
    in: query
    description: Filter accepts undefined, easy, moderate or difficult
    required: false
    type: string
  AddOnTypeFilter:
    name: add_on_type
    in: query
    description: Filter accepts addon or connectivity
    type: string
    required: false
  AdminOrUserIDFilter:
    name: admin_or_user_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  AdminUserIDFilter:
    name: admin_user_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  AggregationFilter:
    name: aggregation
    in: query
    description: Supported aggregation methods are `mean, min, max, sum, stddev`.
      This value is mandatory if interval is defined.
    type: string
    required: false
  AggregationIntervalFilter:
    name: interval
    in: query
    description: Interval which is used for the aggregation. The value is mandatory
      if aggregation is defined. Supported intervals are number of `s, m, h, d, w`.
      Example `3h`.
    type: string
    required: false
  ApiKeyFilter:
    name: api_key
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  AssetHealthConditionTimemachineOrderByParameter:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `created_datetime` or `deleted_datetime`,
      add `-` as a prefix for descending order.
    type: string
  AssetIDFilter:
    name: asset_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    type: string
    required: false
  AssetIDInEventFilter:
    name: asset_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    type: string
  AssetIDNullFilter:
    name: asset_id
    in: query
    description: One or multiple ids (comma list). Filter accepts "null" for all objects
      with no assets assigned or "!null" for any assigned asset
    type: string
  AssetNotificationStatusFilter:
    name: asset_notification_status
    in: query
    description: Filter by asset notification status - no wildcard support
    required: false
    type: string
  AssetPathID:
    name: asset_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  AssetStatusIDFilter:
    name: asset_status_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  AssetValueDateTimeFilter:
    name: datetime
    in: query
    description: exact date for history values. Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: date
    required: false
  AssetValueFromFilter:
    name: from
    in: query
    description: Start date filter for history values. Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: date
    required: false
  AssetValueHoldFilter:
    name: hold
    in: query
    type: boolean
    required: false
  AssetValuePagination_Per_Page:
    name: per_page
    in: query
    description: Number of items to load per page, default value is 500, maximum is
      1000
    type: integer
    required: false
    minimum: 1
    maximum: 1000
  AssetValueSimulatedFilter:
    name: simulated
    in: query
    type: boolean
    required: false
  AssetValueStatusFilter:
    name: status
    in: query
    description: Status of the value. Possible values are good, uncertain, bad.
    type: string
    required: false
  AssetValueToFilter:
    name: to
    in: query
    description: End date for history values. Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: date
    required: false
  AssetValuesKeyPathID:
    name: key
    in: path
    description: key for the asset values
    type: string
    required: true
  AssetValuesOrderByParameter:
    name: order_by
    in: query
    description: Order result by attribute value, accepts `timestamp`, add `-` as
      a prefix for descending order. Default ordering is the order the values were
      entered in.
    type: string
    required: false
  AssetsHistoryOrderByParameter:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `event` or `event_datetime`,
      add `-` as a prefix for descending order.
    type: string
  AssetsOrderByParameter:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `serial_number`, `created_at`
      or `updated_at`, `last_seen_at`, add `-` as a prefix for descending order. Default
      value is `id`
    type: string
  AttachmentIDFilter:
    name: attachment_id
    in: query
    description: One or multiple ids (comma list), maximum length is 25. Expected
      id format is integer
    type: string
    required: false
  AttributeHistoryOrderByParameter:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `timestamp`, add `-` as
      a prefix for descending order.
    type: string
  AuthorFilter:
    name: author
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  BaseUnitIDFilter:
    name: base_unit_id
    in: query
    description: One or multiple ids (comma list).
    required: false
    type: string
  BatchPathID:
    name: batch_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  BatchValuesKeyPathID:
    name: key
    in: path
    description: key for the batch values
    type: string
    required: true
  BillOfMaterialPathID:
    name: bill_of_material_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  CategoryIDFilter:
    name: category_id
    in: query
    description: One or multiple ids (comma list). By adding `+` after the id, the
      filter considers the given category and all its children (e.g. 3+).
    required: false
    type: string
  CategoryPathID:
    name: category_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  ClassificationIDFilter:
    name: classification_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  ClientApplicationIDFilter:
    name: client_application_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    type: integer
    format: int64
    required: false
  ClientApplicationPathID:
    name: client_application_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  CodeFilter:
    name: code
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  CompanyPathID:
    name: company_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  ContactPersonIDFilter:
    name: contact_person_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  ContentAuthorFilter:
    name: content_author
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  ContentDateFilter:
    name: content_date
    in: query
    description: Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss
    type: string
    format: date
    required: false
  ContentDateFromFilter:
    name: content_date_from
    in: query
    description: Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss
    type: string
    format: date
    required: false
  ContentDateToFilter:
    name: content_date_to
    in: query
    description: Expected date format is YYYY-MM-DD or YYYY-MM-DDThh:mm:ss
    type: string
    format: date
    required: false
  ContentLanguageHeader:
    name: Content-Language
    in: header
    description: language of the content
    type: string
    required: false
  ContentVersionFilter:
    name: content_version
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  CreatedAtFilter:
    name: created_at
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  CreatedAtFromFilter:
    name: created_at_from
    in: query
    description: Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  CreatedAtToFilter:
    name: created_at_to
    in: query
    description: Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  CriticalityFilter:
    name: criticality
    in: query
    description: Filter accepts undefined, low, medium or high
    required: false
    type: string
  CustomerIDFilter:
    name: customer_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  CustomerNumberFilter:
    name: customer_number
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  CustomerOrderByParameter:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `number`, `id`, `created_at`
      or `updated_at` add `-` as a prefix for descending order.
    type: string
  CustomerPurchaseOrderNumberFilter:
    name: customer_purchase_order_number
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  DataStorageNotificationStatusFilter:
    name: data_storage_notification_status
    in: query
    description: Filter by data storage notification status - no wildcard support
    required: false
    type: string
  DateFilter:
    name: date
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    required: false
  DateFromFilter:
    name: date_from
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    required: false
  DateOfShipmentFilter:
    name: date_of_shipment
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  DateOfShipmentFromFilter:
    name: date_of_shipment_from
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  DateOfShipmentToFilter:
    name: date_of_shipment_to
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  DateToFilter:
    name: date_to
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
  DefaultOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `created_at` or `updated_at`.
      Add `-` as a prefix for descending order. Default value is `id`
    type: string
  DeliveryPathID:
    name: delivery_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  DescriptionFilter:
    name: description
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  DeviceIdentFilter:
    name: device_ident
    in: query
    description: Filter accepts `*` as wildcard
    required: false
    type: string
  DiagnosisCodeFilter:
    name: diagnosis_code
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  DocumentPathID:
    name: document_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  DocumentVersionFilter:
    name: document_version
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  EMailFilter:
    name: email
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  EdgeDeviceApplicationOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `name`, `created_at`
      or `updated_at`, add `-` as a prefix for descending order. Default value is
      `id`
    type: string
  EdgeDeviceApplicationPathID:
    name: edge_device_application_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  EdgeDeviceOrderByParameter:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `serial_number`, `created_at`
      or `updated_at`, `last_seen_at`, `name`, add `-` as a prefix for descending
      order. Default value is `id`
    type: string
  EdgeDeviceTypeIDFilter:
    name: edge_device_type_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  EnabledFilter:
    name: enabled
    in: query
    description: Filter accepts true or false
    required: false
    type: boolean
  EndDateFilter:
    name: end_date
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  EndDatetimeFilter:
    name: end_datetime
    in: query
    description: Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  EndDatetimeFromFilter:
    name: end_datetime_from
    in: query
    description: Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: date
    required: false
  EndDatetimeToFilter:
    name: end_datetime_to
    in: query
    description: Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  EventDateTimeFromFilter:
    name: event_datetime_from
    in: query
    description: Starting with + will include the previous value as well. Expected
      date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: date
    required: false
  EventDateTimeToFilter:
    name: event_datetime_to
    in: query
    description: Ending with + will include the next value as well. Expected date
      format is YYYY-MM-DDThh:mm:ss
    type: string
    format: date
    required: false
  EventOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `start_datetime`, `end_datetime`,
      `id`, `created_at` or `updated_at`. Add `-` as a prefix for descending order.
      Default value is `id`
    type: string
  EventPathID:
    name: event_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  EventTypeFilter:
    name: event_type
    in: query
    description: Event type of the notification (e.g. health_status)
    required: false
    type: string
  ExternalReferenceFilter:
    name: external_reference
    in: query
    description: Filter accepts `*` as wildcard
    required: false
    type: string
  FileNameFilter:
    name: file_name
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  FileStorageNotificationStatusFilter:
    name: file_storage_notification_status
    in: query
    description: Filter by file storage notification status - no wildcard support
    required: false
    type: string
  FirstNameFilter:
    name: first_name
    in: query
    type: string
    required: false
    description: Filter accepts `*` as wildcard
  FromFilter:
    name: from
    in: query
    description: Start date filter for history values. Starting with ```+``` will
      include the previous value as well. Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: date
    required: false
  FromPlainFilter:
    name: from
    in: query
    description: Start date filter for timemachine values. Expected date format is
      YYYY-MM-DDThh:mm:ss
    type: string
    format: date-time
    required: false
  GroupFilter:
    name: group
    in: query
    description: Group of the asset value.
    type: string
    required: false
  HealthConditionCausePathID:
    name: cause_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  HealthConditionCausesOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `code`, `created_at`
      or `updated_at`, add `-` as a prefix for descending order. Default value is
      `id`
    type: string
  HealthConditionIDFilter:
    name: health_condition_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  HealthConditionPathID:
    name: health_condition_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  HealthConditionRemediesOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `code`, `created_at`
      or `updated_at`, add `-` as a prefix for descending order. Default value is
      `id`
    type: string
  HealthConditionsOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `diagnosis_code`,
      `device_ident`, `product_identifier`, `created_at` or `updated_at`, add `-`
      as a prefix for descending order. Default value is `id`
    type: string
  HiddenNodeFilter:
    name: hidden
    in: query
    description: Filter accepts true or false
    required: false
    type: boolean
  HistoryEventFilter:
    name: event
    in: query
    description: Filter accepts `create` or `destroy`
    type: string
    required: false
  IncludeParam:
    name: include
    in: query
    description: Comma separated list of objects to include in response
    type: string
    required: false
  IncludeTotalCountParam:
    name: include_total_count
    in: query
    description: whether to return total count related information in the response
      or just the next url if it exists. Using false value will enhance the performance
      of this call. Default value is true but will change in the near future to false.
      Please specify the value of this parameter if you want a specific behavior.
    required: false
    type: boolean
  InstrumentationAssetStatusIDFilter:
    name: asset_status_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer.
      This retrieves all Instrumentations where at least one of its assets has one
      of the given statuses.
    required: false
    type: string
  InstrumentationIDFilter:
    name: instrumentation_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    type: string
    required: false
  InstrumentationIDInEventFilter:
    name: instrumentation_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    type: string
  InstrumentationIDNullFilter:
    name: instrumentation_id
    in: query
    description: One or multiple ids (comma list). Filter accepts "null" for all objects
      with no instrumentations assigned or "!null" for any assigned instrumentation
    type: string
  InstrumentationPathID:
    name: instrumentation_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  InstrumentationValuesKeyPathID:
    name: key
    in: path
    description: key for the instrumentation values
    type: string
    required: true
  InstrumentationsHistoryOrderByParameter:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `event` or `event_datetime`,
      add `-` as a prefix for descending order.
    type: string
  InstrumentationsOrderByParameter:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `tag`, `created_at`
      or `updated_at`, add `-` as a prefix for descending order. Default value is
      `id`
    type: string
  KeyFilter:
    name: key
    in: query
    description: only the values of the specified keys will be returned. If no key
      is specified all keys of the asset with its latest values will be received.
      Multiple values can be specified in a comma seperated list.
    type: string
    required: false
  KeyUnitIDFilter:
    name: key_unit_id
    in: query
    description: value of the provided key will be returned in the specified unit.
      If no key_unit is defined the last written unit will be returned. Accepted format
      is `key[unit_id]`. Multiple values can be provided in a comma seperated list.
    type: string
    required: false
  LastNameFilter:
    name: last_name
    in: query
    type: string
    required: false
    description: Filter accepts `*` as wildcard
  LastSeenAtFromFilter:
    name: last_seen_at_from
    in: query
    description: Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  LastSeenAtToFilter:
    name: last_seen_at_to
    in: query
    description: Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  LogLevelFilter:
    name: log_level
    in: query
    description: Filter accepts trace, debug, info, warning, error, critical, off
    type: string
    required: false
  ManufacturerIDFilter:
    name: manufacturer_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  MaterialNumberFilter:
    name: material_number
    in: query
    description: Filter accepts `*` as wildcard
    required: false
    type: string
  NameFilter:
    name: name
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  NodeIDInEventFilter:
    name: node_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    type: string
  NodeIDNullFilter:
    name: node_id
    in: query
    description: One or multiple ids (comma list). Filter acccepts "null" for all
      objects with no nodes assigned or "!null" for any assigned node
    type: string
  NodeIDinAssetFilter:
    name: node_id
    in: query
    description: One or multiple ids (comma list). Filter accepts "null" for all assets
      with no nodes assigned or "!null" for any assigned node.  By adding `+` after
      the id, the filter considers the given node and all its sub components (nodes,
      instrumentations and systems), but this is not usable in combination with a
      comma list.
    type: string
  NodeIDwithPlusFilter:
    name: node_id
    in: query
    description: One or multiple ids (comma list). Filter accepts "null" for all objects
      with no nodes assigned or "!null" for any assigned node.  By adding `+` after
      the id, the filter considers the given node and all its sub components but this
      is not usable in combination with a comma list.
    type: string
  NodePathID:
    name: node_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  NodesOrderByParameter:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `name`, `created_at`
      or `updated_at`, add `-` as a prefix for descending order. Default value is
      `id`
    type: string
  NotificationStatusFilter:
    name: notification_status
    in: query
    description: Filter by notification status - no wildcard support
    required: false
    type: string
  NumberFilter:
    name: number
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  OrderCodeFilter:
    name: order_code
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  OrderUserIDFilter:
    name: order_user_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  OwnershipClaimedFilter:
    name: ownership_claimed
    in: query
    description: Filter accepts true or false
    required: false
    type: boolean
  Pagination_Page:
    name: page
    in: query
    description: Page number to load
    type: integer
    required: false
  Pagination_Per_Page:
    name: per_page
    in: query
    description: Number of items to load per page
    type: integer
    required: false
    minimum: 1
    maximum: 100
  ParentIDFilter:
    name: parent_id
    in: query
    description: One or multiple ids (comma list). "null" to retrieve all objects
      without parent, "!null" for all objects with parent.
    required: false
    type: string
  PermissionFilter:
    name: permission
    in: query
    description: Filter by permission of current user. Accepts `can_permit`, `can_delete`,
      `can_update`, `can_read` (default)
    type: string
    required: false
  ProductCategoryIDFilter:
    name: product_category_id
    in: query
    description: One or multiple ids (comma list). By adding `+` after the id, the
      filter considers the given category and all its children (e.g. 3+).
    required: false
    type: string
  ProductCodeFilter:
    name: product_code
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  ProductFeatureIDFilter:
    name: product_feature_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  ProductFeatureKeyFilter:
    name: feature_key
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  ProductIDFilter:
    name: product_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  ProductIdentifierFilter:
    required: false
    name: product_identifier
    in: query
    description: Filter accepts * as wildcard
    type: string
  ProductIdentifierOrganizationFilter:
    required: false
    name: organization_name
    in: query
    description: Filter accepts `FIELDCOMM_GROUP`, `PROFIBUS_PROFINET`, `ODVA`, `MODBUS_ORGANIZATION`,
      `OTHER_ORGANIZATION`
    type: string
  ProductIdentifierPathID:
    name: product_identifier_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  ProductIdentifierProtocolFilter:
    name: protocol
    in: query
    description: Filter accepts `PROFIBUS`, `HART`, `ETHERNETIP`, `MODBUS`, `OTHERS
    required: false
    type: string
  ProductIdentifierVersionFilter:
    required: false
    name: protocol_version
    in: query
    description: Filter accepts * as wildcard
    type: string
  ProductOptionKeyFilter:
    name: option_key
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  ProductPathID:
    name: product_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  ProductStatusIDFilter:
    name: product_status_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  ProductVariantCodeFilter:
    name: variant_code
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  ProductVariantPathID:
    name: product_variant_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  ProductionDateFilter:
    name: production_date
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  ProductionDateFromFilter:
    name: production_date_from
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  ProductionDateToFilter:
    name: production_date_to
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  ProtocolFilter:
    name: protocol
    in: query
    description: Filter accepts `PROFIBUS`, `HART`, `ETHERNETIP` and `MODBUS`
    required: false
    type: string
  ProtocolVersionFilter:
    name: protocol_version
    in: query
    description: Filter accepts `*` as wildcard
    required: false
    type: string
  PublicFilter:
    name: public
    in: query
    description: Valid values are true and false
    type: boolean
    required: false
  PurchaseOrderPathID:
    name: purchase_order_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  QuotationIDFilter:
    name: quotation_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  QuotationPathID:
    name: quotation_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  ReceiverIDFilter:
    name: receiver_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  RecipesOrderByParameter:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `name`, `created_at`
      or `updated_at`. Add `-` as a prefix for descending order. Default value is
      `id`
    type: string
  RemarksFilter:
    name: remarks
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  RequestForQuotationIDFilter:
    name: request_for_quotation_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  RequestForQuotationPathID:
    name: request_for_quotation_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  ResellerLabelFilter:
    name: reseller_label
    in: query
    description: Filter accepts `*` as wildcard. Filter accepts "null" for all objects
      with no reseller label or "!null" for all with any reseller label
    type: string
    required: false
  ScheduleTypeFilter:
    name: schedule_type
    in: query
    description: Filter by schedule type. Accepts `heartbeat_verification`
    type: string
    required: false
  ScopeFilter:
    name: scope
    in: query
    description: Filter accepts `RESELLER`, `USER` or `USABLE`.`RESELLER` can be used
      for reseller users to get subscriptions that they sold to other users. `USER`
      returns all subscriptions where the user is the owner, is a seat user or has
      can_read permissions to access the subscription, for a reseller the subscriptions
      returned from `RESELLER` filter are excluded from the `USER` result. The result
      of `USER` can include usable and not usable subscriptions. Subscription is marked
      as usable if it can be used in the applications to access data. `USABLE` filter
      returns a subset of the `USER` result which excludes subscriptions that are
      only visible because of the can_read permission (not usable).
    required: false
    type: string
  SearchQueryFilter:
    name: q
    in: query
    description: search query
    type: string
    required: true
  SearchScopesFilter:
    name: scope
    in: query
    description: One or multiple scopes (comma list). Possible values are assets,
      instrumentations, nodes.
    type: string
    required: false
  SelectorFilter:
    name: selector
    in: query
    description: Supported selector methods are `first, last`. This value is mandatory
      if interval is defined.
    type: string
    required: false
  SelectorIntervalFilter:
    name: interval
    in: query
    description: Interval which is used for the selector. The value is mandatory if
      selector is defined. Supported intervals are number of `s, m, h, d, w`. Example
      `3h`.
    type: string
    required: false
  SenderIDFilter:
    name: sender_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  SerialNumberFilter:
    required: false
    name: serial_number
    in: query
    description: Filter accepts `*` as wildcard
    type: string
  SoftwareOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `version_number`, `name`,
      `id`, `created_at` or `updated_at`. Add `-` as a prefix for descending order.
      Default value is `id`
    type: string
  SoftwarePathID:
    name: software_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  SoftwareTypeIDFilter:
    name: software_type_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  SoftwareVersionIDFilter:
    name: software_version_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  SparePartPathID:
    name: spare_part_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  SpecificationHistoryOrderByParameter:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `source_timestamp` or `updated_at`,
      add `-` as a prefix for descending order.
    type: string
  SpecificationsKeyFilter:
    name: specifications_key
    in: query
    description: Filter accepts `*` as wildcard (if used as single specifications
      filter), supports comma list of keys in connection with specifications_value
      filter
    required: false
    type: string
  SpecificationsValueFilter:
    name: specifications_value
    in: query
    description: Filter accepts `*` as wildcard, supports comma list of values in
      connection with specifications_key filter. Does not work for vectors
    required: false
    type: string
  StandardIDFilter:
    name: standard_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  StartDateFilter:
    name: start_date
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  StartDatetimeFilter:
    name: start_datetime
    in: query
    description: Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  StartDatetimeFromFilter:
    name: start_datetime_from
    in: query
    description: Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  StartDatetimeToFilter:
    name: start_datetime_to
    in: query
    description: Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  StatusCodeFilter:
    name: status_code
    in: query
    description: Filter accepts `*` as wildcard
    required: false
    type: string
  StatusFilter:
    name: status
    in: query
    description: Filter by status - no wildcard support
    required: false
    type: string
  StatusIDFilter:
    name: status_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  SubscriptionIDFilter:
    name: subscription_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  SubscriptionPathID:
    name: subscription_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  SubscriptionSeatStatusFilter:
    name: status
    in: query
    description: one or multiple statuses (comma list). Allowed values are `pending`,
      `invited`, `accepted`
    type: string
    required: false
  SubscriptionStatusFilter:
    name: status
    in: query
    description: one or multiple statuses (comma list). Allowed values are `open`,
      `payment_required`, `confirmed`, `scheduled_update`, `non_renewing` and `cancelled`
    type: string
    required: false
  SubscriptionTypeFilter:
    name: subscription_type
    in: query
    description: Filter by subscription type - no wildcard support
    required: false
    type: string
  SymbolFilter:
    name: symbol
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  SystemIDNullFilter:
    name: system_id
    in: query
    description: One or multiple ids (comma list). Filter accepts "null" for all objects
      with no systems assigned or "!null" for any assigned system
    type: string
  SystemPathID:
    name: system_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  SystemValuesKeyPathID:
    name: key
    in: path
    description: key for the system values
    type: string
    required: true
  SystemsOrderByParameter:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `name`, `created_at`
      or `updated_at`. Add `-` as a prefix for descending order. Default value is
      `id`
    type: string
  TagFilter:
    name: tag
    in: query
    description: Filter accepts `*` as wildcard
    type: string
    required: false
  TechnicalUserIDFilter:
    name: technical_user_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  TenantIDFilter:
    name: tenant_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  TenantOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `name`, `created_at`
      or `updated_at`. Add `-` as a prefix for descending order. Default value is
      `id`
    type: string
  TenantPathID:
    name: tenant_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  ThresholdsOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `name`, `key`, `threshold_type`,
      `notification`, `created_at`, `updated_at`. Add `-` as a prefix for descending
      order. Default value is `id`
    type: string
  TimeFilter:
    name: time
    in: query
    description: Expected format is YYYY-MM-DD
    type: string
    format: date
    required: false
  TimeFromFilter:
    name: time_from
    in: query
    description: Expected format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  TimeToFilter:
    name: time_to
    in: query
    description: Expected format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  ToFilter:
    name: to
    in: query
    description: End date for history values. Ending with ```+``` will include the
      next value as well. Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: date
    required: false
  ToPlainFilter:
    name: to
    in: query
    description: End date for timemachine values. Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: date-time
    required: false
  TypeIDFilter:
    name: type_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    required: false
    type: string
  UnitFilter:
    name: unit_id
    in: query
    description: Id of the unit in which the values are to be returned.
    type: integer
    required: false
  UnitOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `code`, `name`, `created_at`
      or `updated_at`. Add `-` as a prefix for descending order. Default value is
      `id`
    type: string
  UpdatedAtFilter:
    name: updated_at
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  UpdatedAtFromFilter:
    name: updated_at_from
    in: query
    description: Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  UpdatedAtToFilter:
    name: updated_at_to
    in: query
    description: Expected date format is YYYY-MM-DDThh:mm:ss
    type: string
    format: dateTime
    required: false
  UsePreferredUnitsAssetKeyParam:
    name: use_preferred_units
    in: query
    description: whether to return the values in the preferred units described in
      the asset specification 'preferred_units' or not. These values have lower precedence
      than the parameter unit_id. Example value of the specification is '{"key_1"\:"unit_code_1",
      "key_2"\:"unit_code_2"}'
    required: false
    type: boolean
  UsePreferredUnitsAssetParam:
    name: use_preferred_units
    in: query
    description: whether to return the values in the preferred units described in
      the asset specification 'preferred_units' or not. These values have lower precedence
      than the parameter key_unit_id. Example value of the specification is '{"key_1"\:"unit_code_1",
      "key_2"\:"unit_code_2"}'
    required: false
    type: boolean
  UsePreferredUnitsInstrumentationKeyParam:
    name: use_preferred_units
    in: query
    description: whether to return the values in the preferred units described in
      the asset specification 'preferred_units' or not, for the instrumentation the
      mapping will result from the merge of all its assets mappings. These values
      have lower precedence than the parameter unit_id. Example value of the specification
      is '{"key_1"\:"unit_code_1", "key_2"\:"unit_code_2"}'
    required: false
    type: boolean
  UsePreferredUnitsInstrumentationParam:
    name: use_preferred_units
    in: query
    description: whether to return the values in the preferred units described in
      the asset specification 'preferred_units' or not, for the instrumentation the
      mapping will result from the merge of all its assets mappings. These values
      have lower precedence than the parameter key_unit_id. Example value of the specification
      is '{"key_1"\:"unit_code_1", "key_2"\:"unit_code_2"}'
    required: false
    type: boolean
  UserGroupOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `name`, `created_at`
      or `updated_at`. Add `-` as a prefix for descending order. Default value is
      `id`
    type: string
  UserIDFilter:
    name: user_id
    in: query
    description: One or multiple ids (comma list). Expected id format is integer
    type: integer
    format: int64
    required: false
  UserOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `email`, `first_name`,
      `last_name`, `created_at` or `updated_at`. Add `-` as a prefix for descending
      order. Default value is `id`
    type: string
  UserPathID:
    name: user_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  UserRoleOrderBy:
    required: false
    name: order_by
    in: query
    description: Order result by attribute value, accepts `id`, `name`, `created_at`
      or `updated_at`. Add `-` as a prefix for descending order. Default value is
      `id`
    type: string
  UsergroupPathID:
    name: usergroup_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  UserrolePathID:
    name: userrole_id
    in: path
    description: The resource defined in the URL
    type: integer
    format: int64
    required: true
  ValidAtFilter:
    name: valid_at
    in: query
    description: Expected date format is YYYY-MM-DD or YYYY-MM or YYYY
    type: string
    format: date
    required: false
  ValidFromFilter:
    name: valid_from
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  ValidFromFromFilter:
    name: valid_from_from
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  ValidFromToFilter:
    name: valid_from_to
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  ValidUntilFilter:
    name: valid_until
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  ValidUntilFromFilter:
    name: valid_until_from
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
  ValidUntilToFilter:
    name: valid_until_to
    in: query
    description: Expected date format is YYYY-MM-DD
    type: string
    format: date
    required: false
responses:
  '204':
    description: The request was successful, and the response body is empty.
  '304':
    description: The resources was not changed, and the response body is empty.
  '400':
    description: Bad request. The data given in the request failed validation, or
      the authorization was missing. Please inspect the response body for details
      on the error.
    schema:
      "$ref": "#/definitions/ErrorResponse"
  '401':
    description: Unauthorized request. API-Key or authorization were invalid.
  '402':
    description: Quota is exceeded. Cant upload anymore files or create any more assets.
      In case of storage exceeded, contains the MB how much its exceeded in the message.
    schema:
      "$ref": "#/definitions/ErrorResponse"
  '403':
    description: It is forbidden to create, delete or update an object. Please inspect
      the response body for details on the error.
    schema:
      "$ref": "#/definitions/ErrorResponse"
  '404':
    description: The resource or the specified URL could not be found or the requesting
      user has no permission.
    schema:
      "$ref": "#/definitions/ErrorResponse"
  '409':
    description: Failed to create, update or delete a resource because of a conflict
      with an existing resource or due to existing assignments on the resource. Please
      inspect the response body for details on the error.
    schema:
      "$ref": "#/definitions/ErrorResponse"
  '413':
    description: Request entity too large. The send request exceeded the maximum allowed
      request size for this endpoint.
    schema:
      "$ref": "#/definitions/ErrorResponse"
  '429':
    description: Too many request. Overload protection has been enabled.
    schema:
      "$ref": "#/definitions/ErrorResponse"
  '500':
    description: Internal server error. The request failed. Please try again.
    schema:
      "$ref": "#/definitions/ErrorResponse"
  '503':
    description: Service currently not available. Please try again later.
    schema:
      "$ref": "#/definitions/ErrorResponse"